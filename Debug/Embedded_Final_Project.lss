
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000934  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800114  00800114  000009dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d84  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097a  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000958  00000000  00000000  0000227a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000809d  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d4  00000000  00000000  0000af3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000b411  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002bb3  00000000  00000000  0000b4c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  9e:	0c 94 98 04 	jmp	0x930	; 0x930 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_6>:
#include <avr/io.h>
#include <avr/interrupt.h>

int x = 0;
ISR(WDT_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
    x = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  ca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    PORTB |= (1 << PB0); // Set PB0 high
  ce:	85 e2       	ldi	r24, 0x25	; 37
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	20 81       	ld	r18, Z
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	21 60       	ori	r18, 0x01	; 1
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
    WDTCSR = (1 << WDIE);
  e0:	80 e6       	ldi	r24, 0x60	; 96
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	20 e4       	ldi	r18, 0x40	; 64
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
}
  ea:	00 00       	nop
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <WDGDrv_Init>:

void WDGDrv_Init(void) {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
    // Disable global interrupts
    cli();
 10c:	f8 94       	cli
    //Interrupt and System Reset Mode
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 10e:	80 e6       	ldi	r24, 0x60	; 96
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	28 e1       	ldi	r18, 0x18	; 24
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
    WDTCSR =  (1 << WDE)|(1 << WDIE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 118:	80 e6       	ldi	r24, 0x60	; 96
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	2a e4       	ldi	r18, 0x4A	; 74
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
    sei(); // Enable global interrupts
 122:	78 94       	sei
}
 124:	00 00       	nop
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <main>:

int main(void) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
    // Set PB0 as output for the LED
    DDRB |= (1 << PB0);
 134:	84 e2       	ldi	r24, 0x24	; 36
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	20 81       	ld	r18, Z
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	21 60       	ori	r18, 0x01	; 1
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
    PORTB &= ~(1 << PB0);  // Ensure the LED is initially off
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	85 e2       	ldi	r24, 0x25	; 37
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	2e 7f       	andi	r18, 0xFE	; 254
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
    WDGDrv_Init();
 158:	0e 94 82 00 	call	0x104	; 0x104 <WDGDrv_Init>

    // Main loop
    while (1) {
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0x30>

0000015e <WDGM_Init>:
static uint32 start_time;
static uint32 current_time;
uint32 last_execution_time;

void WDGM_Init(void)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
    led_no_calls = 0;
 16c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 170:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 174:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 178:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
    //start_time = HAL_GetTick();
    start_time = 0;
 17c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <start_time>
 180:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <start_time+0x1>
 184:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <start_time+0x2>
 188:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <start_time+0x3>
    //last_execution_time = HAL_GetTick(); 

}
 18c:	00 00       	nop
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
    //uint32 current_time = HAL_GetTick(); // get current time value using hal lib in stm32f4xx_hal
    if ((current_time - start_time) <= 100) // check if it's within 100ms
 1a4:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <current_time>
 1a8:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <current_time+0x1>
 1ac:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <current_time+0x2>
 1b0:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <current_time+0x3>
 1b4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <start_time>
 1b8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <start_time+0x1>
 1bc:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <start_time+0x2>
 1c0:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <start_time+0x3>
 1c4:	79 01       	movw	r14, r18
 1c6:	8a 01       	movw	r16, r20
 1c8:	e8 1a       	sub	r14, r24
 1ca:	f9 0a       	sbc	r15, r25
 1cc:	0a 0b       	sbc	r16, r26
 1ce:	1b 0b       	sbc	r17, r27
 1d0:	d8 01       	movw	r26, r16
 1d2:	c7 01       	movw	r24, r14
 1d4:	85 36       	cpi	r24, 0x65	; 101
 1d6:	91 05       	cpc	r25, r1
 1d8:	a1 05       	cpc	r26, r1
 1da:	b1 05       	cpc	r27, r1
 1dc:	b0 f5       	brcc	.+108    	; 0x24a <WDGM_MainFunction+0xb6>
    {
        if (led_no_calls >= 8 && led_no_calls <= 12) { // check no. of calls is between 8 and 12 or not
 1de:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 1e2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 1e6:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 1ea:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 1ee:	08 97       	sbiw	r24, 0x08	; 8
 1f0:	a1 05       	cpc	r26, r1
 1f2:	b1 05       	cpc	r27, r1
 1f4:	78 f0       	brcs	.+30     	; 0x214 <WDGM_MainFunction+0x80>
 1f6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 1fa:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 1fe:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 202:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 206:	0d 97       	sbiw	r24, 0x0d	; 13
 208:	a1 05       	cpc	r26, r1
 20a:	b1 05       	cpc	r27, r1
 20c:	18 f4       	brcc	.+6      	; 0x214 <WDGM_MainFunction+0x80>
            status = OK;
 20e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <status>
 212:	03 c0       	rjmp	.+6      	; 0x21a <WDGM_MainFunction+0x86>
        } else {
            status = NOK;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 21a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 21e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 222:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 226:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
        start_time = current_time; // update start time for the next 100ms period
 22a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <current_time>
 22e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <current_time+0x1>
 232:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <current_time+0x2>
 236:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <current_time+0x3>
 23a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <start_time>
 23e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <start_time+0x1>
 242:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <start_time+0x2>
 246:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <start_time+0x3>
    }
    last_execution_time = current_time;
 24a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <current_time>
 24e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <current_time+0x1>
 252:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <current_time+0x2>
 256:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <current_time+0x3>
 25a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <last_execution_time>
 25e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <last_execution_time+0x1>
 262:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <last_execution_time+0x2>
 266:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <last_execution_time+0x3>
}
 26a:	00 00       	nop
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	08 95       	ret

0000027a <WDGM_PovideSuppervisionStatus>:

WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 282:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <status>
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 294:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 298:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 29c:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 2a0:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	a1 1d       	adc	r26, r1
 2a8:	b1 1d       	adc	r27, r1
 2aa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <led_no_calls>
 2ae:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <led_no_calls+0x1>
 2b2:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <led_no_calls+0x2>
 2b6:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <led_no_calls+0x3>
}
 2ba:	00 00       	nop
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <Rcc_Init>:

#include "Bit_Operations.h"
#include "Rcc_Private.h"
#include "Std_Types.h"

void Rcc_Init(void) {
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(RCC_CR, 0);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	98 e3       	ldi	r25, 0x38	; 56
 2ce:	fc 01       	movw	r30, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	91 81       	ldd	r25, Z+1	; 0x01
 2d4:	a2 81       	ldd	r26, Z+2	; 0x02
 2d6:	b3 81       	ldd	r27, Z+3	; 0x03
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	38 e3       	ldi	r19, 0x38	; 56
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	f9 01       	movw	r30, r18
 2e0:	80 83       	st	Z, r24
 2e2:	91 83       	std	Z+1, r25	; 0x01
 2e4:	a2 83       	std	Z+2, r26	; 0x02
 2e6:	b3 83       	std	Z+3, r27	; 0x03
//	RCC_CFGR |= (0x0A << 4); // 8MHz internal
}
 2e8:	00 00       	nop
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <Rcc_Enable>:

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <Rcc_Enable+0x6>
 2f6:	1f 92       	push	r1
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	8b 83       	std	Y+3, r24	; 0x03
  uint8 BusId = PeripheralId / 32;
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	82 95       	swap	r24
 302:	86 95       	lsr	r24
 304:	87 70       	andi	r24, 0x07	; 7
 306:	89 83       	std	Y+1, r24	; 0x01
  uint8 PeripheralBitPosition = PeripheralId % 32;
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	8f 71       	andi	r24, 0x1F	; 31
 30c:	8a 83       	std	Y+2, r24	; 0x02
  switch (BusId) {
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	91 05       	cpc	r25, r1
 318:	79 f1       	breq	.+94     	; 0x378 <Rcc_Enable+0x88>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	91 05       	cpc	r25, r1
 31e:	1c f4       	brge	.+6      	; 0x326 <Rcc_Enable+0x36>
 320:	89 2b       	or	r24, r25
 322:	49 f0       	breq	.+18     	; 0x336 <Rcc_Enable+0x46>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
      break;
    default:
      break;
 324:	8c c0       	rjmp	.+280    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
}

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
  uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	91 05       	cpc	r25, r1
 32a:	09 f4       	brne	.+2      	; 0x32e <Rcc_Enable+0x3e>
 32c:	46 c0       	rjmp	.+140    	; 0x3ba <Rcc_Enable+0xca>
 32e:	03 97       	sbiw	r24, 0x03	; 3
 330:	09 f4       	brne	.+2      	; 0x334 <Rcc_Enable+0x44>
 332:	64 c0       	rjmp	.+200    	; 0x3fc <Rcc_Enable+0x10c>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
      break;
    default:
      break;
 334:	84 c0       	rjmp	.+264    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
  uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
    case RCC_AHB1:
      SET_BIT(RCC_AHB1ENR, PeripheralBitPosition);
 336:	80 e3       	ldi	r24, 0x30	; 48
 338:	98 e3       	ldi	r25, 0x38	; 56
 33a:	fc 01       	movw	r30, r24
 33c:	20 81       	ld	r18, Z
 33e:	31 81       	ldd	r19, Z+1	; 0x01
 340:	42 81       	ldd	r20, Z+2	; 0x02
 342:	53 81       	ldd	r21, Z+3	; 0x03
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	68 2f       	mov	r22, r24
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <Rcc_Enable+0x64>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <Rcc_Enable+0x60>
 358:	09 2e       	mov	r0, r25
 35a:	00 0c       	add	r0, r0
 35c:	aa 0b       	sbc	r26, r26
 35e:	bb 0b       	sbc	r27, r27
 360:	60 e3       	ldi	r22, 0x30	; 48
 362:	78 e3       	ldi	r23, 0x38	; 56
 364:	82 2b       	or	r24, r18
 366:	93 2b       	or	r25, r19
 368:	a4 2b       	or	r26, r20
 36a:	b5 2b       	or	r27, r21
 36c:	fb 01       	movw	r30, r22
 36e:	80 83       	st	Z, r24
 370:	91 83       	std	Z+1, r25	; 0x01
 372:	a2 83       	std	Z+2, r26	; 0x02
 374:	b3 83       	std	Z+3, r27	; 0x03
      break;
 376:	63 c0       	rjmp	.+198    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2ENR, PeripheralBitPosition);
 378:	84 e3       	ldi	r24, 0x34	; 52
 37a:	98 e3       	ldi	r25, 0x38	; 56
 37c:	fc 01       	movw	r30, r24
 37e:	20 81       	ld	r18, Z
 380:	31 81       	ldd	r19, Z+1	; 0x01
 382:	42 81       	ldd	r20, Z+2	; 0x02
 384:	53 81       	ldd	r21, Z+3	; 0x03
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	68 2f       	mov	r22, r24
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <Rcc_Enable+0xa6>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <Rcc_Enable+0xa2>
 39a:	09 2e       	mov	r0, r25
 39c:	00 0c       	add	r0, r0
 39e:	aa 0b       	sbc	r26, r26
 3a0:	bb 0b       	sbc	r27, r27
 3a2:	64 e3       	ldi	r22, 0x34	; 52
 3a4:	78 e3       	ldi	r23, 0x38	; 56
 3a6:	82 2b       	or	r24, r18
 3a8:	93 2b       	or	r25, r19
 3aa:	a4 2b       	or	r26, r20
 3ac:	b5 2b       	or	r27, r21
 3ae:	fb 01       	movw	r30, r22
 3b0:	80 83       	st	Z, r24
 3b2:	91 83       	std	Z+1, r25	; 0x01
 3b4:	a2 83       	std	Z+2, r26	; 0x02
 3b6:	b3 83       	std	Z+3, r27	; 0x03
      break;
 3b8:	42 c0       	rjmp	.+132    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
    case RCC_APB1:
      SET_BIT(RCC_APB1ENR, PeripheralBitPosition);
 3ba:	80 e4       	ldi	r24, 0x40	; 64
 3bc:	98 e3       	ldi	r25, 0x38	; 56
 3be:	fc 01       	movw	r30, r24
 3c0:	20 81       	ld	r18, Z
 3c2:	31 81       	ldd	r19, Z+1	; 0x01
 3c4:	42 81       	ldd	r20, Z+2	; 0x02
 3c6:	53 81       	ldd	r21, Z+3	; 0x03
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	68 2f       	mov	r22, r24
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <Rcc_Enable+0xe8>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <Rcc_Enable+0xe4>
 3dc:	09 2e       	mov	r0, r25
 3de:	00 0c       	add	r0, r0
 3e0:	aa 0b       	sbc	r26, r26
 3e2:	bb 0b       	sbc	r27, r27
 3e4:	60 e4       	ldi	r22, 0x40	; 64
 3e6:	78 e3       	ldi	r23, 0x38	; 56
 3e8:	82 2b       	or	r24, r18
 3ea:	93 2b       	or	r25, r19
 3ec:	a4 2b       	or	r26, r20
 3ee:	b5 2b       	or	r27, r21
 3f0:	fb 01       	movw	r30, r22
 3f2:	80 83       	st	Z, r24
 3f4:	91 83       	std	Z+1, r25	; 0x01
 3f6:	a2 83       	std	Z+2, r26	; 0x02
 3f8:	b3 83       	std	Z+3, r27	; 0x03
      break;
 3fa:	21 c0       	rjmp	.+66     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
 3fc:	84 e4       	ldi	r24, 0x44	; 68
 3fe:	98 e3       	ldi	r25, 0x38	; 56
 400:	fc 01       	movw	r30, r24
 402:	20 81       	ld	r18, Z
 404:	31 81       	ldd	r19, Z+1	; 0x01
 406:	42 81       	ldd	r20, Z+2	; 0x02
 408:	53 81       	ldd	r21, Z+3	; 0x03
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	68 2f       	mov	r22, r24
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	09 2e       	mov	r0, r25
 420:	00 0c       	add	r0, r0
 422:	aa 0b       	sbc	r26, r26
 424:	bb 0b       	sbc	r27, r27
 426:	64 e4       	ldi	r22, 0x44	; 68
 428:	78 e3       	ldi	r23, 0x38	; 56
 42a:	82 2b       	or	r24, r18
 42c:	93 2b       	or	r25, r19
 42e:	a4 2b       	or	r26, r20
 430:	b5 2b       	or	r27, r21
 432:	fb 01       	movw	r30, r22
 434:	80 83       	st	Z, r24
 436:	91 83       	std	Z+1, r25	; 0x01
 438:	a2 83       	std	Z+2, r26	; 0x02
 43a:	b3 83       	std	Z+3, r27	; 0x03
      break;
 43c:	00 00       	nop
    default:
      break;
  }
}
 43e:	00 00       	nop
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <Rcc_Disable>:

void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	00 d0       	rcall	.+0      	; 0x452 <Rcc_Disable+0x6>
 452:	1f 92       	push	r1
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	8b 83       	std	Y+3, r24	; 0x03
     uint8 BusId = PeripheralId / 32;
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	82 95       	swap	r24
 45e:	86 95       	lsr	r24
 460:	87 70       	andi	r24, 0x07	; 7
 462:	89 83       	std	Y+1, r24	; 0x01
  uint8 PeripheralBitPosition = PeripheralId % 32;
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	8f 71       	andi	r24, 0x1F	; 31
 468:	8a 83       	std	Y+2, r24	; 0x02
  switch (BusId) {
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	88 2f       	mov	r24, r24
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	91 05       	cpc	r25, r1
 474:	79 f1       	breq	.+94     	; 0x4d4 <Rcc_Disable+0x88>
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	91 05       	cpc	r25, r1
 47a:	1c f4       	brge	.+6      	; 0x482 <Rcc_Disable+0x36>
 47c:	89 2b       	or	r24, r25
 47e:	49 f0       	breq	.+18     	; 0x492 <Rcc_Disable+0x46>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
      break;
    default:
      break;
 480:	8c c0       	rjmp	.+280    	; 0x59a <Rcc_Disable+0x14e>
}

void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
     uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	91 05       	cpc	r25, r1
 486:	09 f4       	brne	.+2      	; 0x48a <Rcc_Disable+0x3e>
 488:	46 c0       	rjmp	.+140    	; 0x516 <Rcc_Disable+0xca>
 48a:	03 97       	sbiw	r24, 0x03	; 3
 48c:	09 f4       	brne	.+2      	; 0x490 <Rcc_Disable+0x44>
 48e:	64 c0       	rjmp	.+200    	; 0x558 <Rcc_Disable+0x10c>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
      break;
    default:
      break;
 490:	84 c0       	rjmp	.+264    	; 0x59a <Rcc_Disable+0x14e>
void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
     uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
    case RCC_AHB1:
      SET_BIT(RCC_AHB1RSTR, PeripheralBitPosition);
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	98 e3       	ldi	r25, 0x38	; 56
 496:	fc 01       	movw	r30, r24
 498:	20 81       	ld	r18, Z
 49a:	31 81       	ldd	r19, Z+1	; 0x01
 49c:	42 81       	ldd	r20, Z+2	; 0x02
 49e:	53 81       	ldd	r21, Z+3	; 0x03
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	68 2f       	mov	r22, r24
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <Rcc_Disable+0x64>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <Rcc_Disable+0x60>
 4b4:	09 2e       	mov	r0, r25
 4b6:	00 0c       	add	r0, r0
 4b8:	aa 0b       	sbc	r26, r26
 4ba:	bb 0b       	sbc	r27, r27
 4bc:	60 e1       	ldi	r22, 0x10	; 16
 4be:	78 e3       	ldi	r23, 0x38	; 56
 4c0:	82 2b       	or	r24, r18
 4c2:	93 2b       	or	r25, r19
 4c4:	a4 2b       	or	r26, r20
 4c6:	b5 2b       	or	r27, r21
 4c8:	fb 01       	movw	r30, r22
 4ca:	80 83       	st	Z, r24
 4cc:	91 83       	std	Z+1, r25	; 0x01
 4ce:	a2 83       	std	Z+2, r26	; 0x02
 4d0:	b3 83       	std	Z+3, r27	; 0x03
      break;
 4d2:	63 c0       	rjmp	.+198    	; 0x59a <Rcc_Disable+0x14e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2RSTR, PeripheralBitPosition);
 4d4:	84 e1       	ldi	r24, 0x14	; 20
 4d6:	98 e3       	ldi	r25, 0x38	; 56
 4d8:	fc 01       	movw	r30, r24
 4da:	20 81       	ld	r18, Z
 4dc:	31 81       	ldd	r19, Z+1	; 0x01
 4de:	42 81       	ldd	r20, Z+2	; 0x02
 4e0:	53 81       	ldd	r21, Z+3	; 0x03
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	68 2f       	mov	r22, r24
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <Rcc_Disable+0xa6>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <Rcc_Disable+0xa2>
 4f6:	09 2e       	mov	r0, r25
 4f8:	00 0c       	add	r0, r0
 4fa:	aa 0b       	sbc	r26, r26
 4fc:	bb 0b       	sbc	r27, r27
 4fe:	64 e1       	ldi	r22, 0x14	; 20
 500:	78 e3       	ldi	r23, 0x38	; 56
 502:	82 2b       	or	r24, r18
 504:	93 2b       	or	r25, r19
 506:	a4 2b       	or	r26, r20
 508:	b5 2b       	or	r27, r21
 50a:	fb 01       	movw	r30, r22
 50c:	80 83       	st	Z, r24
 50e:	91 83       	std	Z+1, r25	; 0x01
 510:	a2 83       	std	Z+2, r26	; 0x02
 512:	b3 83       	std	Z+3, r27	; 0x03
      break;
 514:	42 c0       	rjmp	.+132    	; 0x59a <Rcc_Disable+0x14e>
    case RCC_APB1:
      SET_BIT(RCC_APB1RSTR, PeripheralBitPosition);
 516:	80 e2       	ldi	r24, 0x20	; 32
 518:	98 e3       	ldi	r25, 0x38	; 56
 51a:	fc 01       	movw	r30, r24
 51c:	20 81       	ld	r18, Z
 51e:	31 81       	ldd	r19, Z+1	; 0x01
 520:	42 81       	ldd	r20, Z+2	; 0x02
 522:	53 81       	ldd	r21, Z+3	; 0x03
 524:	8a 81       	ldd	r24, Y+2	; 0x02
 526:	68 2f       	mov	r22, r24
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <Rcc_Disable+0xe8>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <Rcc_Disable+0xe4>
 538:	09 2e       	mov	r0, r25
 53a:	00 0c       	add	r0, r0
 53c:	aa 0b       	sbc	r26, r26
 53e:	bb 0b       	sbc	r27, r27
 540:	60 e2       	ldi	r22, 0x20	; 32
 542:	78 e3       	ldi	r23, 0x38	; 56
 544:	82 2b       	or	r24, r18
 546:	93 2b       	or	r25, r19
 548:	a4 2b       	or	r26, r20
 54a:	b5 2b       	or	r27, r21
 54c:	fb 01       	movw	r30, r22
 54e:	80 83       	st	Z, r24
 550:	91 83       	std	Z+1, r25	; 0x01
 552:	a2 83       	std	Z+2, r26	; 0x02
 554:	b3 83       	std	Z+3, r27	; 0x03
      break;
 556:	21 c0       	rjmp	.+66     	; 0x59a <Rcc_Disable+0x14e>
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
 558:	84 e2       	ldi	r24, 0x24	; 36
 55a:	98 e3       	ldi	r25, 0x38	; 56
 55c:	fc 01       	movw	r30, r24
 55e:	20 81       	ld	r18, Z
 560:	31 81       	ldd	r19, Z+1	; 0x01
 562:	42 81       	ldd	r20, Z+2	; 0x02
 564:	53 81       	ldd	r21, Z+3	; 0x03
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	68 2f       	mov	r22, r24
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <Rcc_Disable+0x12a>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <Rcc_Disable+0x126>
 57a:	09 2e       	mov	r0, r25
 57c:	00 0c       	add	r0, r0
 57e:	aa 0b       	sbc	r26, r26
 580:	bb 0b       	sbc	r27, r27
 582:	64 e2       	ldi	r22, 0x24	; 36
 584:	78 e3       	ldi	r23, 0x38	; 56
 586:	82 2b       	or	r24, r18
 588:	93 2b       	or	r25, r19
 58a:	a4 2b       	or	r26, r20
 58c:	b5 2b       	or	r27, r21
 58e:	fb 01       	movw	r30, r22
 590:	80 83       	st	Z, r24
 592:	91 83       	std	Z+1, r25	; 0x01
 594:	a2 83       	std	Z+2, r26	; 0x02
 596:	b3 83       	std	Z+3, r27	; 0x03
      break;
 598:	00 00       	nop
    default:
      break;
  }
}
 59a:	00 00       	nop
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <Nvic_EnableInterrupt+0x6>
 5ae:	1f 92       	push	r1
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	80 36       	cpi	r24, 0x60	; 96
 5ba:	c0 f5       	brcc	.+112    	; 0x62c <Nvic_EnableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 5bc:	8b 81       	ldd	r24, Y+3	; 0x03
 5be:	82 95       	swap	r24
 5c0:	86 95       	lsr	r24
 5c2:	87 70       	andi	r24, 0x07	; 7
 5c4:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	8f 71       	andi	r24, 0x1F	; 31
 5ca:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	88 2f       	mov	r24, r24
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	80 50       	subi	r24, 0x00	; 0
 5d8:	9f 4f       	sbci	r25, 0xFF	; 255
 5da:	fc 01       	movw	r30, r24
 5dc:	80 81       	ld	r24, Z
 5de:	91 81       	ldd	r25, Z+1	; 0x01
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 81       	ld	r18, Z
 5e4:	31 81       	ldd	r19, Z+1	; 0x01
 5e6:	42 81       	ldd	r20, Z+2	; 0x02
 5e8:	53 81       	ldd	r21, Z+3	; 0x03
 5ea:	8a 81       	ldd	r24, Y+2	; 0x02
 5ec:	68 2f       	mov	r22, r24
 5ee:	70 e0       	ldi	r23, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <Nvic_EnableInterrupt+0x52>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <Nvic_EnableInterrupt+0x4e>
 5fe:	09 2e       	mov	r0, r25
 600:	00 0c       	add	r0, r0
 602:	aa 0b       	sbc	r26, r26
 604:	bb 0b       	sbc	r27, r27
 606:	69 81       	ldd	r22, Y+1	; 0x01
 608:	66 2f       	mov	r22, r22
 60a:	70 e0       	ldi	r23, 0x00	; 0
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	60 50       	subi	r22, 0x00	; 0
 612:	7f 4f       	sbci	r23, 0xFF	; 255
 614:	fb 01       	movw	r30, r22
 616:	60 81       	ld	r22, Z
 618:	71 81       	ldd	r23, Z+1	; 0x01
 61a:	82 2b       	or	r24, r18
 61c:	93 2b       	or	r25, r19
 61e:	a4 2b       	or	r26, r20
 620:	b5 2b       	or	r27, r21
 622:	fb 01       	movw	r30, r22
 624:	80 83       	st	Z, r24
 626:	91 83       	std	Z+1, r25	; 0x01
 628:	a2 83       	std	Z+2, r26	; 0x02
 62a:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 62c:	00 00       	nop
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	00 d0       	rcall	.+0      	; 0x640 <Nvic_DisableInterrupt+0x6>
 640:	1f 92       	push	r1
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	80 36       	cpi	r24, 0x60	; 96
 64c:	c0 f5       	brcc	.+112    	; 0x6be <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 64e:	8b 81       	ldd	r24, Y+3	; 0x03
 650:	82 95       	swap	r24
 652:	86 95       	lsr	r24
 654:	87 70       	andi	r24, 0x07	; 7
 656:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	8f 71       	andi	r24, 0x1F	; 31
 65c:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 65e:	89 81       	ldd	r24, Y+1	; 0x01
 660:	88 2f       	mov	r24, r24
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	8a 5f       	subi	r24, 0xFA	; 250
 66a:	9e 4f       	sbci	r25, 0xFE	; 254
 66c:	fc 01       	movw	r30, r24
 66e:	80 81       	ld	r24, Z
 670:	91 81       	ldd	r25, Z+1	; 0x01
 672:	fc 01       	movw	r30, r24
 674:	20 81       	ld	r18, Z
 676:	31 81       	ldd	r19, Z+1	; 0x01
 678:	42 81       	ldd	r20, Z+2	; 0x02
 67a:	53 81       	ldd	r21, Z+3	; 0x03
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	68 2f       	mov	r22, r24
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <Nvic_DisableInterrupt+0x52>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <Nvic_DisableInterrupt+0x4e>
 690:	09 2e       	mov	r0, r25
 692:	00 0c       	add	r0, r0
 694:	aa 0b       	sbc	r26, r26
 696:	bb 0b       	sbc	r27, r27
 698:	69 81       	ldd	r22, Y+1	; 0x01
 69a:	66 2f       	mov	r22, r22
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	6a 5f       	subi	r22, 0xFA	; 250
 6a4:	7e 4f       	sbci	r23, 0xFE	; 254
 6a6:	fb 01       	movw	r30, r22
 6a8:	60 81       	ld	r22, Z
 6aa:	71 81       	ldd	r23, Z+1	; 0x01
 6ac:	82 2b       	or	r24, r18
 6ae:	93 2b       	or	r25, r19
 6b0:	a4 2b       	or	r26, r20
 6b2:	b5 2b       	or	r27, r21
 6b4:	fb 01       	movw	r30, r22
 6b6:	80 83       	st	Z, r24
 6b8:	91 83       	std	Z+1, r25	; 0x01
 6ba:	a2 83       	std	Z+2, r26	; 0x02
 6bc:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 6be:	00 00       	nop
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <delay>:
#include "WDGM.h"
#include "WDGDrv.h"

static uint8 led_state;

static void delay(uint32 time){
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	28 97       	sbiw	r28, 0x08	; 8
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	de bf       	out	0x3e, r29	; 62
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	cd bf       	out	0x3d, r28	; 61
 6e0:	6d 83       	std	Y+5, r22	; 0x05
 6e2:	7e 83       	std	Y+6, r23	; 0x06
 6e4:	8f 83       	std	Y+7, r24	; 0x07
 6e6:	98 87       	std	Y+8, r25	; 0x08
    volatile uint32 i;
    time *= 1000;
 6e8:	2d 81       	ldd	r18, Y+5	; 0x05
 6ea:	3e 81       	ldd	r19, Y+6	; 0x06
 6ec:	4f 81       	ldd	r20, Y+7	; 0x07
 6ee:	58 85       	ldd	r21, Y+8	; 0x08
 6f0:	88 ee       	ldi	r24, 0xE8	; 232
 6f2:	93 e0       	ldi	r25, 0x03	; 3
 6f4:	dc 01       	movw	r26, r24
 6f6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__muluhisi3>
 6fa:	dc 01       	movw	r26, r24
 6fc:	cb 01       	movw	r24, r22
 6fe:	8d 83       	std	Y+5, r24	; 0x05
 700:	9e 83       	std	Y+6, r25	; 0x06
 702:	af 83       	std	Y+7, r26	; 0x07
 704:	b8 87       	std	Y+8, r27	; 0x08
    //  watchdog_refresh();
    for ( i = 0 ; i<time;i++){
 706:	19 82       	std	Y+1, r1	; 0x01
 708:	1a 82       	std	Y+2, r1	; 0x02
 70a:	1b 82       	std	Y+3, r1	; 0x03
 70c:	1c 82       	std	Y+4, r1	; 0x04
 70e:	0b c0       	rjmp	.+22     	; 0x726 <delay+0x5a>
 710:	89 81       	ldd	r24, Y+1	; 0x01
 712:	9a 81       	ldd	r25, Y+2	; 0x02
 714:	ab 81       	ldd	r26, Y+3	; 0x03
 716:	bc 81       	ldd	r27, Y+4	; 0x04
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	a1 1d       	adc	r26, r1
 71c:	b1 1d       	adc	r27, r1
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	9a 83       	std	Y+2, r25	; 0x02
 722:	ab 83       	std	Y+3, r26	; 0x03
 724:	bc 83       	std	Y+4, r27	; 0x04
 726:	89 81       	ldd	r24, Y+1	; 0x01
 728:	9a 81       	ldd	r25, Y+2	; 0x02
 72a:	ab 81       	ldd	r26, Y+3	; 0x03
 72c:	bc 81       	ldd	r27, Y+4	; 0x04
 72e:	2d 81       	ldd	r18, Y+5	; 0x05
 730:	3e 81       	ldd	r19, Y+6	; 0x06
 732:	4f 81       	ldd	r20, Y+7	; 0x07
 734:	58 85       	ldd	r21, Y+8	; 0x08
 736:	82 17       	cp	r24, r18
 738:	93 07       	cpc	r25, r19
 73a:	a4 07       	cpc	r26, r20
 73c:	b5 07       	cpc	r27, r21
 73e:	40 f3       	brcs	.-48     	; 0x710 <delay+0x44>
    // WDG->CR |= 0xFF; //0111 1111
    //  watchdog_refresh();
    }
}
 740:	00 00       	nop
 742:	28 96       	adiw	r28, 0x08	; 8
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	f8 94       	cli
 748:	de bf       	out	0x3e, r29	; 62
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	cd bf       	out	0x3d, r28	; 61
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	08 95       	ret

00000754 <LEDM_Init>:


void LEDM_Init(void)
{
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	cd b7       	in	r28, 0x3d	; 61
 75a:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 75c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <GPIO_Init>
    led_state = 0;
 760:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <led_state>
}
 764:	00 00       	nop
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

0000076c <LEDM_Manage>:

void LEDM_Manage(void)
{
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62

    // HAL_Delay(500);
	delay(500);
 774:	64 ef       	ldi	r22, 0xF4	; 244
 776:	71 e0       	ldi	r23, 0x01	; 1
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 66 03 	call	0x6cc	; 0x6cc <delay>
    led_state = ~led_state;
 780:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_state>
 784:	80 95       	com	r24
 786:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <led_state>
    GPIO_Write(LED_PIN_ID, led_state);
 78a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_state>
 78e:	68 2f       	mov	r22, r24
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	0e 94 21 04 	call	0x842	; 0x842 <GPIO_Write>
    WDGM_AlivenessIndication(); // to count the number of function calls
 796:	0e 94 46 01 	call	0x28c	; 0x28c <WDGM_AlivenessIndication>
}
 79a:	00 00       	nop
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <GPIO_Init>:
#include "Rcc.h"

uint32 GPIO_Addresses[2] = { 0x40020000, 0x40020400}; // for port A and B only

void GPIO_Init(void)
{
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	00 d0       	rcall	.+0      	; 0x7a8 <GPIO_Init+0x6>
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
    GpioType * gpioReg =  GPIO_Addresses[LED_PORT_ID];
 7ac:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <GPIO_Addresses+0x4>
 7b0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <GPIO_Addresses+0x5>
 7b4:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <GPIO_Addresses+0x6>
 7b8:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <GPIO_Addresses+0x7>
 7bc:	9a 83       	std	Y+2, r25	; 0x02
 7be:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->GPIO_MODER &= ~(0x3 << (2 * LED_PIN_ID));
 7c0:	89 81       	ldd	r24, Y+1	; 0x01
 7c2:	9a 81       	ldd	r25, Y+2	; 0x02
 7c4:	fc 01       	movw	r30, r24
 7c6:	80 81       	ld	r24, Z
 7c8:	91 81       	ldd	r25, Z+1	; 0x01
 7ca:	a2 81       	ldd	r26, Z+2	; 0x02
 7cc:	b3 81       	ldd	r27, Z+3	; 0x03
 7ce:	8f 73       	andi	r24, 0x3F	; 63
 7d0:	29 81       	ldd	r18, Y+1	; 0x01
 7d2:	3a 81       	ldd	r19, Y+2	; 0x02
 7d4:	f9 01       	movw	r30, r18
 7d6:	80 83       	st	Z, r24
 7d8:	91 83       	std	Z+1, r25	; 0x01
 7da:	a2 83       	std	Z+2, r26	; 0x02
 7dc:	b3 83       	std	Z+3, r27	; 0x03
	gpioReg->GPIO_MODER |= (0x01 << (2 * LED_PIN_ID));
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	9a 81       	ldd	r25, Y+2	; 0x02
 7e2:	fc 01       	movw	r30, r24
 7e4:	80 81       	ld	r24, Z
 7e6:	91 81       	ldd	r25, Z+1	; 0x01
 7e8:	a2 81       	ldd	r26, Z+2	; 0x02
 7ea:	b3 81       	ldd	r27, Z+3	; 0x03
 7ec:	80 64       	ori	r24, 0x40	; 64
 7ee:	29 81       	ldd	r18, Y+1	; 0x01
 7f0:	3a 81       	ldd	r19, Y+2	; 0x02
 7f2:	f9 01       	movw	r30, r18
 7f4:	80 83       	st	Z, r24
 7f6:	91 83       	std	Z+1, r25	; 0x01
 7f8:	a2 83       	std	Z+2, r26	; 0x02
 7fa:	b3 83       	std	Z+3, r27	; 0x03
	gpioReg->GPIO_OTYPER  &= ~(0x01 << LED_PIN_ID);
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
 7fe:	9a 81       	ldd	r25, Y+2	; 0x02
 800:	fc 01       	movw	r30, r24
 802:	84 81       	ldd	r24, Z+4	; 0x04
 804:	95 81       	ldd	r25, Z+5	; 0x05
 806:	a6 81       	ldd	r26, Z+6	; 0x06
 808:	b7 81       	ldd	r27, Z+7	; 0x07
 80a:	87 7f       	andi	r24, 0xF7	; 247
 80c:	29 81       	ldd	r18, Y+1	; 0x01
 80e:	3a 81       	ldd	r19, Y+2	; 0x02
 810:	f9 01       	movw	r30, r18
 812:	84 83       	std	Z+4, r24	; 0x04
 814:	95 83       	std	Z+5, r25	; 0x05
 816:	a6 83       	std	Z+6, r26	; 0x06
 818:	b7 83       	std	Z+7, r27	; 0x07
	gpioReg->GPIO_OTYPER |= (0x00 << LED_PIN_ID);
 81a:	89 81       	ldd	r24, Y+1	; 0x01
 81c:	9a 81       	ldd	r25, Y+2	; 0x02
 81e:	fc 01       	movw	r30, r24
 820:	84 81       	ldd	r24, Z+4	; 0x04
 822:	95 81       	ldd	r25, Z+5	; 0x05
 824:	a6 81       	ldd	r26, Z+6	; 0x06
 826:	b7 81       	ldd	r27, Z+7	; 0x07
 828:	29 81       	ldd	r18, Y+1	; 0x01
 82a:	3a 81       	ldd	r19, Y+2	; 0x02
 82c:	f9 01       	movw	r30, r18
 82e:	84 83       	std	Z+4, r24	; 0x04
 830:	95 83       	std	Z+5, r25	; 0x05
 832:	a6 83       	std	Z+6, r26	; 0x06
 834:	b7 83       	std	Z+7, r27	; 0x07
	// gpioReg->GPIO_PUPDR &= ~(0x3 << (2 * LED_PIN_ID));
}
 836:	00 00       	nop
 838:	0f 90       	pop	r0
 83a:	0f 90       	pop	r0
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	08 95       	ret

00000842 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	00 d0       	rcall	.+0      	; 0x848 <GPIO_Write+0x6>
 848:	00 d0       	rcall	.+0      	; 0x84a <GPIO_Write+0x8>
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
 84e:	8b 83       	std	Y+3, r24	; 0x03
 850:	6c 83       	std	Y+4, r22	; 0x04
	GpioType * gpioReg =  GPIO_Addresses[LED_PORT_ID];
 852:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <GPIO_Addresses+0x4>
 856:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <GPIO_Addresses+0x5>
 85a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <GPIO_Addresses+0x6>
 85e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <GPIO_Addresses+0x7>
 862:	9a 83       	std	Y+2, r25	; 0x02
 864:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->GPIO_ODR &= ~(0x01 << PinId);
 866:	89 81       	ldd	r24, Y+1	; 0x01
 868:	9a 81       	ldd	r25, Y+2	; 0x02
 86a:	fc 01       	movw	r30, r24
 86c:	24 89       	ldd	r18, Z+20	; 0x14
 86e:	35 89       	ldd	r19, Z+21	; 0x15
 870:	46 89       	ldd	r20, Z+22	; 0x16
 872:	57 89       	ldd	r21, Z+23	; 0x17
 874:	8b 81       	ldd	r24, Y+3	; 0x03
 876:	68 2f       	mov	r22, r24
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	02 c0       	rjmp	.+4      	; 0x884 <GPIO_Write+0x42>
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	6a 95       	dec	r22
 886:	e2 f7       	brpl	.-8      	; 0x880 <GPIO_Write+0x3e>
 888:	80 95       	com	r24
 88a:	90 95       	com	r25
 88c:	09 2e       	mov	r0, r25
 88e:	00 0c       	add	r0, r0
 890:	aa 0b       	sbc	r26, r26
 892:	bb 0b       	sbc	r27, r27
 894:	82 23       	and	r24, r18
 896:	93 23       	and	r25, r19
 898:	a4 23       	and	r26, r20
 89a:	b5 23       	and	r27, r21
 89c:	29 81       	ldd	r18, Y+1	; 0x01
 89e:	3a 81       	ldd	r19, Y+2	; 0x02
 8a0:	f9 01       	movw	r30, r18
 8a2:	84 8b       	std	Z+20, r24	; 0x14
 8a4:	95 8b       	std	Z+21, r25	; 0x15
 8a6:	a6 8b       	std	Z+22, r26	; 0x16
 8a8:	b7 8b       	std	Z+23, r27	; 0x17
	gpioReg->GPIO_ODR |= (PinData << PinId);
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	9a 81       	ldd	r25, Y+2	; 0x02
 8ae:	fc 01       	movw	r30, r24
 8b0:	24 89       	ldd	r18, Z+20	; 0x14
 8b2:	35 89       	ldd	r19, Z+21	; 0x15
 8b4:	46 89       	ldd	r20, Z+22	; 0x16
 8b6:	57 89       	ldd	r21, Z+23	; 0x17
 8b8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ba:	88 2f       	mov	r24, r24
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	6b 81       	ldd	r22, Y+3	; 0x03
 8c0:	66 2f       	mov	r22, r22
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <GPIO_Write+0x88>
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	6a 95       	dec	r22
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <GPIO_Write+0x84>
 8ce:	09 2e       	mov	r0, r25
 8d0:	00 0c       	add	r0, r0
 8d2:	aa 0b       	sbc	r26, r26
 8d4:	bb 0b       	sbc	r27, r27
 8d6:	82 2b       	or	r24, r18
 8d8:	93 2b       	or	r25, r19
 8da:	a4 2b       	or	r26, r20
 8dc:	b5 2b       	or	r27, r21
 8de:	29 81       	ldd	r18, Y+1	; 0x01
 8e0:	3a 81       	ldd	r19, Y+2	; 0x02
 8e2:	f9 01       	movw	r30, r18
 8e4:	84 8b       	std	Z+20, r24	; 0x14
 8e6:	95 8b       	std	Z+21, r25	; 0x15
 8e8:	a6 8b       	std	Z+22, r26	; 0x16
 8ea:	b7 8b       	std	Z+23, r27	; 0x17
}
 8ec:	00 00       	nop
 8ee:	0f 90       	pop	r0
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	0f 90       	pop	r0
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	08 95       	ret

000008fc <__muluhisi3>:
 8fc:	0e 94 89 04 	call	0x912	; 0x912 <__umulhisi3>
 900:	a5 9f       	mul	r26, r21
 902:	90 0d       	add	r25, r0
 904:	b4 9f       	mul	r27, r20
 906:	90 0d       	add	r25, r0
 908:	a4 9f       	mul	r26, r20
 90a:	80 0d       	add	r24, r0
 90c:	91 1d       	adc	r25, r1
 90e:	11 24       	eor	r1, r1
 910:	08 95       	ret

00000912 <__umulhisi3>:
 912:	a2 9f       	mul	r26, r18
 914:	b0 01       	movw	r22, r0
 916:	b3 9f       	mul	r27, r19
 918:	c0 01       	movw	r24, r0
 91a:	a3 9f       	mul	r26, r19
 91c:	70 0d       	add	r23, r0
 91e:	81 1d       	adc	r24, r1
 920:	11 24       	eor	r1, r1
 922:	91 1d       	adc	r25, r1
 924:	b2 9f       	mul	r27, r18
 926:	70 0d       	add	r23, r0
 928:	81 1d       	adc	r24, r1
 92a:	11 24       	eor	r1, r1
 92c:	91 1d       	adc	r25, r1
 92e:	08 95       	ret

00000930 <_exit>:
 930:	f8 94       	cli

00000932 <__stop_program>:
 932:	ff cf       	rjmp	.-2      	; 0x932 <__stop_program>
