
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000874  00000908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800112  00800112  0000091a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de0  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2d  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db7  00000000  00000000  00002299  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d38  00000000  00000000  000032a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d5  00000000  00000000  0000afe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000b3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e1b  00000000  00000000  0000b455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 38 04 	jmp	0x870	; 0x870 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <GPIO.h>
#include <LEDM.h>
#include <WDGM.h>


int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    // // Set PB0 as output for the LED
    // DDRB |= (1 << 0);
    // PORTB &= ~(1 << 0);  // Ensure the LED is initially off
    GPIO_Init();
  ba:	0e 94 c1 02 	call	0x582	; 0x582 <GPIO_Init>
    // WDGDrv_Init();
    LEDM_Init();
  be:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LEDM_Init>
    WDGM_Init();
  c2:	0e 94 57 01 	call	0x2ae	; 0x2ae <WDGM_Init>

    // Call WDGM_MainFunction for the first time
    WDGM_MainFunction();
  c6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <WDGM_MainFunction>
    static uint8 WDGCounter = 0;
    // Main loop
    while (1) {
        LEDM_Manage();
  ca:	0e 94 84 02 	call	0x508	; 0x508 <LEDM_Manage>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	a0 e2       	ldi	r26, 0x20	; 32
  d4:	b1 e4       	ldi	r27, 0x41	; 65
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	9a 83       	std	Y+2, r25	; 0x02
  da:	ab 83       	std	Y+3, r26	; 0x03
  dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	4a e7       	ldi	r20, 0x7A	; 122
  e4:	53 e4       	ldi	r21, 0x43	; 67
  e6:	69 81       	ldd	r22, Y+1	; 0x01
  e8:	7a 81       	ldd	r23, Y+2	; 0x02
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	9c 81       	ldd	r25, Y+4	; 0x04
  ee:	0e 94 a3 03 	call	0x746	; 0x746 <__mulsf3>
  f2:	dc 01       	movw	r26, r24
  f4:	cb 01       	movw	r24, r22
  f6:	8d 83       	std	Y+5, r24	; 0x05
  f8:	9e 83       	std	Y+6, r25	; 0x06
  fa:	af 83       	std	Y+7, r26	; 0x07
  fc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e8       	ldi	r20, 0x80	; 128
 104:	5f e3       	ldi	r21, 0x3F	; 63
 106:	6d 81       	ldd	r22, Y+5	; 0x05
 108:	7e 81       	ldd	r23, Y+6	; 0x06
 10a:	8f 81       	ldd	r24, Y+7	; 0x07
 10c:	98 85       	ldd	r25, Y+8	; 0x08
 10e:	0e 94 1d 03 	call	0x63a	; 0x63a <__cmpsf2>
 112:	88 23       	and	r24, r24
 114:	2c f4       	brge	.+10     	; 0x120 <main+0x7a>
		__ticks = 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	9a 87       	std	Y+10, r25	; 0x0a
 11c:	89 87       	std	Y+9, r24	; 0x09
 11e:	3f c0       	rjmp	.+126    	; 0x19e <main+0xf8>
	else if (__tmp > 65535)
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	3f ef       	ldi	r19, 0xFF	; 255
 124:	4f e7       	ldi	r20, 0x7F	; 127
 126:	57 e4       	ldi	r21, 0x47	; 71
 128:	6d 81       	ldd	r22, Y+5	; 0x05
 12a:	7e 81       	ldd	r23, Y+6	; 0x06
 12c:	8f 81       	ldd	r24, Y+7	; 0x07
 12e:	98 85       	ldd	r25, Y+8	; 0x08
 130:	0e 94 9e 03 	call	0x73c	; 0x73c <__gesf2>
 134:	18 16       	cp	r1, r24
 136:	4c f5       	brge	.+82     	; 0x18a <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	40 e2       	ldi	r20, 0x20	; 32
 13e:	51 e4       	ldi	r21, 0x41	; 65
 140:	69 81       	ldd	r22, Y+1	; 0x01
 142:	7a 81       	ldd	r23, Y+2	; 0x02
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	9c 81       	ldd	r25, Y+4	; 0x04
 148:	0e 94 a3 03 	call	0x746	; 0x746 <__mulsf3>
 14c:	dc 01       	movw	r26, r24
 14e:	cb 01       	movw	r24, r22
 150:	bc 01       	movw	r22, r24
 152:	cd 01       	movw	r24, r26
 154:	0e 94 22 03 	call	0x644	; 0x644 <__fixunssfsi>
 158:	dc 01       	movw	r26, r24
 15a:	cb 01       	movw	r24, r22
 15c:	9a 87       	std	Y+10, r25	; 0x0a
 15e:	89 87       	std	Y+9, r24	; 0x09
 160:	0f c0       	rjmp	.+30     	; 0x180 <main+0xda>
 162:	89 e1       	ldi	r24, 0x19	; 25
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	9c 87       	std	Y+12, r25	; 0x0c
 168:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16a:	8b 85       	ldd	r24, Y+11	; 0x0b
 16c:	9c 85       	ldd	r25, Y+12	; 0x0c
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0xc8>
 172:	9c 87       	std	Y+12, r25	; 0x0c
 174:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 176:	89 85       	ldd	r24, Y+9	; 0x09
 178:	9a 85       	ldd	r25, Y+10	; 0x0a
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	9a 87       	std	Y+10, r25	; 0x0a
 17e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 180:	89 85       	ldd	r24, Y+9	; 0x09
 182:	9a 85       	ldd	r25, Y+10	; 0x0a
 184:	89 2b       	or	r24, r25
 186:	69 f7       	brne	.-38     	; 0x162 <main+0xbc>
 188:	14 c0       	rjmp	.+40     	; 0x1b2 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 18a:	6d 81       	ldd	r22, Y+5	; 0x05
 18c:	7e 81       	ldd	r23, Y+6	; 0x06
 18e:	8f 81       	ldd	r24, Y+7	; 0x07
 190:	98 85       	ldd	r25, Y+8	; 0x08
 192:	0e 94 22 03 	call	0x644	; 0x644 <__fixunssfsi>
 196:	dc 01       	movw	r26, r24
 198:	cb 01       	movw	r24, r22
 19a:	9a 87       	std	Y+10, r25	; 0x0a
 19c:	89 87       	std	Y+9, r24	; 0x09
 19e:	89 85       	ldd	r24, Y+9	; 0x09
 1a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a2:	9e 87       	std	Y+14, r25	; 0x0e
 1a4:	8d 87       	std	Y+13, r24	; 0x0d
 1a6:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a8:	9e 85       	ldd	r25, Y+14	; 0x0e
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x104>
 1ae:	9e 87       	std	Y+14, r25	; 0x0e
 1b0:	8d 87       	std	Y+13, r24	; 0x0d
        _delay_ms(10); // wait for 10ms to call LEDM_Manage again 

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        WDGCounter += 10; // Increment by the delay amount (10ms)
 1b2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1b6:	86 5f       	subi	r24, 0xF6	; 246
 1b8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
 1bc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1c0:	84 31       	cpi	r24, 0x14	; 20
 1c2:	08 f4       	brcc	.+2      	; 0x1c6 <main+0x120>
 1c4:	82 cf       	rjmp	.-252    	; 0xca <main+0x24>
            WDGM_MainFunction();  // Call watchdog management every 20ms
 1c6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <WDGM_MainFunction>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 1ca:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
    // Call WDGM_MainFunction for the first time
    WDGM_MainFunction();
    static uint8 WDGCounter = 0;
    // Main loop
    while (1) {
        LEDM_Manage();
 1ce:	7d cf       	rjmp	.-262    	; 0xca <main+0x24>

000001d0 <__vector_6>:


int x = 0;


ISR(WDT_vect) {
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
    x = 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <x+0x1>
 1f4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <x>
    PORTB |= (1 << 0); // Set PB0 high
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 81       	ld	r18, Z
 200:	85 e2       	ldi	r24, 0x25	; 37
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	21 60       	ori	r18, 0x01	; 1
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
    // for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
    // _delay_ms(1000); 
    // WDTCSR = (1 << WDIE);
}
 20a:	00 00       	nop
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <WDGDrv_Init>:

void WDGDrv_Init(void) {
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << 0);
 22c:	84 e2       	ldi	r24, 0x24	; 36
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	20 81       	ld	r18, Z
 234:	84 e2       	ldi	r24, 0x24	; 36
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	21 60       	ori	r18, 0x01	; 1
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);
 23e:	85 e2       	ldi	r24, 0x25	; 37
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	20 81       	ld	r18, Z
 246:	85 e2       	ldi	r24, 0x25	; 37
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2e 7f       	andi	r18, 0xFE	; 254
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
    // Disable global interrupts
    cli();
 250:	f8 94       	cli
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	88 70       	andi	r24, 0x08	; 8
 258:	99 27       	eor	r25, r25
 25a:	89 2b       	or	r24, r25
 25c:	11 f0       	breq	.+4      	; 0x262 <WDGDrv_Init+0x3e>
 25e:	88 e2       	ldi	r24, 0x28	; 40
 260:	01 c0       	rjmp	.+2      	; 0x264 <WDGDrv_Init+0x40>
 262:	88 e0       	ldi	r24, 0x08	; 8
						_BV(WDE) | (value & 0x07)) )
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	97 70       	andi	r25, 0x07	; 7
 268:	89 2b       	or	r24, r25
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 26a:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 26c:	88 e1       	ldi	r24, 0x18	; 24
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	a8 95       	wdr
 274:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 278:	0f be       	out	0x3f, r0	; 63
 27a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    // SREG &= ~(1 << I);
    //Interrupt and System Reset Mode
    wdt_enable(2);
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 27e:	80 e6       	ldi	r24, 0x60	; 96
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	28 e1       	ldi	r18, 0x18	; 24
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
    WDTCSR =  (1 << WDE)|(1 << WDIE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	2a e4       	ldi	r18, 0x4A	; 74
 28e:	fc 01       	movw	r30, r24
 290:	20 83       	st	Z, r18
    sei(); // Enable global interrupts
 292:	78 94       	sei
    // SREG |= (1 << I);
// 
}
 294:	00 00       	nop
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
    // uint32 current_time = HAL_GetTick();

    if(WDGM_PovideSuppervisionStatus()==OK  /*&& the WDGM_MainFunction_is_not_STUCK*/){
 2a4:	0e 94 ba 01 	call	0x374	; 0x374 <WDGM_PovideSuppervisionStatus>
       //refresh 
    }else{
        return;
    }
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <WDGM_Init>:
static uint32 led_no_calls;
static uint8 call_count;
static uint32 stuck;

void WDGM_Init(void)
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
    led_no_calls = 0;
 2bc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls>
 2c0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x1>
 2c4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x2>
 2c8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x3>
    call_count = 0;
 2cc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <call_count>
    stuck = 0;
 2d0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <stuck>
 2d4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stuck+0x1>
 2d8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <stuck+0x2>
 2dc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stuck+0x3>
}
 2e0:	00 00       	nop
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
    call_count ++;
 2f0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <call_count>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <call_count>
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call time = 0ms 
    if (call_count <= 6) {
 2fa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <call_count>
 2fe:	87 30       	cpi	r24, 0x07	; 7
 300:	48 f5       	brcc	.+82     	; 0x354 <WDGM_MainFunction+0x6c>
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 302:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <led_no_calls>
 306:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <led_no_calls+0x1>
 30a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <led_no_calls+0x2>
 30e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <led_no_calls+0x3>
 312:	08 97       	sbiw	r24, 0x08	; 8
 314:	a1 05       	cpc	r26, r1
 316:	b1 05       	cpc	r27, r1
 318:	78 f0       	brcs	.+30     	; 0x338 <WDGM_MainFunction+0x50>
 31a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <led_no_calls>
 31e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <led_no_calls+0x1>
 322:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <led_no_calls+0x2>
 326:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <led_no_calls+0x3>
 32a:	0d 97       	sbiw	r24, 0x0d	; 13
 32c:	a1 05       	cpc	r26, r1
 32e:	b1 05       	cpc	r27, r1
 330:	18 f4       	brcc	.+6      	; 0x338 <WDGM_MainFunction+0x50>
        { 
            status = OK;
 332:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <status>
 336:	03 c0       	rjmp	.+6      	; 0x33e <WDGM_MainFunction+0x56>
        } else {
            status = NOK;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 33e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls>
 342:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x1>
 346:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x2>
 34a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x3>
        call_count = 0; // Reset count for next period
 34e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <call_count>
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
    }
}
 352:	0c c0       	rjmp	.+24     	; 0x36c <WDGM_MainFunction+0x84>
        led_no_calls = 0; // Reset the call counter for the next 100ms period
        call_count = 0; // Reset count for next period
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	a0 e0       	ldi	r26, 0x00	; 0
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <stuck>
 360:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <stuck+0x1>
 364:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <stuck+0x2>
 368:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <stuck+0x3>
    }
}
 36c:	00 00       	nop
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 37c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <status>
}
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <WDGM_AlivenessIndication>:



void WDGM_AlivenessIndication(void)
{
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 38e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <led_no_calls>
 392:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <led_no_calls+0x1>
 396:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <led_no_calls+0x2>
 39a:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <led_no_calls+0x3>
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	a1 1d       	adc	r26, r1
 3a2:	b1 1d       	adc	r27, r1
 3a4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <led_no_calls>
 3a8:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <led_no_calls+0x1>
 3ac:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <led_no_calls+0x2>
 3b0:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <led_no_calls+0x3>
}
 3b4:	00 00       	nop
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	00 d0       	rcall	.+0      	; 0x3c2 <Nvic_EnableInterrupt+0x6>
 3c2:	1f 92       	push	r1
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	80 36       	cpi	r24, 0x60	; 96
 3ce:	c0 f5       	brcc	.+112    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	82 95       	swap	r24
 3d4:	86 95       	lsr	r24
 3d6:	87 70       	andi	r24, 0x07	; 7
 3d8:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	8f 71       	andi	r24, 0x1F	; 31
 3de:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	80 50       	subi	r24, 0x00	; 0
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	fc 01       	movw	r30, r24
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 81       	ld	r18, Z
 3f8:	31 81       	ldd	r19, Z+1	; 0x01
 3fa:	42 81       	ldd	r20, Z+2	; 0x02
 3fc:	53 81       	ldd	r21, Z+3	; 0x03
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	68 2f       	mov	r22, r24
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	09 2e       	mov	r0, r25
 414:	00 0c       	add	r0, r0
 416:	aa 0b       	sbc	r26, r26
 418:	bb 0b       	sbc	r27, r27
 41a:	69 81       	ldd	r22, Y+1	; 0x01
 41c:	66 2f       	mov	r22, r22
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	60 50       	subi	r22, 0x00	; 0
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	fb 01       	movw	r30, r22
 42a:	60 81       	ld	r22, Z
 42c:	71 81       	ldd	r23, Z+1	; 0x01
 42e:	82 2b       	or	r24, r18
 430:	93 2b       	or	r25, r19
 432:	a4 2b       	or	r26, r20
 434:	b5 2b       	or	r27, r21
 436:	fb 01       	movw	r30, r22
 438:	80 83       	st	Z, r24
 43a:	91 83       	std	Z+1, r25	; 0x01
 43c:	a2 83       	std	Z+2, r26	; 0x02
 43e:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 440:	00 00       	nop
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	00 d0       	rcall	.+0      	; 0x454 <Nvic_DisableInterrupt+0x6>
 454:	1f 92       	push	r1
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	80 36       	cpi	r24, 0x60	; 96
 460:	c0 f5       	brcc	.+112    	; 0x4d2 <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	82 95       	swap	r24
 466:	86 95       	lsr	r24
 468:	87 70       	andi	r24, 0x07	; 7
 46a:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	8f 71       	andi	r24, 0x1F	; 31
 470:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	88 2f       	mov	r24, r24
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	8a 5f       	subi	r24, 0xFA	; 250
 47e:	9e 4f       	sbci	r25, 0xFE	; 254
 480:	fc 01       	movw	r30, r24
 482:	80 81       	ld	r24, Z
 484:	91 81       	ldd	r25, Z+1	; 0x01
 486:	fc 01       	movw	r30, r24
 488:	20 81       	ld	r18, Z
 48a:	31 81       	ldd	r19, Z+1	; 0x01
 48c:	42 81       	ldd	r20, Z+2	; 0x02
 48e:	53 81       	ldd	r21, Z+3	; 0x03
 490:	8a 81       	ldd	r24, Y+2	; 0x02
 492:	68 2f       	mov	r22, r24
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <Nvic_DisableInterrupt+0x52>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <Nvic_DisableInterrupt+0x4e>
 4a4:	09 2e       	mov	r0, r25
 4a6:	00 0c       	add	r0, r0
 4a8:	aa 0b       	sbc	r26, r26
 4aa:	bb 0b       	sbc	r27, r27
 4ac:	69 81       	ldd	r22, Y+1	; 0x01
 4ae:	66 2f       	mov	r22, r22
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	6a 5f       	subi	r22, 0xFA	; 250
 4b8:	7e 4f       	sbci	r23, 0xFE	; 254
 4ba:	fb 01       	movw	r30, r22
 4bc:	60 81       	ld	r22, Z
 4be:	71 81       	ldd	r23, Z+1	; 0x01
 4c0:	82 2b       	or	r24, r18
 4c2:	93 2b       	or	r25, r19
 4c4:	a4 2b       	or	r26, r20
 4c6:	b5 2b       	or	r27, r21
 4c8:	fb 01       	movw	r30, r22
 4ca:	80 83       	st	Z, r24
 4cc:	91 83       	std	Z+1, r25	; 0x01
 4ce:	a2 83       	std	Z+2, r26	; 0x02
 4d0:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 4d2:	00 00       	nop
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <LEDM_Init>:

static uint8 led_state;


void LEDM_Init(void)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 4e8:	0e 94 c1 02 	call	0x582	; 0x582 <GPIO_Init>
    led_state = 0;
 4ec:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_state>
    time_counter = 0;
 4f0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter>
 4f4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x1>
 4f8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x2>
 4fc:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x3>
}
 500:	00 00       	nop
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <LEDM_Manage>:

void LEDM_Manage(void)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
	if (time_counter == 500)
 510:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_counter>
 514:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_counter+0x1>
 518:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <time_counter+0x2>
 51c:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <time_counter+0x3>
 520:	84 3f       	cpi	r24, 0xF4	; 244
 522:	91 40       	sbci	r25, 0x01	; 1
 524:	a1 05       	cpc	r26, r1
 526:	b1 05       	cpc	r27, r1
 528:	99 f4       	brne	.+38     	; 0x550 <LEDM_Manage+0x48>
    {
		led_state = ~led_state;
 52a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_state>
 52e:	80 95       	com	r24
 530:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 534:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_state>
 538:	68 2f       	mov	r22, r24
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <GPIO_Write>
		time_counter = 0;
 540:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter>
 544:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x1>
 548:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x2>
 54c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x3>
    }
	time_counter += 10;
 550:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_counter>
 554:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_counter+0x1>
 558:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <time_counter+0x2>
 55c:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <time_counter+0x3>
 560:	0a 96       	adiw	r24, 0x0a	; 10
 562:	a1 1d       	adc	r26, r1
 564:	b1 1d       	adc	r27, r1
 566:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <time_counter>
 56a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <time_counter+0x1>
 56e:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <time_counter+0x2>
 572:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 576:	0e 94 c3 01 	call	0x386	; 0x386 <WDGM_AlivenessIndication>
 57a:	00 00       	nop
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <GPIO_Init>:
#include "Gpio_Private.h"

GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	00 d0       	rcall	.+0      	; 0x588 <GPIO_Init+0x6>
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 58c:	83 e2       	ldi	r24, 0x23	; 35
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	9a 83       	std	Y+2, r25	; 0x02
 592:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->DDR |= (1 << LED_PIN_ID);
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	fc 01       	movw	r30, r24
 59a:	81 81       	ldd	r24, Z+1	; 0x01
 59c:	28 2f       	mov	r18, r24
 59e:	22 60       	ori	r18, 0x02	; 2
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	9a 81       	ldd	r25, Y+2	; 0x02
 5a4:	fc 01       	movw	r30, r24
 5a6:	21 83       	std	Z+1, r18	; 0x01

}
 5a8:	00 00       	nop
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <GPIO_Write+0x6>
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <GPIO_Write+0x8>
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	8b 83       	std	Y+3, r24	; 0x03
 5c2:	6c 83       	std	Y+4, r22	; 0x04
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 5c4:	83 e2       	ldi	r24, 0x23	; 35
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	9a 83       	std	Y+2, r25	; 0x02
 5ca:	89 83       	std	Y+1, r24	; 0x01
    if (PinData) {
 5cc:	8c 81       	ldd	r24, Y+4	; 0x04
 5ce:	88 23       	and	r24, r24
 5d0:	b1 f0       	breq	.+44     	; 0x5fe <GPIO_Write+0x4a>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	9a 81       	ldd	r25, Y+2	; 0x02
 5d6:	fc 01       	movw	r30, r24
 5d8:	82 81       	ldd	r24, Z+2	; 0x02
 5da:	48 2f       	mov	r20, r24
 5dc:	8b 81       	ldd	r24, Y+3	; 0x03
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <GPIO_Write+0x38>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	2a 95       	dec	r18
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <GPIO_Write+0x34>
 5f0:	84 2b       	or	r24, r20
 5f2:	28 2f       	mov	r18, r24
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	9a 81       	ldd	r25, Y+2	; 0x02
 5f8:	fc 01       	movw	r30, r24
 5fa:	22 83       	std	Z+2, r18	; 0x02
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
    }
}
 5fc:	16 c0       	rjmp	.+44     	; 0x62a <GPIO_Write+0x76>
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	9a 81       	ldd	r25, Y+2	; 0x02
 602:	fc 01       	movw	r30, r24
 604:	82 81       	ldd	r24, Z+2	; 0x02
 606:	48 2f       	mov	r20, r24
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <GPIO_Write+0x64>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	2a 95       	dec	r18
 61a:	e2 f7       	brpl	.-8      	; 0x614 <GPIO_Write+0x60>
 61c:	80 95       	com	r24
 61e:	84 23       	and	r24, r20
 620:	28 2f       	mov	r18, r24
 622:	89 81       	ldd	r24, Y+1	; 0x01
 624:	9a 81       	ldd	r25, Y+2	; 0x02
 626:	fc 01       	movw	r30, r24
 628:	22 83       	std	Z+2, r18	; 0x02
    }
}
 62a:	00 00       	nop
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	0f 90       	pop	r0
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <__cmpsf2>:
 63a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_cmp>
 63e:	08 f4       	brcc	.+2      	; 0x642 <__cmpsf2+0x8>
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	08 95       	ret

00000644 <__fixunssfsi>:
 644:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_splitA>
 648:	88 f0       	brcs	.+34     	; 0x66c <__fixunssfsi+0x28>
 64a:	9f 57       	subi	r25, 0x7F	; 127
 64c:	98 f0       	brcs	.+38     	; 0x674 <__fixunssfsi+0x30>
 64e:	b9 2f       	mov	r27, r25
 650:	99 27       	eor	r25, r25
 652:	b7 51       	subi	r27, 0x17	; 23
 654:	b0 f0       	brcs	.+44     	; 0x682 <__fixunssfsi+0x3e>
 656:	e1 f0       	breq	.+56     	; 0x690 <__fixunssfsi+0x4c>
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	1a f0       	brmi	.+6      	; 0x668 <__fixunssfsi+0x24>
 662:	ba 95       	dec	r27
 664:	c9 f7       	brne	.-14     	; 0x658 <__fixunssfsi+0x14>
 666:	14 c0       	rjmp	.+40     	; 0x690 <__fixunssfsi+0x4c>
 668:	b1 30       	cpi	r27, 0x01	; 1
 66a:	91 f0       	breq	.+36     	; 0x690 <__fixunssfsi+0x4c>
 66c:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_zero>
 670:	b1 e0       	ldi	r27, 0x01	; 1
 672:	08 95       	ret
 674:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_zero>
 678:	67 2f       	mov	r22, r23
 67a:	78 2f       	mov	r23, r24
 67c:	88 27       	eor	r24, r24
 67e:	b8 5f       	subi	r27, 0xF8	; 248
 680:	39 f0       	breq	.+14     	; 0x690 <__fixunssfsi+0x4c>
 682:	b9 3f       	cpi	r27, 0xF9	; 249
 684:	cc f3       	brlt	.-14     	; 0x678 <__fixunssfsi+0x34>
 686:	86 95       	lsr	r24
 688:	77 95       	ror	r23
 68a:	67 95       	ror	r22
 68c:	b3 95       	inc	r27
 68e:	d9 f7       	brne	.-10     	; 0x686 <__fixunssfsi+0x42>
 690:	3e f4       	brtc	.+14     	; 0x6a0 <__fixunssfsi+0x5c>
 692:	90 95       	com	r25
 694:	80 95       	com	r24
 696:	70 95       	com	r23
 698:	61 95       	neg	r22
 69a:	7f 4f       	sbci	r23, 0xFF	; 255
 69c:	8f 4f       	sbci	r24, 0xFF	; 255
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	08 95       	ret

000006a2 <__fp_cmp>:
 6a2:	99 0f       	add	r25, r25
 6a4:	00 08       	sbc	r0, r0
 6a6:	55 0f       	add	r21, r21
 6a8:	aa 0b       	sbc	r26, r26
 6aa:	e0 e8       	ldi	r30, 0x80	; 128
 6ac:	fe ef       	ldi	r31, 0xFE	; 254
 6ae:	16 16       	cp	r1, r22
 6b0:	17 06       	cpc	r1, r23
 6b2:	e8 07       	cpc	r30, r24
 6b4:	f9 07       	cpc	r31, r25
 6b6:	c0 f0       	brcs	.+48     	; 0x6e8 <__fp_cmp+0x46>
 6b8:	12 16       	cp	r1, r18
 6ba:	13 06       	cpc	r1, r19
 6bc:	e4 07       	cpc	r30, r20
 6be:	f5 07       	cpc	r31, r21
 6c0:	98 f0       	brcs	.+38     	; 0x6e8 <__fp_cmp+0x46>
 6c2:	62 1b       	sub	r22, r18
 6c4:	73 0b       	sbc	r23, r19
 6c6:	84 0b       	sbc	r24, r20
 6c8:	95 0b       	sbc	r25, r21
 6ca:	39 f4       	brne	.+14     	; 0x6da <__fp_cmp+0x38>
 6cc:	0a 26       	eor	r0, r26
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <__fp_cmp+0x46>
 6d0:	23 2b       	or	r18, r19
 6d2:	24 2b       	or	r18, r20
 6d4:	25 2b       	or	r18, r21
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <__fp_cmp+0x3e>
 6d8:	08 95       	ret
 6da:	0a 26       	eor	r0, r26
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <__fp_cmp+0x3e>
 6de:	a1 40       	sbci	r26, 0x01	; 1
 6e0:	a6 95       	lsr	r26
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	81 1d       	adc	r24, r1
 6e6:	81 1d       	adc	r24, r1
 6e8:	08 95       	ret

000006ea <__fp_split3>:
 6ea:	57 fd       	sbrc	r21, 7
 6ec:	90 58       	subi	r25, 0x80	; 128
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	59 f0       	breq	.+22     	; 0x70a <__fp_splitA+0x10>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	71 f0       	breq	.+28     	; 0x714 <__fp_splitA+0x1a>
 6f8:	47 95       	ror	r20

000006fa <__fp_splitA>:
 6fa:	88 0f       	add	r24, r24
 6fc:	97 fb       	bst	r25, 7
 6fe:	99 1f       	adc	r25, r25
 700:	61 f0       	breq	.+24     	; 0x71a <__fp_splitA+0x20>
 702:	9f 3f       	cpi	r25, 0xFF	; 255
 704:	79 f0       	breq	.+30     	; 0x724 <__fp_splitA+0x2a>
 706:	87 95       	ror	r24
 708:	08 95       	ret
 70a:	12 16       	cp	r1, r18
 70c:	13 06       	cpc	r1, r19
 70e:	14 06       	cpc	r1, r20
 710:	55 1f       	adc	r21, r21
 712:	f2 cf       	rjmp	.-28     	; 0x6f8 <__fp_split3+0xe>
 714:	46 95       	lsr	r20
 716:	f1 df       	rcall	.-30     	; 0x6fa <__fp_splitA>
 718:	08 c0       	rjmp	.+16     	; 0x72a <__fp_splitA+0x30>
 71a:	16 16       	cp	r1, r22
 71c:	17 06       	cpc	r1, r23
 71e:	18 06       	cpc	r1, r24
 720:	99 1f       	adc	r25, r25
 722:	f1 cf       	rjmp	.-30     	; 0x706 <__fp_splitA+0xc>
 724:	86 95       	lsr	r24
 726:	71 05       	cpc	r23, r1
 728:	61 05       	cpc	r22, r1
 72a:	08 94       	sec
 72c:	08 95       	ret

0000072e <__fp_zero>:
 72e:	e8 94       	clt

00000730 <__fp_szero>:
 730:	bb 27       	eor	r27, r27
 732:	66 27       	eor	r22, r22
 734:	77 27       	eor	r23, r23
 736:	cb 01       	movw	r24, r22
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__gesf2>:
 73c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fp_cmp>
 740:	08 f4       	brcc	.+2      	; 0x744 <__gesf2+0x8>
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	08 95       	ret

00000746 <__mulsf3>:
 746:	0e 94 b6 03 	call	0x76c	; 0x76c <__mulsf3x>
 74a:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_round>
 74e:	0e 94 19 04 	call	0x832	; 0x832 <__fp_pscA>
 752:	38 f0       	brcs	.+14     	; 0x762 <__mulsf3+0x1c>
 754:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscB>
 758:	20 f0       	brcs	.+8      	; 0x762 <__mulsf3+0x1c>
 75a:	95 23       	and	r25, r21
 75c:	11 f0       	breq	.+4      	; 0x762 <__mulsf3+0x1c>
 75e:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 762:	0c 94 16 04 	jmp	0x82c	; 0x82c <__fp_nan>
 766:	11 24       	eor	r1, r1
 768:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>

0000076c <__mulsf3x>:
 76c:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 770:	70 f3       	brcs	.-36     	; 0x74e <__mulsf3+0x8>

00000772 <__mulsf3_pse>:
 772:	95 9f       	mul	r25, r21
 774:	c1 f3       	breq	.-16     	; 0x766 <__mulsf3+0x20>
 776:	95 0f       	add	r25, r21
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	55 1f       	adc	r21, r21
 77c:	62 9f       	mul	r22, r18
 77e:	f0 01       	movw	r30, r0
 780:	72 9f       	mul	r23, r18
 782:	bb 27       	eor	r27, r27
 784:	f0 0d       	add	r31, r0
 786:	b1 1d       	adc	r27, r1
 788:	63 9f       	mul	r22, r19
 78a:	aa 27       	eor	r26, r26
 78c:	f0 0d       	add	r31, r0
 78e:	b1 1d       	adc	r27, r1
 790:	aa 1f       	adc	r26, r26
 792:	64 9f       	mul	r22, r20
 794:	66 27       	eor	r22, r22
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	66 1f       	adc	r22, r22
 79c:	82 9f       	mul	r24, r18
 79e:	22 27       	eor	r18, r18
 7a0:	b0 0d       	add	r27, r0
 7a2:	a1 1d       	adc	r26, r1
 7a4:	62 1f       	adc	r22, r18
 7a6:	73 9f       	mul	r23, r19
 7a8:	b0 0d       	add	r27, r0
 7aa:	a1 1d       	adc	r26, r1
 7ac:	62 1f       	adc	r22, r18
 7ae:	83 9f       	mul	r24, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	22 1f       	adc	r18, r18
 7b6:	74 9f       	mul	r23, r20
 7b8:	33 27       	eor	r19, r19
 7ba:	a0 0d       	add	r26, r0
 7bc:	61 1d       	adc	r22, r1
 7be:	23 1f       	adc	r18, r19
 7c0:	84 9f       	mul	r24, r20
 7c2:	60 0d       	add	r22, r0
 7c4:	21 1d       	adc	r18, r1
 7c6:	82 2f       	mov	r24, r18
 7c8:	76 2f       	mov	r23, r22
 7ca:	6a 2f       	mov	r22, r26
 7cc:	11 24       	eor	r1, r1
 7ce:	9f 57       	subi	r25, 0x7F	; 127
 7d0:	50 40       	sbci	r21, 0x00	; 0
 7d2:	9a f0       	brmi	.+38     	; 0x7fa <__mulsf3_pse+0x88>
 7d4:	f1 f0       	breq	.+60     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7d6:	88 23       	and	r24, r24
 7d8:	4a f0       	brmi	.+18     	; 0x7ec <__mulsf3_pse+0x7a>
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	bb 1f       	adc	r27, r27
 7e0:	66 1f       	adc	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	88 1f       	adc	r24, r24
 7e6:	91 50       	subi	r25, 0x01	; 1
 7e8:	50 40       	sbci	r21, 0x00	; 0
 7ea:	a9 f7       	brne	.-22     	; 0x7d6 <__mulsf3_pse+0x64>
 7ec:	9e 3f       	cpi	r25, 0xFE	; 254
 7ee:	51 05       	cpc	r21, r1
 7f0:	80 f0       	brcs	.+32     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7f2:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_inf>
 7f6:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 7fa:	5f 3f       	cpi	r21, 0xFF	; 255
 7fc:	e4 f3       	brlt	.-8      	; 0x7f6 <__mulsf3_pse+0x84>
 7fe:	98 3e       	cpi	r25, 0xE8	; 232
 800:	d4 f3       	brlt	.-12     	; 0x7f6 <__mulsf3_pse+0x84>
 802:	86 95       	lsr	r24
 804:	77 95       	ror	r23
 806:	67 95       	ror	r22
 808:	b7 95       	ror	r27
 80a:	f7 95       	ror	r31
 80c:	e7 95       	ror	r30
 80e:	9f 5f       	subi	r25, 0xFF	; 255
 810:	c1 f7       	brne	.-16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 812:	fe 2b       	or	r31, r30
 814:	88 0f       	add	r24, r24
 816:	91 1d       	adc	r25, r1
 818:	96 95       	lsr	r25
 81a:	87 95       	ror	r24
 81c:	97 f9       	bld	r25, 7
 81e:	08 95       	ret

00000820 <__fp_inf>:
 820:	97 f9       	bld	r25, 7
 822:	9f 67       	ori	r25, 0x7F	; 127
 824:	80 e8       	ldi	r24, 0x80	; 128
 826:	70 e0       	ldi	r23, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	08 95       	ret

0000082c <__fp_nan>:
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	80 ec       	ldi	r24, 0xC0	; 192
 830:	08 95       	ret

00000832 <__fp_pscA>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	16 16       	cp	r1, r22
 838:	17 06       	cpc	r1, r23
 83a:	18 06       	cpc	r1, r24
 83c:	09 06       	cpc	r0, r25
 83e:	08 95       	ret

00000840 <__fp_pscB>:
 840:	00 24       	eor	r0, r0
 842:	0a 94       	dec	r0
 844:	12 16       	cp	r1, r18
 846:	13 06       	cpc	r1, r19
 848:	14 06       	cpc	r1, r20
 84a:	05 06       	cpc	r0, r21
 84c:	08 95       	ret

0000084e <__fp_round>:
 84e:	09 2e       	mov	r0, r25
 850:	03 94       	inc	r0
 852:	00 0c       	add	r0, r0
 854:	11 f4       	brne	.+4      	; 0x85a <__fp_round+0xc>
 856:	88 23       	and	r24, r24
 858:	52 f0       	brmi	.+20     	; 0x86e <__fp_round+0x20>
 85a:	bb 0f       	add	r27, r27
 85c:	40 f4       	brcc	.+16     	; 0x86e <__fp_round+0x20>
 85e:	bf 2b       	or	r27, r31
 860:	11 f4       	brne	.+4      	; 0x866 <__fp_round+0x18>
 862:	60 ff       	sbrs	r22, 0
 864:	04 c0       	rjmp	.+8      	; 0x86e <__fp_round+0x20>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	08 95       	ret

00000870 <_exit>:
 870:	f8 94       	cli

00000872 <__stop_program>:
 872:	ff cf       	rjmp	.-2      	; 0x872 <__stop_program>
