
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800112  00800112  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e60  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a7c  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb1  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007db6  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e4  00000000  00000000  0000a8f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000aad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002f5b  00000000  00000000  0000ab76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:



int main(void) {
    // Set PB0 as output for the LED
	GPIO_Init();
  a6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_Init>

    WDGDrv_Init();
  aa:	0e 94 84 00 	call	0x108	; 0x108 <WDGDrv_Init>
    LEDM_Init();
  ae:	0e 94 3f 01 	call	0x27e	; 0x27e <LEDM_Init>
    WDGM_Init();
  b2:	0e 94 a3 00 	call	0x146	; 0x146 <WDGM_Init>

    int counter = 1;
    LEDM_Manage();
  b6:	0e 94 4c 01 	call	0x298	; 0x298 <LEDM_Manage>
    WDGM_MainFunction();
  ba:	0e 94 b1 00 	call	0x162	; 0x162 <WDGM_MainFunction>

    WDGDrv_Init();
    LEDM_Init();
    WDGM_Init();

    int counter = 1;
  be:	c1 e0       	ldi	r28, 0x01	; 1
  c0:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	83 ec       	ldi	r24, 0xC3	; 195
  c4:	99 e0       	ldi	r25, 0x09	; 9
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x20>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x26>
  cc:	00 00       	nop
    LEDM_Manage();
    WDGM_MainFunction();
    while (1) {
         _delay_ms(10);         // Wait for 10 milliseconds
         LEDM_Manage();
  ce:	0e 94 4c 01 	call	0x298	; 0x298 <LEDM_Manage>
         if (counter == 2)
  d2:	c2 30       	cpi	r28, 0x02	; 2
  d4:	d1 05       	cpc	r29, r1
  d6:	19 f4       	brne	.+6      	; 0xde <main+0x38>
         {
           WDGM_MainFunction();
  d8:	0e 94 b1 00 	call	0x162	; 0x162 <WDGM_MainFunction>
  dc:	f2 cf       	rjmp	.-28     	; 0xc2 <main+0x1c>
           counter = 1;
         }
         counter++;
  de:	c2 e0       	ldi	r28, 0x02	; 2
  e0:	d0 e0       	ldi	r29, 0x00	; 0
  e2:	ef cf       	rjmp	.-34     	; 0xc2 <main+0x1c>

000000e4 <__vector_11>:





ISR(TIMER1_COMPA_vect) {
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
    PORTB ^= (1 << 0); // Set PB0 high
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	89 27       	eor	r24, r25
  f8:	85 b9       	out	0x05, r24	; 5
    // wdt_reset(); // Reset the watchdog timer

    // for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
    // _delay_ms(1000); 
    // WDTCSR = (1 << WDIE);
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <WDGDrv_Init>:

void WDGDrv_Init(void) {

    // cli();
    //configure the timer
    TCCR1B |= (1 << WGM12);
 108:	e1 e8       	ldi	r30, 0x81	; 129
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	80 83       	st	Z, r24

    // Set the value for a 50ms interval
    // Using a prescaler of 64: (16e6 / 64) = 250000 Hz Timer Frequency
    // 50ms = 0.05s, so OCR1A = 0.05 * 250000 = 12500 - 1 (subtract 1 because it starts from 0)
    OCR1A = 779;
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	93 e0       	ldi	r25, 0x03	; 3
 116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 11a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Set the prescaler to 1024
    TCCR1B |= (1 << CS11) | (1 << CS10);
 11e:	80 81       	ld	r24, Z
 120:	83 60       	ori	r24, 0x03	; 3
 122:	80 83       	st	Z, r24

    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 124:	ef e6       	ldi	r30, 0x6F	; 111
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24



    DDRB |= (1 << 0);
 12e:	20 9a       	sbi	0x04, 0	; 4
    PORTB &= ~(1 << 0);
 130:	28 98       	cbi	0x05, 0	; 5
    // Disable global interrupts
    // SREG &= ~(1 << I);
    //Interrupt and System Reset Mode
    // wdt_enable(2);
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 132:	e0 e6       	ldi	r30, 0x60	; 96
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 83       	st	Z, r24
    WDTCSR =  (1 << WDE) | (1 << WDP1) | (1 << WDP0)  | (1 << WDP2)    ;    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	80 83       	st	Z, r24
    sei(); // Enable global interrupts
 13e:	78 94       	sei
    // SREG |= (1 << I);
// 
}
 140:	08 95       	ret

00000142 <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
    // uint32 current_time = HAL_GetTick();

    if(WDGM_PovideSuppervisionStatus()==OK  /*&& the WDGM_MainFunction_is_not_STUCK*/){
 142:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <WDGM_PovideSuppervisionStatus>

00000146 <WDGM_Init>:
static uint8 call_count;
static uint32 stuck;

void WDGM_Init(void)
{
    status = NOK ;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <status>
    led_no_calls = 0;
 14c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <led_no_calls>
 150:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <led_no_calls+0x1>
 154:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls+0x2>
 158:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x3>
    call_count = 0;
 15c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
    stuck = 0;
}
 160:	08 95       	ret

00000162 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    call_count ++;
 162:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms 
    if (call_count <= 6) {
 16c:	87 30       	cpi	r24, 0x07	; 7
 16e:	d8 f4       	brcc	.+54     	; 0x1a6 <WDGM_MainFunction+0x44>
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 170:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_no_calls>
 174:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <led_no_calls+0x1>
 178:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <led_no_calls+0x2>
 17c:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <led_no_calls+0x3>
 180:	08 97       	sbiw	r24, 0x08	; 8
 182:	a1 09       	sbc	r26, r1
 184:	b1 09       	sbc	r27, r1
 186:	05 97       	sbiw	r24, 0x05	; 5
 188:	a1 05       	cpc	r26, r1
 18a:	b1 05       	cpc	r27, r1
 18c:	68 f4       	brcc	.+26     	; 0x1a8 <WDGM_MainFunction+0x46>
        { 
            status = OK;
 18e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <status>
        } else {
            status = NOK;
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 192:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <led_no_calls>
 196:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <led_no_calls+0x1>
 19a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls+0x2>
 19e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x3>
        call_count = 0; // Reset count for next 100ms period
 1a2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
    }
}
 1a6:	08 95       	ret
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
        { 
            status = OK;
        } else {
            status = NOK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <status>
 1ae:	f1 cf       	rjmp	.-30     	; 0x192 <WDGM_MainFunction+0x30>

000001b0 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 1b0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <status>
 1b4:	08 95       	ret

000001b6 <WDGM_AlivenessIndication>:



void WDGM_AlivenessIndication(void)
{
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 1b6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_no_calls>
 1ba:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <led_no_calls+0x1>
 1be:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <led_no_calls+0x2>
 1c2:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <led_no_calls+0x3>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	a1 1d       	adc	r26, r1
 1ca:	b1 1d       	adc	r27, r1
 1cc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_no_calls>
 1d0:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <led_no_calls+0x1>
 1d4:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <led_no_calls+0x2>
 1d8:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <led_no_calls+0x3>
}
 1dc:	08 95       	ret

000001de <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 1de:	80 36       	cpi	r24, 0x60	; 96
 1e0:	28 f5       	brcc	.+74     	; 0x22c <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 1e2:	e8 2f       	mov	r30, r24
 1e4:	e2 95       	swap	r30
 1e6:	e6 95       	lsr	r30
 1e8:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	ea 5f       	subi	r30, 0xFA	; 250
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	01 90       	ld	r0, Z+
 1f6:	f0 81       	ld	r31, Z
 1f8:	e0 2d       	mov	r30, r0
 1fa:	40 81       	ld	r20, Z
 1fc:	51 81       	ldd	r21, Z+1	; 0x01
 1fe:	62 81       	ldd	r22, Z+2	; 0x02
 200:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 202:	98 2f       	mov	r25, r24
 204:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <Nvic_EnableInterrupt+0x32>
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	9a 95       	dec	r25
 212:	e2 f7       	brpl	.-8      	; 0x20c <Nvic_EnableInterrupt+0x2e>
 214:	c9 01       	movw	r24, r18
 216:	33 0f       	add	r19, r19
 218:	aa 0b       	sbc	r26, r26
 21a:	bb 0b       	sbc	r27, r27
 21c:	84 2b       	or	r24, r20
 21e:	95 2b       	or	r25, r21
 220:	a6 2b       	or	r26, r22
 222:	b7 2b       	or	r27, r23
 224:	80 83       	st	Z, r24
 226:	91 83       	std	Z+1, r25	; 0x01
 228:	a2 83       	std	Z+2, r26	; 0x02
 22a:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 22c:	08 95       	ret

0000022e <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 22e:	80 36       	cpi	r24, 0x60	; 96
 230:	28 f5       	brcc	.+74     	; 0x27c <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 232:	e8 2f       	mov	r30, r24
 234:	e2 95       	swap	r30
 236:	e6 95       	lsr	r30
 238:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	e0 50       	subi	r30, 0x00	; 0
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	01 90       	ld	r0, Z+
 246:	f0 81       	ld	r31, Z
 248:	e0 2d       	mov	r30, r0
 24a:	40 81       	ld	r20, Z
 24c:	51 81       	ldd	r21, Z+1	; 0x01
 24e:	62 81       	ldd	r22, Z+2	; 0x02
 250:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 252:	98 2f       	mov	r25, r24
 254:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <Nvic_DisableInterrupt+0x32>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	9a 95       	dec	r25
 262:	e2 f7       	brpl	.-8      	; 0x25c <Nvic_DisableInterrupt+0x2e>
 264:	c9 01       	movw	r24, r18
 266:	33 0f       	add	r19, r19
 268:	aa 0b       	sbc	r26, r26
 26a:	bb 0b       	sbc	r27, r27
 26c:	84 2b       	or	r24, r20
 26e:	95 2b       	or	r25, r21
 270:	a6 2b       	or	r26, r22
 272:	b7 2b       	or	r27, r23
 274:	80 83       	st	Z, r24
 276:	91 83       	std	Z+1, r25	; 0x01
 278:	a2 83       	std	Z+2, r26	; 0x02
 27a:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 27c:	08 95       	ret

0000027e <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 27e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <GPIO_Init>
    led_state = 0;
 282:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_state>
    time_counter = 0;
 286:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <time_counter>
 28a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <time_counter+0x1>
 28e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <time_counter+0x2>
 292:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <time_counter+0x3>
}
 296:	08 95       	ret

00000298 <LEDM_Manage>:

void LEDM_Manage(void)
{
	if (time_counter == 500)
 298:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <time_counter>
 29c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <time_counter+0x1>
 2a0:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <time_counter+0x2>
 2a4:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <time_counter+0x3>
 2a8:	84 3f       	cpi	r24, 0xF4	; 244
 2aa:	91 40       	sbci	r25, 0x01	; 1
 2ac:	a1 05       	cpc	r26, r1
 2ae:	b1 05       	cpc	r27, r1
 2b0:	81 f4       	brne	.+32     	; 0x2d2 <LEDM_Manage+0x3a>
    {
		led_state = ~led_state;
 2b2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <led_state>
 2b6:	60 95       	com	r22
 2b8:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 80 01 	call	0x300	; 0x300 <GPIO_Write>
		time_counter = 0;
 2c2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <time_counter>
 2c6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <time_counter+0x1>
 2ca:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <time_counter+0x2>
 2ce:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <time_counter+0x3>
    }
	time_counter += 10;
 2d2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <time_counter>
 2d6:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <time_counter+0x1>
 2da:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <time_counter+0x2>
 2de:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <time_counter+0x3>
 2e2:	0a 96       	adiw	r24, 0x0a	; 10
 2e4:	a1 1d       	adc	r26, r1
 2e6:	b1 1d       	adc	r27, r1
 2e8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <time_counter>
 2ec:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <time_counter+0x1>
 2f0:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <time_counter+0x2>
 2f4:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 2f8:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <WDGM_AlivenessIndication>

000002fc <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 2fc:	21 9a       	sbi	0x04, 1	; 4

}
 2fe:	08 95       	ret

00000300 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 300:	45 b1       	in	r20, 0x05	; 5
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	f9 01       	movw	r30, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <GPIO_Write+0xe>
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	8a 95       	dec	r24
 310:	e2 f7       	brpl	.-8      	; 0x30a <GPIO_Write+0xa>
 312:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 314:	66 23       	and	r22, r22
 316:	19 f0       	breq	.+6      	; 0x31e <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 318:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 31a:	85 b9       	out	0x05, r24	; 5
    }
}
 31c:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 31e:	80 95       	com	r24
 320:	84 23       	and	r24, r20
 322:	fb cf       	rjmp	.-10     	; 0x31a <GPIO_Write+0x1a>

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
