
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000050a  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800112  00800112  000005b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c17  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fe  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e7  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00002414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000077a2  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039b  00000000  00000000  00009de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000a17d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002b3e  00000000  00000000  0000a20d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  9e:	0c 94 83 02 	jmp	0x506	; 0x506 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
#include <avr/io.h>
#include <avr/interrupt.h>

void setup() {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    // Set CTC mode
    TCCR1A = 0; // Clear Timer/Counter Control Register A
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	10 82       	st	Z, r1
    TCCR1B = 0; // Clear Timer/Counter Control Register B
  b6:	81 e8       	ldi	r24, 0x81	; 129
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	10 82       	st	Z, r1
    TCCR1B |= (1 << WGM12); // Set CTC mode (WGM12: Waveform Generation Mode bit 12)
  be:	81 e8       	ldi	r24, 0x81	; 129
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	20 81       	ld	r18, Z
  c6:	81 e8       	ldi	r24, 0x81	; 129
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	28 60       	ori	r18, 0x08	; 8
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
    
    // Set the compare match value for 50ms
    OCR1A = 12499; // Compare match register value (16MHz / (64 * (12499 + 1)) = 50Hz)
  d0:	88 e8       	ldi	r24, 0x88	; 136
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	23 ed       	ldi	r18, 0xD3	; 211
  d6:	30 e3       	ldi	r19, 0x30	; 48
  d8:	fc 01       	movw	r30, r24
  da:	31 83       	std	Z+1, r19	; 0x01
  dc:	20 83       	st	Z, r18
    
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10); // CS11 and CS10 bits set to 1: Prescaler = 64
  de:	81 e8       	ldi	r24, 0x81	; 129
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	20 81       	ld	r18, Z
  e6:	81 e8       	ldi	r24, 0x81	; 129
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	23 60       	ori	r18, 0x03	; 3
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
    
    // Enable the Timer1 compare match interrupt
    TIMSK1 |= (1 << OCIE1A); // Output Compare A Match Interrupt Enable
  f0:	8f e6       	ldi	r24, 0x6F	; 111
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	20 81       	ld	r18, Z
  f8:	8f e6       	ldi	r24, 0x6F	; 111
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	22 60       	ori	r18, 0x02	; 2
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
    
    // Set PB0 as an output pin
    DDRB |= (1 << DDB0);
 102:	84 e2       	ldi	r24, 0x24	; 36
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	20 81       	ld	r18, Z
 10a:	84 e2       	ldi	r24, 0x24	; 36
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	21 60       	ori	r18, 0x01	; 1
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
    
    // Enable global interrupts
    sei();
 114:	78 94       	sei
}
 116:	00 00       	nop
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <__vector_11>:

// ISR to be called every 50ms
ISR(TIMER1_COMPA_vect) {
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
    // Toggle the LED on PB0
    PORTB ^= (1 << PORTB0);
 13c:	85 e2       	ldi	r24, 0x25	; 37
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	30 81       	ld	r19, Z
 144:	85 e2       	ldi	r24, 0x25	; 37
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	23 27       	eor	r18, r19
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
}
 150:	00 00       	nop
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <main>:

int main(void) {
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
    setup(); // Call the setup function
 174:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    
    while (1) {
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0xc>

0000017a <WDGM_Init>:
static uint32 led_no_calls;
static uint8 call_count;
static uint32 stuck;

void WDGM_Init(void)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
    led_no_calls = 0;
 188:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <led_no_calls>
 18c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <led_no_calls+0x1>
 190:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls+0x2>
 194:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x3>
    call_count = 0;
 198:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <call_count>
    stuck = 0;
 19c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <stuck>
 1a0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <stuck+0x1>
 1a4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <stuck+0x2>
 1a8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <stuck+0x3>
}
 1ac:	00 00       	nop
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
    call_count ++;
 1bc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count>
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <call_count>
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms 
    if (call_count <= 6) {
 1c6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count>
 1ca:	87 30       	cpi	r24, 0x07	; 7
 1cc:	48 f5       	brcc	.+82     	; 0x220 <WDGM_MainFunction+0x6c>
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 1ce:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_no_calls>
 1d2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <led_no_calls+0x1>
 1d6:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <led_no_calls+0x2>
 1da:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <led_no_calls+0x3>
 1de:	08 97       	sbiw	r24, 0x08	; 8
 1e0:	a1 05       	cpc	r26, r1
 1e2:	b1 05       	cpc	r27, r1
 1e4:	78 f0       	brcs	.+30     	; 0x204 <WDGM_MainFunction+0x50>
 1e6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_no_calls>
 1ea:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <led_no_calls+0x1>
 1ee:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <led_no_calls+0x2>
 1f2:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <led_no_calls+0x3>
 1f6:	0d 97       	sbiw	r24, 0x0d	; 13
 1f8:	a1 05       	cpc	r26, r1
 1fa:	b1 05       	cpc	r27, r1
 1fc:	18 f4       	brcc	.+6      	; 0x204 <WDGM_MainFunction+0x50>
        { 
            status = OK;
 1fe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 202:	03 c0       	rjmp	.+6      	; 0x20a <WDGM_MainFunction+0x56>
        } else {
            status = NOK;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 20a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <led_no_calls>
 20e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <led_no_calls+0x1>
 212:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls+0x2>
 216:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x3>
        call_count = 0; // Reset count for next 100ms period
 21a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <call_count>
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
    }
}
 21e:	0c c0       	rjmp	.+24     	; 0x238 <WDGM_MainFunction+0x84>
        led_no_calls = 0; // Reset the call counter for the next 100ms period
        call_count = 0; // Reset count for next 100ms period
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <stuck>
 22c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <stuck+0x1>
 230:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <stuck+0x2>
 234:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <stuck+0x3>
    }
}
 238:	00 00       	nop
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 248:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <WDGM_AlivenessIndication>:



void WDGM_AlivenessIndication(void)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 25a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_no_calls>
 25e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <led_no_calls+0x1>
 262:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <led_no_calls+0x2>
 266:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <led_no_calls+0x3>
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	a1 1d       	adc	r26, r1
 26e:	b1 1d       	adc	r27, r1
 270:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_no_calls>
 274:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <led_no_calls+0x1>
 278:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <led_no_calls+0x2>
 27c:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <led_no_calls+0x3>
}
 280:	00 00       	nop
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 d0       	rcall	.+0      	; 0x28e <Nvic_EnableInterrupt+0x6>
 28e:	1f 92       	push	r1
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	80 36       	cpi	r24, 0x60	; 96
 29a:	c0 f5       	brcc	.+112    	; 0x30c <Nvic_EnableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 29c:	8b 81       	ldd	r24, Y+3	; 0x03
 29e:	82 95       	swap	r24
 2a0:	86 95       	lsr	r24
 2a2:	87 70       	andi	r24, 0x07	; 7
 2a4:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 2a6:	8b 81       	ldd	r24, Y+3	; 0x03
 2a8:	8f 71       	andi	r24, 0x1F	; 31
 2aa:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	80 50       	subi	r24, 0x00	; 0
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	fc 01       	movw	r30, r24
 2bc:	80 81       	ld	r24, Z
 2be:	91 81       	ldd	r25, Z+1	; 0x01
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 81       	ld	r18, Z
 2c4:	31 81       	ldd	r19, Z+1	; 0x01
 2c6:	42 81       	ldd	r20, Z+2	; 0x02
 2c8:	53 81       	ldd	r21, Z+3	; 0x03
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	68 2f       	mov	r22, r24
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <Nvic_EnableInterrupt+0x52>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <Nvic_EnableInterrupt+0x4e>
 2de:	09 2e       	mov	r0, r25
 2e0:	00 0c       	add	r0, r0
 2e2:	aa 0b       	sbc	r26, r26
 2e4:	bb 0b       	sbc	r27, r27
 2e6:	69 81       	ldd	r22, Y+1	; 0x01
 2e8:	66 2f       	mov	r22, r22
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	60 50       	subi	r22, 0x00	; 0
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
 2f4:	fb 01       	movw	r30, r22
 2f6:	60 81       	ld	r22, Z
 2f8:	71 81       	ldd	r23, Z+1	; 0x01
 2fa:	82 2b       	or	r24, r18
 2fc:	93 2b       	or	r25, r19
 2fe:	a4 2b       	or	r26, r20
 300:	b5 2b       	or	r27, r21
 302:	fb 01       	movw	r30, r22
 304:	80 83       	st	Z, r24
 306:	91 83       	std	Z+1, r25	; 0x01
 308:	a2 83       	std	Z+2, r26	; 0x02
 30a:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 30c:	00 00       	nop
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	00 d0       	rcall	.+0      	; 0x320 <Nvic_DisableInterrupt+0x6>
 320:	1f 92       	push	r1
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	80 36       	cpi	r24, 0x60	; 96
 32c:	c0 f5       	brcc	.+112    	; 0x39e <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	82 95       	swap	r24
 332:	86 95       	lsr	r24
 334:	87 70       	andi	r24, 0x07	; 7
 336:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	8f 71       	andi	r24, 0x1F	; 31
 33c:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	88 2f       	mov	r24, r24
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	8a 5f       	subi	r24, 0xFA	; 250
 34a:	9e 4f       	sbci	r25, 0xFE	; 254
 34c:	fc 01       	movw	r30, r24
 34e:	80 81       	ld	r24, Z
 350:	91 81       	ldd	r25, Z+1	; 0x01
 352:	fc 01       	movw	r30, r24
 354:	20 81       	ld	r18, Z
 356:	31 81       	ldd	r19, Z+1	; 0x01
 358:	42 81       	ldd	r20, Z+2	; 0x02
 35a:	53 81       	ldd	r21, Z+3	; 0x03
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	68 2f       	mov	r22, r24
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <Nvic_DisableInterrupt+0x52>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <Nvic_DisableInterrupt+0x4e>
 370:	09 2e       	mov	r0, r25
 372:	00 0c       	add	r0, r0
 374:	aa 0b       	sbc	r26, r26
 376:	bb 0b       	sbc	r27, r27
 378:	69 81       	ldd	r22, Y+1	; 0x01
 37a:	66 2f       	mov	r22, r22
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	6a 5f       	subi	r22, 0xFA	; 250
 384:	7e 4f       	sbci	r23, 0xFE	; 254
 386:	fb 01       	movw	r30, r22
 388:	60 81       	ld	r22, Z
 38a:	71 81       	ldd	r23, Z+1	; 0x01
 38c:	82 2b       	or	r24, r18
 38e:	93 2b       	or	r25, r19
 390:	a4 2b       	or	r26, r20
 392:	b5 2b       	or	r27, r21
 394:	fb 01       	movw	r30, r22
 396:	80 83       	st	Z, r24
 398:	91 83       	std	Z+1, r25	; 0x01
 39a:	a2 83       	std	Z+2, r26	; 0x02
 39c:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 39e:	00 00       	nop
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <LEDM_Init>:

static uint8 led_state;


void LEDM_Init(void)
{
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 3b4:	0e 94 27 02 	call	0x44e	; 0x44e <GPIO_Init>
    led_state = 0;
 3b8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <led_state>
    time_counter = 0;
 3bc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <time_counter>
 3c0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <time_counter+0x1>
 3c4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_counter+0x2>
 3c8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter+0x3>
}
 3cc:	00 00       	nop
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <LEDM_Manage>:

void LEDM_Manage(void)
{
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
	if (time_counter == 500)
 3dc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <time_counter>
 3e0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <time_counter+0x1>
 3e4:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <time_counter+0x2>
 3e8:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <time_counter+0x3>
 3ec:	84 3f       	cpi	r24, 0xF4	; 244
 3ee:	91 40       	sbci	r25, 0x01	; 1
 3f0:	a1 05       	cpc	r26, r1
 3f2:	b1 05       	cpc	r27, r1
 3f4:	99 f4       	brne	.+38     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
    {
		led_state = ~led_state;
 3f6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <led_state>
 3fa:	80 95       	com	r24
 3fc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 400:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <led_state>
 404:	68 2f       	mov	r22, r24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 40 02 	call	0x480	; 0x480 <GPIO_Write>
		time_counter = 0;
 40c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <time_counter>
 410:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <time_counter+0x1>
 414:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_counter+0x2>
 418:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter+0x3>
    }
	time_counter += 10;
 41c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <time_counter>
 420:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <time_counter+0x1>
 424:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <time_counter+0x2>
 428:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <time_counter+0x3>
 42c:	0a 96       	adiw	r24, 0x0a	; 10
 42e:	a1 1d       	adc	r26, r1
 430:	b1 1d       	adc	r27, r1
 432:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <time_counter>
 436:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <time_counter+0x1>
 43a:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <time_counter+0x2>
 43e:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 442:	0e 94 29 01 	call	0x252	; 0x252 <WDGM_AlivenessIndication>
 446:	00 00       	nop
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <GPIO_Init>:
#include "Gpio_Private.h"

GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	00 d0       	rcall	.+0      	; 0x454 <GPIO_Init+0x6>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 458:	83 e2       	ldi	r24, 0x23	; 35
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	9a 83       	std	Y+2, r25	; 0x02
 45e:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->DDR |= (1 << LED_PIN_ID);
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	fc 01       	movw	r30, r24
 466:	81 81       	ldd	r24, Z+1	; 0x01
 468:	28 2f       	mov	r18, r24
 46a:	22 60       	ori	r18, 0x02	; 2
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	9a 81       	ldd	r25, Y+2	; 0x02
 470:	fc 01       	movw	r30, r24
 472:	21 83       	std	Z+1, r18	; 0x01

}
 474:	00 00       	nop
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	00 d0       	rcall	.+0      	; 0x486 <GPIO_Write+0x6>
 486:	00 d0       	rcall	.+0      	; 0x488 <GPIO_Write+0x8>
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	8b 83       	std	Y+3, r24	; 0x03
 48e:	6c 83       	std	Y+4, r22	; 0x04
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 490:	83 e2       	ldi	r24, 0x23	; 35
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
    if (PinData) {
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	88 23       	and	r24, r24
 49c:	b1 f0       	breq	.+44     	; 0x4ca <GPIO_Write+0x4a>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	9a 81       	ldd	r25, Y+2	; 0x02
 4a2:	fc 01       	movw	r30, r24
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	48 2f       	mov	r20, r24
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	28 2f       	mov	r18, r24
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <GPIO_Write+0x38>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	2a 95       	dec	r18
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <GPIO_Write+0x34>
 4bc:	84 2b       	or	r24, r20
 4be:	28 2f       	mov	r18, r24
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	9a 81       	ldd	r25, Y+2	; 0x02
 4c4:	fc 01       	movw	r30, r24
 4c6:	22 83       	std	Z+2, r18	; 0x02
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
    }
}
 4c8:	16 c0       	rjmp	.+44     	; 0x4f6 <GPIO_Write+0x76>
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	9a 81       	ldd	r25, Y+2	; 0x02
 4ce:	fc 01       	movw	r30, r24
 4d0:	82 81       	ldd	r24, Z+2	; 0x02
 4d2:	48 2f       	mov	r20, r24
 4d4:	8b 81       	ldd	r24, Y+3	; 0x03
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <GPIO_Write+0x64>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	2a 95       	dec	r18
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <GPIO_Write+0x60>
 4e8:	80 95       	com	r24
 4ea:	84 23       	and	r24, r20
 4ec:	28 2f       	mov	r18, r24
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	9a 81       	ldd	r25, Y+2	; 0x02
 4f2:	fc 01       	movw	r30, r24
 4f4:	22 83       	std	Z+2, r18	; 0x02
    }
}
 4f6:	00 00       	nop
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <_exit>:
 506:	f8 94       	cli

00000508 <__stop_program>:
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stop_program>
