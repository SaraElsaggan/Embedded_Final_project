
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000460  000004f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800112  00800112  00000506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f45  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ade  00000000  00000000  000015c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de2  00000000  00000000  000020a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007e2a  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  0000ae62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000302f  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  9e:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SysInit>:

uint32 call_count_100_ms = 0;
uint32 call_count_50_ms = 0;

int SysInit(void) {
    DDRB |= (1 << 0);
  a6:	20 9a       	sbi	0x04, 0	; 4
    DDRB |= (1 << 3);
  a8:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1 << 2);
  aa:	22 9a       	sbi	0x04, 2	; 4
    PORTB &= ~(1 << 0);
  ac:	28 98       	cbi	0x05, 0	; 5
    GPIO_Init();
  ae:	0e 94 1a 02 	call	0x434	; 0x434 <GPIO_Init>
    LEDM_Init();
  b2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LEDM_Init>
    WDGM_Init();
  b6:	0e 94 24 01 	call	0x248	; 0x248 <WDGM_Init>
    WDGDrv_Init();
  ba:	0e 94 a0 00 	call	0x140	; 0x140 <WDGDrv_Init>
    
}
  be:	08 95       	ret

000000c0 <main>:

int main(void) {
    
    SysInit();
  c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
    // DDRB |= (1 << 0);
    // PORTB |= (1 <<0);
    static uint8 WDGCounter = 0;

    // Call WDGM_MainFunction for the first time
    LEDM_Manage();
  c4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LEDM_Manage>
    WDGM_MainFunction();
  c8:	0e 94 38 01 	call	0x270	; 0x270 <WDGM_MainFunction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x10>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x16>
  d6:	00 00       	nop
    // Main loop
    while (1) {
        _delay_ms(10);
        // _delay_ms(5);
        LEDM_Manage();          // wait for 10ms to call LEDM_Manage again 
  d8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LEDM_Manage>

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        // WDGCounter += 5; // Increment by the delay amount (10ms)
        WDGCounter += 10; // Increment by the delay amount (10ms)
  dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  e0:	86 5f       	subi	r24, 0xF6	; 246
  e2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
  e6:	84 31       	cpi	r24, 0x14	; 20
  e8:	88 f3       	brcs	.-30     	; 0xcc <main+0xc>
            WDGM_MainFunction();  // Call watchdog management every 20ms
  ea:	0e 94 38 01 	call	0x270	; 0x270 <WDGM_MainFunction>
            call_count_100_ms ++;
  ee:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count_100_ms>
  f2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <call_count_100_ms+0x1>
  f6:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <call_count_100_ms+0x2>
  fa:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <call_count_100_ms+0x3>
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <call_count_100_ms>
 108:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <call_count_100_ms+0x1>
 10c:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <call_count_100_ms+0x2>
 110:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <call_count_100_ms+0x3>
            call_count_50_ms ++;
 114:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count_50_ms>
 118:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count_50_ms+0x1>
 11c:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <call_count_50_ms+0x2>
 120:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <call_count_50_ms+0x3>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	a1 1d       	adc	r26, r1
 128:	b1 1d       	adc	r27, r1
 12a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <call_count_50_ms>
 12e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <call_count_50_ms+0x1>
 132:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <call_count_50_ms+0x2>
 136:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <call_count_50_ms+0x3>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 13a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 13e:	c6 cf       	rjmp	.-116    	; 0xcc <main+0xc>

00000140 <WDGDrv_Init>:
    WDGDrv_IsrNotification();
}

void WDGDrv_Init(void)
{
    cli();                             // Enable global interrupts
 140:	f8 94       	cli

    // configure the timer
    TCCR1B |= (1 << WGM12);
 142:	e1 e8       	ldi	r30, 0x81	; 129
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 83       	st	Z, r24
    OCR1A = 779;
 14c:	8b e0       	ldi	r24, 0x0B	; 11
 14e:	93 e0       	ldi	r25, 0x03	; 3
 150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
 158:	80 81       	ld	r24, Z
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	80 83       	st	Z, r24
    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 15e:	ef e6       	ldi	r30, 0x6F	; 111
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	82 60       	ori	r24, 0x02	; 2
 166:	80 83       	st	Z, r24


    // wdt_reset();
    // MCUSR &= ~(1<<3);
    // WDTCSR = 0x00;
    WDTCSR = (1 << WDCE) | (1 << WDE); // Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 168:	e0 e6       	ldi	r30, 0x60	; 96
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	88 e1       	ldi	r24, 0x18	; 24
 16e:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP1)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	80 83       	st	Z, r24
    // WDTCSR = (1 << WDIE) ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
    // sei();                             // Enable global interrupts
        // WDTCSR = (1 << WDE) | (1 << WDP2) | (1 << WDP1); // Set the watchdog to approximately 0.5 seconds

    SREG |= (1 << I);
 174:	8f b7       	in	r24, 0x3f	; 63
 176:	80 68       	ori	r24, 0x80	; 128
 178:	8f bf       	out	0x3f, r24	; 63
}
 17a:	08 95       	ret

0000017c <WDGDrv_IsrNotification>:

void WDGDrv_IsrNotification(void)
{
    if ((isr_counter % 2) != 0) // when time is 50 , 150 , 250 and so on
 17c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isr_counter>
 180:	80 ff       	sbrs	r24, 0
 182:	1b c0       	rjmp	.+54     	; 0x1ba <WDGDrv_IsrNotification+0x3e>
    {
        // check call_count(times WDGM_MainFunction is called) is 2 or more
        if (call_count_50_ms >= 2)
 184:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count_50_ms>
 188:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count_50_ms+0x1>
 18c:	02 97       	sbiw	r24, 0x02	; 2
 18e:	74 f0       	brlt	.+28     	; 0x1ac <WDGDrv_IsrNotification+0x30>
        {
            stuck = 0;            // The function is not stuck
 190:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x1>
 194:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck>
            wdt_reset(); //  should i do the reset here when not stuck?
 198:	a8 95       	wdr
            PORTB ^= (1 << 0); // to indicate the perodicity refreshment of the wdt
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	89 27       	eor	r24, r25
 1a0:	85 b9       	out	0x05, r24	; 5
            call_count_50_ms = 0; // Reset for the next 50ms period
 1a2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <call_count_50_ms+0x1>
 1a6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <call_count_50_ms>
 1aa:	08 95       	ret
        }
        else
        {
            stuck = 1; // The function might be stuck
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <stuck+0x1>
 1b4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <stuck>
 1b8:	08 95       	ret
        }
    }
    else  // if in 100 , 200 , 300 and so on
    {
        if (WDGM_PovideSuppervisionStatus() == OK && (!stuck))
 1ba:	0e 94 70 01 	call	0x2e0	; 0x2e0 <WDGM_PovideSuppervisionStatus>
 1be:	81 11       	cpse	r24, r1
 1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <WDGDrv_IsrNotification+0x5c>
 1c2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <stuck>
 1c6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <stuck+0x1>
 1ca:	89 2b       	or	r24, r25
 1cc:	29 f4       	brne	.+10     	; 0x1d8 <WDGDrv_IsrNotification+0x5c>
        {
            wdt_reset();
 1ce:	a8 95       	wdr
            PORTB ^= (1 << 0); // to indicate the perodicity refreshment of the wdt
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	89 27       	eor	r24, r25
 1d6:	85 b9       	out	0x05, r24	; 5
        {
            // leave the wdt to reset 
            return;
        }
    }
}
 1d8:	08 95       	ret

000001da <__vector_11>:
extern stuck;
extern call_count_50_ms;
uint32 isr_counter = 0;

ISR(TIMER1_COMPA_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
    isr_counter++;
 1fc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isr_counter>
 200:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <isr_counter+0x1>
 204:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <isr_counter+0x2>
 208:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <isr_counter+0x3>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	a1 1d       	adc	r26, r1
 210:	b1 1d       	adc	r27, r1
 212:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <isr_counter>
 216:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <isr_counter+0x1>
 21a:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <isr_counter+0x2>
 21e:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <isr_counter+0x3>
    // PORTB ^= (1 << 0); // Set PB0 high
    WDGDrv_IsrNotification();
 222:	0e 94 be 00 	call	0x17c	; 0x17c <WDGDrv_IsrNotification>
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <WDGM_Init>:
static volatile uint32 led_no_calls;
uint32 stuck;

void WDGM_Init(void)
{
    status = NOK;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <status>
    led_no_calls = 0;
 24e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 252:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 256:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 25a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
    stuck = 0;
 25e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck>
 262:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x1>
 266:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stuck+0x2>
 26a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stuck+0x3>
}
 26e:	08 95       	ret

00000270 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    PORTB ^= (1 << 3); // to indicate the perodicity of the function
 270:	85 b1       	in	r24, 0x05	; 5
 272:	98 e0       	ldi	r25, 0x08	; 8
 274:	89 27       	eor	r24, r25
 276:	85 b9       	out	0x05, r24	; 5
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms
    if (call_count_100_ms <= 5)
 278:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count_100_ms>
 27c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <call_count_100_ms+0x1>
 280:	06 97       	sbiw	r24, 0x06	; 6
 282:	fc f4       	brge	.+62     	; 0x2c2 <WDGM_MainFunction+0x52>
    {
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 284:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 288:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 28c:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 290:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 294:	08 97       	sbiw	r24, 0x08	; 8
 296:	a1 05       	cpc	r26, r1
 298:	b1 05       	cpc	r27, r1
 29a:	78 f0       	brcs	.+30     	; 0x2ba <WDGM_MainFunction+0x4a>
 29c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 2a0:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 2a4:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 2a8:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 2ac:	0d 97       	sbiw	r24, 0x0d	; 13
 2ae:	a1 05       	cpc	r26, r1
 2b0:	b1 05       	cpc	r27, r1
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <WDGM_MainFunction+0x4a>
        {
            status = OK;
 2b4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <status>
 2b8:	08 95       	ret
        }
        else
        {
            status = NOK;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <status>
 2c0:	08 95       	ret
        }
    }
    else
    {
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 2c2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 2c6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 2ca:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 2ce:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
        call_count_100_ms = 1;   // return the call count for the next 100ms period
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <call_count_100_ms+0x1>
 2da:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <call_count_100_ms>
    }
}
 2de:	08 95       	ret

000002e0 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 2e0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <status>
 2e4:	08 95       	ret

000002e6 <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 2e6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 2ea:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 2ee:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 2f2:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	a1 1d       	adc	r26, r1
 2fa:	b1 1d       	adc	r27, r1
 2fc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <led_no_calls>
 300:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <led_no_calls+0x1>
 304:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <led_no_calls+0x2>
 308:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <led_no_calls+0x3>
 30c:	08 95       	ret

0000030e <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 30e:	80 36       	cpi	r24, 0x60	; 96
 310:	28 f5       	brcc	.+74     	; 0x35c <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 312:	e8 2f       	mov	r30, r24
 314:	e2 95       	swap	r30
 316:	e6 95       	lsr	r30
 318:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	ea 5f       	subi	r30, 0xFA	; 250
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	01 90       	ld	r0, Z+
 326:	f0 81       	ld	r31, Z
 328:	e0 2d       	mov	r30, r0
 32a:	40 81       	ld	r20, Z
 32c:	51 81       	ldd	r21, Z+1	; 0x01
 32e:	62 81       	ldd	r22, Z+2	; 0x02
 330:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 332:	98 2f       	mov	r25, r24
 334:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <Nvic_EnableInterrupt+0x32>
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	9a 95       	dec	r25
 342:	e2 f7       	brpl	.-8      	; 0x33c <Nvic_EnableInterrupt+0x2e>
 344:	c9 01       	movw	r24, r18
 346:	33 0f       	add	r19, r19
 348:	aa 0b       	sbc	r26, r26
 34a:	bb 0b       	sbc	r27, r27
 34c:	84 2b       	or	r24, r20
 34e:	95 2b       	or	r25, r21
 350:	a6 2b       	or	r26, r22
 352:	b7 2b       	or	r27, r23
 354:	80 83       	st	Z, r24
 356:	91 83       	std	Z+1, r25	; 0x01
 358:	a2 83       	std	Z+2, r26	; 0x02
 35a:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 35c:	08 95       	ret

0000035e <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 35e:	80 36       	cpi	r24, 0x60	; 96
 360:	28 f5       	brcc	.+74     	; 0x3ac <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 362:	e8 2f       	mov	r30, r24
 364:	e2 95       	swap	r30
 366:	e6 95       	lsr	r30
 368:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	e0 50       	subi	r30, 0x00	; 0
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	01 90       	ld	r0, Z+
 376:	f0 81       	ld	r31, Z
 378:	e0 2d       	mov	r30, r0
 37a:	40 81       	ld	r20, Z
 37c:	51 81       	ldd	r21, Z+1	; 0x01
 37e:	62 81       	ldd	r22, Z+2	; 0x02
 380:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 382:	98 2f       	mov	r25, r24
 384:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	02 c0       	rjmp	.+4      	; 0x390 <Nvic_DisableInterrupt+0x32>
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	9a 95       	dec	r25
 392:	e2 f7       	brpl	.-8      	; 0x38c <Nvic_DisableInterrupt+0x2e>
 394:	c9 01       	movw	r24, r18
 396:	33 0f       	add	r19, r19
 398:	aa 0b       	sbc	r26, r26
 39a:	bb 0b       	sbc	r27, r27
 39c:	84 2b       	or	r24, r20
 39e:	95 2b       	or	r25, r21
 3a0:	a6 2b       	or	r26, r22
 3a2:	b7 2b       	or	r27, r23
 3a4:	80 83       	st	Z, r24
 3a6:	91 83       	std	Z+1, r25	; 0x01
 3a8:	a2 83       	std	Z+2, r26	; 0x02
 3aa:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 3ac:	08 95       	ret

000003ae <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 3ae:	0e 94 1a 02 	call	0x434	; 0x434 <GPIO_Init>
    led_state = 0;
 3b2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <led_state>
    time_counter = 0;
 3b6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter>
 3ba:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x1>
 3be:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x2>
 3c2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_counter+0x3>
}
 3c6:	08 95       	ret

000003c8 <LEDM_Manage>:

void LEDM_Manage(void)
{   
    PORTB ^= (1 << 2); // to indicate the perodicity of the function
 3c8:	85 b1       	in	r24, 0x05	; 5
 3ca:	94 e0       	ldi	r25, 0x04	; 4
 3cc:	89 27       	eor	r24, r25
 3ce:	85 b9       	out	0x05, r24	; 5
    
	if (time_counter == 500)
 3d0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <time_counter>
 3d4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <time_counter+0x1>
 3d8:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <time_counter+0x2>
 3dc:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <time_counter+0x3>
 3e0:	84 3f       	cpi	r24, 0xF4	; 244
 3e2:	91 40       	sbci	r25, 0x01	; 1
 3e4:	a1 05       	cpc	r26, r1
 3e6:	b1 05       	cpc	r27, r1
 3e8:	81 f4       	brne	.+32     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
    {
		led_state = ~led_state;
 3ea:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <led_state>
 3ee:	60 95       	com	r22
 3f0:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 1c 02 	call	0x438	; 0x438 <GPIO_Write>
		time_counter = 0;
 3fa:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter>
 3fe:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x1>
 402:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x2>
 406:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_counter+0x3>
    }
	// time_counter += 5;
	time_counter += 10;
 40a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <time_counter>
 40e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <time_counter+0x1>
 412:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <time_counter+0x2>
 416:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <time_counter+0x3>
 41a:	0a 96       	adiw	r24, 0x0a	; 10
 41c:	a1 1d       	adc	r26, r1
 41e:	b1 1d       	adc	r27, r1
 420:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <time_counter>
 424:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <time_counter+0x1>
 428:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <time_counter+0x2>
 42c:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 430:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <WDGM_AlivenessIndication>

00000434 <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 434:	21 9a       	sbi	0x04, 1	; 4

}
 436:	08 95       	ret

00000438 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 438:	45 b1       	in	r20, 0x05	; 5
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <GPIO_Write+0xe>
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <GPIO_Write+0xa>
 44a:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 44c:	66 23       	and	r22, r22
 44e:	19 f0       	breq	.+6      	; 0x456 <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 450:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 452:	85 b9       	out	0x05, r24	; 5
    }
}
 454:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 456:	80 95       	com	r24
 458:	84 23       	and	r24, r20
 45a:	fb cf       	rjmp	.-10     	; 0x452 <GPIO_Write+0x1a>

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
