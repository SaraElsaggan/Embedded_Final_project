
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000047e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800106  00800106  00000518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df3  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9c  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcc  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000792c  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a1  00000000  00000000  0000a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000a95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002fed  00000000  00000000  0000a9fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Timer0_Init>:

#define DDRB  (*(volatile uint8_t *)0x24)

void Timer0_Init(void)
{
        TCCR0A = (1 << WGM01);              // Config the timer
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36
        OCR0A = 15;                         // Set compare value for 1ms interrupt
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	97 bd       	out	0x27, r25	; 39
        TIMSK0 = (1 << OCIE0A);             // Enable Timer Compare Interrupt
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
        TCCR0B = (1 << CS01) | (1 << CS00); // Set prescaler to 64 and start Timer0
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	85 bd       	out	0x25, r24	; 37
        SREG |= (1 << I);
  b6:	8f b7       	in	r24, 0x3f	; 63
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	8f bf       	out	0x3f, r24	; 63
    }
  bc:	08 95       	ret

000000be <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
    current_time++; // Increment the time variable every 1ms
  d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <current_time>
  d4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <current_time+0x1>
  d8:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <current_time+0x2>
  dc:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <current_time+0x3>
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	a1 1d       	adc	r26, r1
  e4:	b1 1d       	adc	r27, r1
  e6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <current_time>
  ea:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <current_time+0x1>
  ee:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <current_time+0x2>
  f2:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <current_time+0x3>
}
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <SysInit>:

void SysInit(void)
{    
    // PORTB &= ~(1 << 0);
    LEDM_Init();
 108:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LEDM_Init>
    WDGM_Init();
 10c:	0e 94 43 01 	call	0x286	; 0x286 <WDGM_Init>
    Timer0_Init();
 110:	0c 94 53 00 	jmp	0xa6	; 0xa6 <Timer0_Init>

00000114 <main>:
}

int main(void)
{
    DDRB |= (1 << 0); // reset
 114:	20 9a       	sbi	0x04, 0	; 4

    PORTB |= (1 << 0); // to monitor the system reset
 116:	28 9a       	sbi	0x05, 0	; 5
    SysInit();
 118:	0e 94 84 00 	call	0x108	; 0x108 <SysInit>
    while (1)
    {
//         if ((current_time - time_at_last_10ms) >= 5)
        if ((current_time - time_at_last_10ms) >= 10)
 11c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <current_time>
 120:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <current_time+0x1>
 124:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <current_time+0x2>
 128:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <current_time+0x3>
 12c:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <time_at_last_10ms>
 130:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <time_at_last_10ms+0x1>
 134:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <time_at_last_10ms+0x2>
 138:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <time_at_last_10ms+0x3>
 13c:	84 1b       	sub	r24, r20
 13e:	95 0b       	sbc	r25, r21
 140:	a6 0b       	sbc	r26, r22
 142:	b7 0b       	sbc	r27, r23
 144:	0a 97       	sbiw	r24, 0x0a	; 10
 146:	a1 05       	cpc	r26, r1
 148:	b1 05       	cpc	r27, r1
 14a:	40 f3       	brcs	.-48     	; 0x11c <main+0x8>
        {
            time_at_last_10ms = current_time;
 14c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <current_time>
 150:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <current_time+0x1>
 154:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <current_time+0x2>
 158:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <current_time+0x3>
 15c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <time_at_last_10ms>
 160:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <time_at_last_10ms+0x1>
 164:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <time_at_last_10ms+0x2>
 168:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <time_at_last_10ms+0x3>
            LEDM_Manage();
 16c:	0e 94 f7 01 	call	0x3ee	; 0x3ee <LEDM_Manage>
            WDGCounter += 10;
             WDGCounter += 5;
 170:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 174:	81 5f       	subi	r24, 0xF1	; 241
 176:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
            if (WDGCounter >= 20)
 17a:	84 31       	cpi	r24, 0x14	; 20
 17c:	78 f2       	brcs	.-98     	; 0x11c <main+0x8>
            {
                WDGCounter = 0;      // Reset count after calling WDGM_MainFunction()
 17e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
               WDGM_MainFunction(); // Call watchdog management every 20ms
 182:	0e 94 64 01 	call	0x2c8	; 0x2c8 <WDGM_MainFunction>
 186:	ca cf       	rjmp	.-108    	; 0x11c <main+0x8>

00000188 <WDGDrv_Init>:
    PORTB ^= (1 << 5); // to indicate the timer => 50ms
}

void WDGDrv_Init(void)
{
	SREG &= ~(1 << I); //Disable global interrupts
 188:	8f b7       	in	r24, 0x3f	; 63
 18a:	8f 77       	andi	r24, 0x7F	; 127
 18c:	8f bf       	out	0x3f, r24	; 63
    WDTCSR |= (1 << WDCE) | (1 << WDE); // Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 18e:	e0 e6       	ldi	r30, 0x60	; 96
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 61       	ori	r24, 0x18	; 24
 196:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP1)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	80 83       	st	Z, r24

    // CONFIG THE TIMER :
    TCCR1B |= (1 << WGM12); //CTC mode
 19c:	e1 e8       	ldi	r30, 0x81	; 129
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 60       	ori	r24, 0x08	; 8
 1a4:	80 83       	st	Z, r24

	// to achieve 50 ms timer => f_OCnA = f_clk_I/O / (2 * N * (1 + OCRnA)) 
	
	OCR1A = 815; // realize it from proteus
 1a6:	8f e2       	ldi	r24, 0x2F	; 47
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	// OCR1A = 780; //datasheet

	TIMSK1 |= (1 << OCIE1A); // Enable Timer Compare Interrupt
 1b2:	af e6       	ldi	r26, 0x6F	; 111
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	8c 91       	ld	r24, X
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11) | (1 << CS10); // Set the prescaler to 64
 1bc:	80 81       	ld	r24, Z
 1be:	83 60       	ori	r24, 0x03	; 3
 1c0:	80 83       	st	Z, r24
    SREG |= (1 << I); //enable global interrupts 
 1c2:	8f b7       	in	r24, 0x3f	; 63
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	8f bf       	out	0x3f, r24	; 63
}
 1c8:	08 95       	ret

000001ca <WDGDrv_IsrNotification>:

void WDGDrv_IsrNotification(void)
{

		WDGM_StatusType current_state = WDGM_PovideSuppervisionStatus();
 1ca:	0e 94 ce 01 	call	0x39c	; 0x39c <WDGM_PovideSuppervisionStatus>
		uint8 check  = ((!current_state) && (!stuck));
 1ce:	81 11       	cpse	r24, r1
 1d0:	12 c0       	rjmp	.+36     	; 0x1f6 <WDGDrv_IsrNotification+0x2c>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <stuck>
 1da:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <stuck+0x1>
 1de:	23 2b       	or	r18, r19
 1e0:	11 f0       	breq	.+4      	; 0x1e6 <WDGDrv_IsrNotification+0x1c>
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0

        if (check)
 1e6:	89 2b       	or	r24, r25
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <WDGDrv_IsrNotification+0x2c>
        {
            wdt_reset();
 1ea:	a8 95       	wdr
            PORTB ^= (1 <<1); // to indicate the perodicity refreshment of the wdt
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	89 27       	eor	r24, r25
        }
        else{
			// leave it to reset
			is_reset++;
            wdt_enable(WDTO_15MS);
            PORTB ^= (1 <<7); // to indicate the perodicity reset of the wdt
 1f2:	85 b9       	out	0x05, r24	; 5
        }


}
 1f4:	08 95       	ret
            wdt_reset();
            PORTB ^= (1 <<1); // to indicate the perodicity refreshment of the wdt
        }
        else{
			// leave it to reset
			is_reset++;
 1f6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <is_reset>
 1fa:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <is_reset+0x1>
 1fe:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <is_reset+0x2>
 202:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <is_reset+0x3>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	a1 1d       	adc	r26, r1
 20a:	b1 1d       	adc	r27, r1
 20c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <is_reset>
 210:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <is_reset+0x1>
 214:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <is_reset+0x2>
 218:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <is_reset+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 21c:	88 e1       	ldi	r24, 0x18	; 24
 21e:	98 e0       	ldi	r25, 0x08	; 8
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	a8 95       	wdr
 226:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
            wdt_enable(WDTO_15MS);
            PORTB ^= (1 <<7); // to indicate the perodicity reset of the wdt
 230:	85 b1       	in	r24, 0x05	; 5
 232:	80 58       	subi	r24, 0x80	; 128
 234:	de cf       	rjmp	.-68     	; 0x1f2 <WDGDrv_IsrNotification+0x28>

00000236 <__vector_11>:

extern stuck;
uint32 is_reset = 0;

ISR(TIMER1_COMPA_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
    WDGDrv_IsrNotification();
 258:	0e 94 e5 00 	call	0x1ca	; 0x1ca <WDGDrv_IsrNotification>
    PORTB ^= (1 << 5); // to indicate the timer => 50ms
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	90 e2       	ldi	r25, 0x20	; 32
 260:	89 27       	eor	r24, r25
 262:	85 b9       	out	0x05, r24	; 5
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <WDGM_Init>:
static volatile uint32 led_no_calls;
uint32 stuck;

void WDGM_Init(void)
{
    WDGDrv_Init();
 286:	0e 94 c4 00 	call	0x188	; 0x188 <WDGDrv_Init>
    status = OK;
 28a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <status>
    led_no_calls = 0;
 28e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <led_no_calls>
 292:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <led_no_calls+0x1>
 296:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls+0x2>
 29a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x3>
    stuck = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	a0 e0       	ldi	r26, 0x00	; 0
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <stuck>
 2aa:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <stuck+0x1>
 2ae:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <stuck+0x2>
 2b2:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <stuck+0x3>
    wdg_call_count_within_100_ms = 0;
 2b6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <wdg_call_count_within_100_ms>
 2ba:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <wdg_call_count_within_100_ms+0x1>
 2be:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <wdg_call_count_within_100_ms+0x2>
 2c2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <wdg_call_count_within_100_ms+0x3>
}
 2c6:	08 95       	ret

000002c8 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    stuck = 1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	a0 e0       	ldi	r26, 0x00	; 0
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <stuck>
 2d4:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <stuck+0x1>
 2d8:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <stuck+0x2>
 2dc:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <stuck+0x3>
    wdg_call_count_within_100_ms++;
 2e0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <wdg_call_count_within_100_ms>
 2e4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <wdg_call_count_within_100_ms+0x1>
 2e8:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <wdg_call_count_within_100_ms+0x2>
 2ec:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <wdg_call_count_within_100_ms+0x3>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	a1 1d       	adc	r26, r1
 2f4:	b1 1d       	adc	r27, r1
 2f6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <wdg_call_count_within_100_ms>
 2fa:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <wdg_call_count_within_100_ms+0x1>
 2fe:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <wdg_call_count_within_100_ms+0x2>
 302:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <wdg_call_count_within_100_ms+0x3>
    PORTB ^= (1 << 3);  // to indicate the perodicity of the function (20ms)
 306:	85 b1       	in	r24, 0x05	; 5
 308:	98 e0       	ldi	r25, 0x08	; 8
 30a:	89 27       	eor	r24, r25
 30c:	85 b9       	out	0x05, r24	; 5
    if(wdg_call_count_within_100_ms >= 5) // 5 * 20 == 100 ms
 30e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <wdg_call_count_within_100_ms>
 312:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <wdg_call_count_within_100_ms+0x1>
 316:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <wdg_call_count_within_100_ms+0x2>
 31a:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <wdg_call_count_within_100_ms+0x3>
 31e:	05 97       	sbiw	r24, 0x05	; 5
 320:	a1 05       	cpc	r26, r1
 322:	b1 05       	cpc	r27, r1
 324:	70 f1       	brcs	.+92     	; 0x382 <WDGM_MainFunction+0xba>
    {
        PORTB ^= (1 << 6); // to indicate the perodicity of the function(within 100ms)
 326:	85 b1       	in	r24, 0x05	; 5
 328:	90 e4       	ldi	r25, 0x40	; 64
 32a:	89 27       	eor	r24, r25
 32c:	85 b9       	out	0x05, r24	; 5
        if (((led_no_calls >= 8) && (led_no_calls <= 12))) // check no. of calls is between 8 and 12 or not
 32e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_no_calls>
 332:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <led_no_calls+0x1>
 336:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <led_no_calls+0x2>
 33a:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <led_no_calls+0x3>
 33e:	08 97       	sbiw	r24, 0x08	; 8
 340:	a1 05       	cpc	r26, r1
 342:	b1 05       	cpc	r27, r1
 344:	38 f1       	brcs	.+78     	; 0x394 <WDGM_MainFunction+0xcc>
 346:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_no_calls>
 34a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <led_no_calls+0x1>
 34e:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <led_no_calls+0x2>
 352:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <led_no_calls+0x3>
 356:	0d 97       	sbiw	r24, 0x0d	; 13
 358:	a1 05       	cpc	r26, r1
 35a:	b1 05       	cpc	r27, r1
 35c:	d8 f4       	brcc	.+54     	; 0x394 <WDGM_MainFunction+0xcc>
        {
            status = OK;
 35e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <status>
        }
        else
        {
            status = NOK;
        }
        led_no_calls = 0; // Reset the led_no_calls for the next 100ms period
 362:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <led_no_calls>
 366:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <led_no_calls+0x1>
 36a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls+0x2>
 36e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x3>
        wdg_call_count_within_100_ms = 0;   // return the wdg_call_count_within_100_ms for the next 100ms period
 372:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <wdg_call_count_within_100_ms>
 376:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <wdg_call_count_within_100_ms+0x1>
 37a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <wdg_call_count_within_100_ms+0x2>
 37e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <wdg_call_count_within_100_ms+0x3>
    }
    
    stuck = 0;
 382:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <stuck>
 386:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stuck+0x1>
 38a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <stuck+0x2>
 38e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <stuck+0x3>

}
 392:	08 95       	ret
        {
            status = OK;
        }
        else
        {
            status = NOK;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <status>
 39a:	e3 cf       	rjmp	.-58     	; 0x362 <WDGM_MainFunction+0x9a>

0000039c <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 39c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <status>
 3a0:	08 95       	ret

000003a2 <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 3a2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_no_calls>
 3a6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <led_no_calls+0x1>
 3aa:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <led_no_calls+0x2>
 3ae:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <led_no_calls+0x3>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_no_calls>
 3bc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <led_no_calls+0x1>
 3c0:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <led_no_calls+0x2>
 3c4:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <led_no_calls+0x3>
}
 3c8:	08 95       	ret

000003ca <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 3ca:	0e 94 28 02 	call	0x450	; 0x450 <GPIO_Init>
    led_state = 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <led_state>
	GPIO_Write(LED_PIN_ID, led_state);
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	0e 94 2b 02 	call	0x456	; 0x456 <GPIO_Write>
    time_counter = 0;
 3dc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter>
 3e0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x1>
 3e4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x2>
 3e8:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <time_counter+0x3>
}
 3ec:	08 95       	ret

000003ee <LEDM_Manage>:

void LEDM_Manage(void)
{   
    PORTB ^= (1 << 2); // to indicate the perodicity of the function (10ms)
 3ee:	85 b1       	in	r24, 0x05	; 5
 3f0:	94 e0       	ldi	r25, 0x04	; 4
 3f2:	89 27       	eor	r24, r25
 3f4:	85 b9       	out	0x05, r24	; 5
	time_counter += 10;
 3f6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <time_counter>
 3fa:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <time_counter+0x1>
 3fe:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <time_counter+0x2>
 402:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <time_counter+0x3>
 406:	0a 96       	adiw	r24, 0x0a	; 10
 408:	a1 1d       	adc	r26, r1
 40a:	b1 1d       	adc	r27, r1
 40c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <time_counter>
 410:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <time_counter+0x1>
 414:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <time_counter+0x2>
 418:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <time_counter+0x3>
//	 time_counter += 5;
	if (time_counter >= 500)
 41c:	84 3f       	cpi	r24, 0xF4	; 244
 41e:	91 40       	sbci	r25, 0x01	; 1
 420:	a1 05       	cpc	r26, r1
 422:	b1 05       	cpc	r27, r1
 424:	98 f0       	brcs	.+38     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
    {
		led_state = (led_state == 1) ? 0 : 1;
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <led_state>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	09 f4       	brne	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	0e 94 2b 02 	call	0x456	; 0x456 <GPIO_Write>
		time_counter = 0; // Reset the time counter for the next 500ms period
 43c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter>
 440:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x1>
 444:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x2>
 448:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <time_counter+0x3>
    }
  WDGM_AlivenessIndication(); // to count the number of function calls
 44c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <WDGM_AlivenessIndication>

00000450 <GPIO_Init>:
    gpioReg->DDR |= (1 << 2); // ledmange
    gpioReg->DDR |= (1 << 3); // WDG_main
    // gpioReg->DDR |= (1 << 4);  //led_toggle
    gpioReg->DDR |= (1 << 5); // timer
    gpioReg->DDR |= (1 << 6); // evey100ms
    gpioReg->DDR |= (1 << 7); // evey100ms
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	84 b9       	out	0x04, r24	; 4
}
 454:	08 95       	ret

00000456 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 456:	45 b1       	in	r20, 0x05	; 5
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	f9 01       	movw	r30, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <GPIO_Write+0xe>
 460:	ee 0f       	add	r30, r30
 462:	ff 1f       	adc	r31, r31
 464:	8a 95       	dec	r24
 466:	e2 f7       	brpl	.-8      	; 0x460 <GPIO_Write+0xa>
 468:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 46a:	66 23       	and	r22, r22
 46c:	19 f0       	breq	.+6      	; 0x474 <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 46e:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 470:	85 b9       	out	0x05, r24	; 5
    }
}
 472:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 474:	80 95       	com	r24
 476:	84 23       	and	r24, r20
 478:	fb cf       	rjmp	.-10     	; 0x470 <GPIO_Write+0x1a>

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
