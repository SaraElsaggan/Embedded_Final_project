
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000004e4  00000578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800112  00800112  0000058a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb6  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b31  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb3  00000000  00000000  000021fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007aa1  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000281  00000000  00000000  0000ad41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000afc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003028  00000000  00000000  0000b07a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 33       	cpi	r26, 0x35	; 53
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  9e:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Timer0_Init>:


void Timer0_Init(void)
{
    // Config the timer 
    TCCR0A = (1 << WGM01);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36

    // Set compare value for 1ms interrupt
    OCR0A = 15;
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	97 bd       	out	0x27, r25	; 39

    // Enable Timer Compare Interrupt
    TIMSK0 = (1 << OCIE0A);
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

    // Set prescaler to 64 and start Timer0 
    TCCR0B = (1 << CS01) | (1 << CS00);
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	85 bd       	out	0x25, r24	; 37

    SREG |= (1 << I);
  b6:	8f b7       	in	r24, 0x3f	; 63
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	8f bf       	out	0x3f, r24	; 63
}
  bc:	08 95       	ret

000000be <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
	current_time++; // Increment the time variable every 1ms
  d0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current_time>
  d4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current_time+0x1>
  d8:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <current_time+0x2>
  dc:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <current_time+0x3>
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	a1 1d       	adc	r26, r1
  e4:	b1 1d       	adc	r27, r1
  e6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <current_time>
  ea:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <current_time+0x1>
  ee:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <current_time+0x2>
  f2:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <current_time+0x3>
}
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <SysInit>:


void SysInit(void) {
    DDRB |= (1 << 0);  //reset
 108:	20 9a       	sbi	0x04, 0	; 4
    DDRB |= (1 << 2);  // ledmange
 10a:	22 9a       	sbi	0x04, 2	; 4
    DDRB |= (1 << 3);  //WDG_main
 10c:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1 << 4);  //refresh
 10e:	24 9a       	sbi	0x04, 4	; 4
    DDRB |= (1 << 5);  // timer
 110:	25 9a       	sbi	0x04, 5	; 4
    DDRB |= (1 << 6);  // evey100ms
 112:	26 9a       	sbi	0x04, 6	; 4
    DDRB |= (1 << 7);  // evey100ms
 114:	27 9a       	sbi	0x04, 7	; 4
    PORTB &= ~(1 << 0);
 116:	28 98       	cbi	0x05, 0	; 5
    GPIO_Init();
 118:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_Init>
    LEDM_Init();
 11c:	0e 94 1d 02 	call	0x43a	; 0x43a <LEDM_Init>
    WDGM_Init();
 120:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <WDGM_Init>
    WDGDrv_Init();
 124:	0e 94 ee 00 	call	0x1dc	; 0x1dc <WDGDrv_Init>
    Timer0_Init();
 128:	0c 94 53 00 	jmp	0xa6	; 0xa6 <Timer0_Init>

0000012c <main>:
}

int main(void) {    
    SysInit();
 12c:	0e 94 84 00 	call	0x108	; 0x108 <SysInit>
    PORTB |= (1 << 0); // to monitor the system reset     
 130:	28 9a       	sbi	0x05, 0	; 5

          if (WDGCounter >= 20) {
            // wdg_call_count_within_50_ms++;
            wdg_call_count_within_100_ms++;
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
            stuck = 1;
 132:	c1 2c       	mov	r12, r1
 134:	d1 2c       	mov	r13, r1
 136:	76 01       	movw	r14, r12
 138:	c3 94       	inc	r12
    SysInit();
    PORTB |= (1 << 0); // to monitor the system reset     
    
    while (1) {

        if ((current_time - time_at_last_10ms) >= 5)
 13a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current_time>
 13e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current_time+0x1>
 142:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <current_time+0x2>
 146:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <current_time+0x3>
 14a:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <time_at_last_10ms>
 14e:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <time_at_last_10ms+0x1>
 152:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <time_at_last_10ms+0x2>
 156:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <time_at_last_10ms+0x3>
 15a:	84 1b       	sub	r24, r20
 15c:	95 0b       	sbc	r25, r21
 15e:	a6 0b       	sbc	r26, r22
 160:	b7 0b       	sbc	r27, r23
 162:	05 97       	sbiw	r24, 0x05	; 5
 164:	a1 05       	cpc	r26, r1
 166:	b1 05       	cpc	r27, r1
 168:	40 f3       	brcs	.-48     	; 0x13a <main+0xe>
        {
            time_at_last_10ms = current_time;
 16a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current_time>
 16e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current_time+0x1>
 172:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <current_time+0x2>
 176:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <current_time+0x3>
 17a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <time_at_last_10ms>
 17e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <time_at_last_10ms+0x1>
 182:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <time_at_last_10ms+0x2>
 186:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <time_at_last_10ms+0x3>
            LEDM_Manage(); 
 18a:	0e 94 2e 02 	call	0x45c	; 0x45c <LEDM_Manage>
             WDGCounter+=5;
 18e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 192:	8b 5f       	subi	r24, 0xFB	; 251
 194:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>

          if (WDGCounter >= 20) {
 198:	84 31       	cpi	r24, 0x14	; 20
 19a:	78 f2       	brcs	.-98     	; 0x13a <main+0xe>
            // wdg_call_count_within_50_ms++;
            wdg_call_count_within_100_ms++;
 19c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <wdg_call_count_within_100_ms>
 1a0:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <wdg_call_count_within_100_ms+0x1>
 1a4:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <wdg_call_count_within_100_ms+0x2>
 1a8:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <wdg_call_count_within_100_ms+0x3>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	a1 1d       	adc	r26, r1
 1b0:	b1 1d       	adc	r27, r1
 1b2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <wdg_call_count_within_100_ms>
 1b6:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <wdg_call_count_within_100_ms+0x1>
 1ba:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <wdg_call_count_within_100_ms+0x2>
 1be:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <wdg_call_count_within_100_ms+0x3>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 1c2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
            stuck = 1;
 1c6:	c0 92 2d 01 	sts	0x012D, r12	; 0x80012d <stuck>
 1ca:	d0 92 2e 01 	sts	0x012E, r13	; 0x80012e <stuck+0x1>
 1ce:	e0 92 2f 01 	sts	0x012F, r14	; 0x80012f <stuck+0x2>
 1d2:	f0 92 30 01 	sts	0x0130, r15	; 0x800130 <stuck+0x3>
            WDGM_MainFunction();  // Call watchdog management every 20ms
 1d6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <WDGM_MainFunction>
 1da:	af cf       	rjmp	.-162    	; 0x13a <main+0xe>

000001dc <WDGDrv_Init>:


void WDGDrv_Init(void)
{
	/*Disable global interrupts*/
	SREG &= ~(1 << I);
 1dc:	8f b7       	in	r24, 0x3f	; 63
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	8f bf       	out	0x3f, r24	; 63

	/*reset the timer*/
	wdt_reset();
 1e2:	a8 95       	wdr

	// Clear the watchdog reset flag
	MCUSR &= (~(1 << WDRF));
 1e4:	84 b7       	in	r24, 0x34	; 52
 1e6:	87 7f       	andi	r24, 0xF7	; 247
 1e8:	84 bf       	out	0x34, r24	; 52

	/*set the watchdog change enable and system reset enable to 1 in the same instruction before making any changes, page 44*/
	WDTCSR |= (1 << WDCE) | (1 << WDE);
 1ea:	e0 e6       	ldi	r30, 0x60	; 96
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 61       	ori	r24, 0x18	; 24
 1f2:	80 83       	st	Z, r24

	/*enable system reset mode
	 * Set maximum time-out value = 8K cycles (~64 ms) by seting the watchdog timer prescale pins to 0010
	 */
	WDTCSR = (1 << WDE) | (1 << WDP1);
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	80 83       	st	Z, r24

	/*Normal port operation, OC1A/OC1B disconnected
	 * CTC mode*/
	TCCR1A = 0;
 1f8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>

	/*CTC mode
	 * 64ms prescale*/
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
 1fc:	8b e0       	ldi	r24, 0x0B	; 11
 1fe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	/* Set the compare value which achieves 50 ms timer
	 * compare value (no of pulses needed to reach the timeout) = (desired time/ time of one pulse) -1
	 * time of one pulse= ( prescale)/ freq of the clock
	 * */
	OCR1A = 815;
 202:	8f e2       	ldi	r24, 0x2F	; 47
 204:	93 e0       	ldi	r25, 0x03	; 3
 206:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 20a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// Enable timer1 output compare A match interrupt
	TIMSK1 = (1 << OCIE1A);
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	/*enable global interrupts by setting pinI in the AVR status register to 1*/
	SREG |= (1 << I);
 214:	8f b7       	in	r24, 0x3f	; 63
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8f bf       	out	0x3f, r24	; 63

}
 21a:	08 95       	ret

0000021c <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void)
{

		WDGM_StatusType wdgmStatus = WDGM_PovideSuppervisionStatus();
 21c:	0e 94 b6 01 	call	0x36c	; 0x36c <WDGM_PovideSuppervisionStatus>
		uint8 check  = ((!wdgmStatus) && (!stuck)); 
 220:	81 11       	cpse	r24, r1
 222:	25 c0       	rjmp	.+74     	; 0x26e <WDGDrv_IsrNotification+0x52>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <stuck>
 22c:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <stuck+0x1>
 230:	23 2b       	or	r18, r19
 232:	11 f0       	breq	.+4      	; 0x238 <WDGDrv_IsrNotification+0x1c>
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0

        if (check)
 238:	89 2b       	or	r24, r25
 23a:	c9 f0       	breq	.+50     	; 0x26e <WDGDrv_IsrNotification+0x52>
        {
            wdt_reset();
 23c:	a8 95       	wdr
            PORTB ^= (1 << 4); // to indicate the perodicity refreshment of the wdt
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	90 e1       	ldi	r25, 0x10	; 16
 242:	89 27       	eor	r24, r25
 244:	85 b9       	out	0x05, r24	; 5
			is_reset++;
 246:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <is_reset>
 24a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <is_reset+0x1>
 24e:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <is_reset+0x2>
 252:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <is_reset+0x3>
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	a1 1d       	adc	r26, r1
 25a:	b1 1d       	adc	r27, r1
 25c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <is_reset>
 260:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <is_reset+0x1>
 264:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <is_reset+0x2>
 268:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <is_reset+0x3>
 26c:	08 95       	ret
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 26e:	88 e1       	ldi	r24, 0x18	; 24
 270:	98 e0       	ldi	r25, 0x08	; 8
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	a8 95       	wdr
 278:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
        else{
            wdt_enable(WDTO_15MS);
        }


}
 282:	08 95       	ret

00000284 <__vector_11>:
extern stuck;
extern wdg_call_count_within_50_ms;
uint32 is_reset = 0;

ISR(TIMER1_COMPA_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
    WDGDrv_IsrNotification();
 2a6:	0e 94 0e 01 	call	0x21c	; 0x21c <WDGDrv_IsrNotification>
    PORTB ^= (1 << 5);
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	90 e2       	ldi	r25, 0x20	; 32
 2ae:	89 27       	eor	r24, r25
 2b0:	85 b9       	out	0x05, r24	; 5

}
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	bf 91       	pop	r27
 2b8:	af 91       	pop	r26
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	7f 91       	pop	r23
 2c0:	6f 91       	pop	r22
 2c2:	5f 91       	pop	r21
 2c4:	4f 91       	pop	r20
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <WDGM_Init>:
extern wdg_call_count_within_100_ms;
static volatile uint32 led_no_calls;
extern stuck;
void WDGM_Init(void)
{
    status = OK;
 2d4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <status>
    led_no_calls = 0;
 2d8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <led_no_calls>
 2dc:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <led_no_calls+0x1>
 2e0:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <led_no_calls+0x2>
 2e4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <led_no_calls+0x3>
    stuck = 0;
 2e8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <stuck+0x1>
 2ec:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <stuck>
}
 2f0:	08 95       	ret

000002f2 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    PORTB ^= (1 << 3); // to indicate the perodicity of the function
 2f2:	85 b1       	in	r24, 0x05	; 5
 2f4:	98 e0       	ldi	r25, 0x08	; 8
 2f6:	89 27       	eor	r24, r25
 2f8:	85 b9       	out	0x05, r24	; 5
    
    if(wdg_call_count_within_100_ms >= 5) // 5 * 20 == 100 ms
 2fa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <wdg_call_count_within_100_ms>
 2fe:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <wdg_call_count_within_100_ms+0x1>
 302:	05 97       	sbiw	r24, 0x05	; 5
 304:	54 f1       	brlt	.+84     	; 0x35a <WDGM_MainFunction+0x68>
    {
        PORTB ^= (1 << 6); // to indicate the perodicity of the function
 306:	85 b1       	in	r24, 0x05	; 5
 308:	90 e4       	ldi	r25, 0x40	; 64
 30a:	89 27       	eor	r24, r25
 30c:	85 b9       	out	0x05, r24	; 5
        // Check number of LEDM calls within 100ms
        if (((led_no_calls >= 8) && (led_no_calls <= 12))) // check no. of calls is between 8 and 12 or not
 30e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <led_no_calls>
 312:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <led_no_calls+0x1>
 316:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <led_no_calls+0x2>
 31a:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <led_no_calls+0x3>
 31e:	08 97       	sbiw	r24, 0x08	; 8
 320:	a1 05       	cpc	r26, r1
 322:	b1 05       	cpc	r27, r1
 324:	f8 f0       	brcs	.+62     	; 0x364 <WDGM_MainFunction+0x72>
 326:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <led_no_calls>
 32a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <led_no_calls+0x1>
 32e:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <led_no_calls+0x2>
 332:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <led_no_calls+0x3>
 336:	0d 97       	sbiw	r24, 0x0d	; 13
 338:	a1 05       	cpc	r26, r1
 33a:	b1 05       	cpc	r27, r1
 33c:	98 f4       	brcc	.+38     	; 0x364 <WDGM_MainFunction+0x72>
        {
            status = OK;
 33e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <status>
        }
        else
        {
            status = NOK;
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 342:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <led_no_calls>
 346:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <led_no_calls+0x1>
 34a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <led_no_calls+0x2>
 34e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <led_no_calls+0x3>
        wdg_call_count_within_100_ms = 0;   // return the call count for the next 100ms period
 352:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <wdg_call_count_within_100_ms+0x1>
 356:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <wdg_call_count_within_100_ms>
    }
    
    stuck = 0;
 35a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <stuck+0x1>
 35e:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <stuck>

}
 362:	08 95       	ret
        {
            status = OK;
        }
        else
        {
            status = NOK;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <status>
 36a:	eb cf       	rjmp	.-42     	; 0x342 <WDGM_MainFunction+0x50>

0000036c <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 36c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <status>
 370:	08 95       	ret

00000372 <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 372:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <led_no_calls>
 376:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <led_no_calls+0x1>
 37a:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <led_no_calls+0x2>
 37e:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <led_no_calls+0x3>
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	a1 1d       	adc	r26, r1
 386:	b1 1d       	adc	r27, r1
 388:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <led_no_calls>
 38c:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <led_no_calls+0x1>
 390:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <led_no_calls+0x2>
 394:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <led_no_calls+0x3>
}
 398:	08 95       	ret

0000039a <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 39a:	80 36       	cpi	r24, 0x60	; 96
 39c:	28 f5       	brcc	.+74     	; 0x3e8 <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 39e:	e8 2f       	mov	r30, r24
 3a0:	e2 95       	swap	r30
 3a2:	e6 95       	lsr	r30
 3a4:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	ee 0f       	add	r30, r30
 3aa:	ff 1f       	adc	r31, r31
 3ac:	ea 5f       	subi	r30, 0xFA	; 250
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	01 90       	ld	r0, Z+
 3b2:	f0 81       	ld	r31, Z
 3b4:	e0 2d       	mov	r30, r0
 3b6:	40 81       	ld	r20, Z
 3b8:	51 81       	ldd	r21, Z+1	; 0x01
 3ba:	62 81       	ldd	r22, Z+2	; 0x02
 3bc:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 3be:	98 2f       	mov	r25, r24
 3c0:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <Nvic_EnableInterrupt+0x32>
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	9a 95       	dec	r25
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <Nvic_EnableInterrupt+0x2e>
 3d0:	c9 01       	movw	r24, r18
 3d2:	33 0f       	add	r19, r19
 3d4:	aa 0b       	sbc	r26, r26
 3d6:	bb 0b       	sbc	r27, r27
 3d8:	84 2b       	or	r24, r20
 3da:	95 2b       	or	r25, r21
 3dc:	a6 2b       	or	r26, r22
 3de:	b7 2b       	or	r27, r23
 3e0:	80 83       	st	Z, r24
 3e2:	91 83       	std	Z+1, r25	; 0x01
 3e4:	a2 83       	std	Z+2, r26	; 0x02
 3e6:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 3e8:	08 95       	ret

000003ea <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 3ea:	80 36       	cpi	r24, 0x60	; 96
 3ec:	28 f5       	brcc	.+74     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 3ee:	e8 2f       	mov	r30, r24
 3f0:	e2 95       	swap	r30
 3f2:	e6 95       	lsr	r30
 3f4:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	e0 50       	subi	r30, 0x00	; 0
 3fe:	ff 4f       	sbci	r31, 0xFF	; 255
 400:	01 90       	ld	r0, Z+
 402:	f0 81       	ld	r31, Z
 404:	e0 2d       	mov	r30, r0
 406:	40 81       	ld	r20, Z
 408:	51 81       	ldd	r21, Z+1	; 0x01
 40a:	62 81       	ldd	r22, Z+2	; 0x02
 40c:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 40e:	98 2f       	mov	r25, r24
 410:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	22 0f       	add	r18, r18
 41a:	33 1f       	adc	r19, r19
 41c:	9a 95       	dec	r25
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	c9 01       	movw	r24, r18
 422:	33 0f       	add	r19, r19
 424:	aa 0b       	sbc	r26, r26
 426:	bb 0b       	sbc	r27, r27
 428:	84 2b       	or	r24, r20
 42a:	95 2b       	or	r25, r21
 42c:	a6 2b       	or	r26, r22
 42e:	b7 2b       	or	r27, r23
 430:	80 83       	st	Z, r24
 432:	91 83       	std	Z+1, r25	; 0x01
 434:	a2 83       	std	Z+2, r26	; 0x02
 436:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 438:	08 95       	ret

0000043a <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 43a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <GPIO_Init>
    led_state = 0;
 43e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <led_state>
	GPIO_Write(LED_PIN_ID, led_state);
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 5e 02 	call	0x4bc	; 0x4bc <GPIO_Write>
    time_counter = 0;
 44a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <time_counter>
 44e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <time_counter+0x1>
 452:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <time_counter+0x2>
 456:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <time_counter+0x3>
}
 45a:	08 95       	ret

0000045c <LEDM_Manage>:

void LEDM_Manage(void)
{   
    PORTB ^= (1 << 2); // to indicate the perodicity of the function
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	94 e0       	ldi	r25, 0x04	; 4
 460:	89 27       	eor	r24, r25
 462:	85 b9       	out	0x05, r24	; 5
	// time_counter += 10;
	time_counter += 5;
 464:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <time_counter>
 468:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <time_counter+0x1>
 46c:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <time_counter+0x2>
 470:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <time_counter+0x3>
 474:	05 96       	adiw	r24, 0x05	; 5
 476:	a1 1d       	adc	r26, r1
 478:	b1 1d       	adc	r27, r1
 47a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <time_counter>
 47e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <time_counter+0x1>
 482:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <time_counter+0x2>
 486:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <time_counter+0x3>

	if (time_counter >= 500)
 48a:	84 3f       	cpi	r24, 0xF4	; 244
 48c:	91 40       	sbci	r25, 0x01	; 1
 48e:	a1 05       	cpc	r26, r1
 490:	b1 05       	cpc	r27, r1
 492:	80 f0       	brcs	.+32     	; 0x4b4 <LEDM_Manage+0x58>
    {
		led_state = ~led_state;
 494:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <led_state>
 498:	60 95       	com	r22
 49a:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 5e 02 	call	0x4bc	; 0x4bc <GPIO_Write>
		time_counter = 0;
 4a4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <time_counter>
 4a8:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <time_counter+0x1>
 4ac:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <time_counter+0x2>
 4b0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <time_counter+0x3>
    }
  WDGM_AlivenessIndication(); // to count the number of function calls
 4b4:	0c 94 b9 01 	jmp	0x372	; 0x372 <WDGM_AlivenessIndication>

000004b8 <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 4b8:	21 9a       	sbi	0x04, 1	; 4

}
 4ba:	08 95       	ret

000004bc <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 4bc:	45 b1       	in	r20, 0x05	; 5
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	f9 01       	movw	r30, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <GPIO_Write+0xe>
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	8a 95       	dec	r24
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <GPIO_Write+0xa>
 4ce:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 4d0:	66 23       	and	r22, r22
 4d2:	19 f0       	breq	.+6      	; 0x4da <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 4d4:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 4d6:	85 b9       	out	0x05, r24	; 5
    }
}
 4d8:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 4da:	80 95       	com	r24
 4dc:	84 23       	and	r24, r20
 4de:	fb cf       	rjmp	.-10     	; 0x4d6 <GPIO_Write+0x1a>

000004e0 <_exit>:
 4e0:	f8 94       	cli

000004e2 <__stop_program>:
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__stop_program>
