
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000356  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000356  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800112  00800112  000003fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8d  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a76  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b04  00000000  00000000  00001e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007dc5  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a4  00000000  00000000  0000a8a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000aa49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e62  00000000  00000000  0000aae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  9e:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SysInit>:


uint32 call_count = 0;

int SysInit(void) {
    DDRB |= (1 << 0);
  a6:	b8 9a       	sbi	0x17, 0	; 23
    PORTB &= ~(1 << 0);
  a8:	c0 98       	cbi	0x18, 0	; 24
    GPIO_Init();
  aa:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_Init>
    LEDM_Init();
  ae:	0e 94 56 01 	call	0x2ac	; 0x2ac <LEDM_Init>
    WDGM_Init();
  b2:	0e 94 b0 00 	call	0x160	; 0x160 <WDGM_Init>
    WDGDrv_Init();
  b6:	0e 94 9b 00 	call	0x136	; 0x136 <WDGDrv_Init>
}
  ba:	08 95       	ret

000000bc <main>:

int main(void) {
    SysInit();
  bc:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
    static uint8 WDGCounter = 0;

    // Call WDGM_MainFunction for the first time
    WDGM_MainFunction();
  c0:	0e 94 bb 00 	call	0x176	; 0x176 <WDGM_MainFunction>
    // Main loop
    while (1) {
        LEDM_Manage();
  c4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LEDM_Manage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	83 ec       	ldi	r24, 0xC3	; 195
  ca:	99 e0       	ldi	r25, 0x09	; 9
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x10>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x16>
  d2:	00 00       	nop
        _delay_ms(10); // wait for 10ms to call LEDM_Manage again 

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        WDGCounter += 10; // Increment by the delay amount (10ms)
  d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  d8:	86 5f       	subi	r24, 0xF6	; 246
  da:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
  de:	84 31       	cpi	r24, 0x14	; 20
  e0:	88 f3       	brcs	.-30     	; 0xc4 <main+0x8>
            WDGM_MainFunction();  // Call watchdog management every 20ms
  e2:	0e 94 bb 00 	call	0x176	; 0x176 <WDGM_MainFunction>
            call_count ++;
  e6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count>
  ea:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count+0x1>
  ee:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <call_count+0x2>
  f2:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <call_count+0x3>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	a1 1d       	adc	r26, r1
  fa:	b1 1d       	adc	r27, r1
  fc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <call_count>
 100:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <call_count+0x1>
 104:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <call_count+0x2>
 108:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <call_count+0x3>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 10c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 110:	d9 cf       	rjmp	.-78     	; 0xc4 <main+0x8>

00000112 <__vector_11>:
#include <avr/wdt.h>
#include <avr/interrupt.h>

extern stuck;

ISR(TIMER1_COMPA_vect) {
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
    PORTB ^= (1 << 0); // Set PB0 high
 120:	85 b1       	in	r24, 0x05	; 5
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	89 27       	eor	r24, r25
 126:	85 b9       	out	0x05, r24	; 5
    // WDGDrv_IsrNotification();
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <WDGDrv_Init>:

void WDGDrv_Init(void) {

    //configure the timer
    TCCR1B |= (1 << WGM12);
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	80 83       	st	Z, r24
    OCR1A = 779;
 140:	8b e0       	ldi	r24, 0x0B	; 11
 142:	93 e0       	ldi	r25, 0x03	; 3
 144:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 148:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
 14c:	80 81       	ld	r24, Z
 14e:	83 60       	ori	r24, 0x03	; 3
 150:	80 83       	st	Z, r24
    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 152:	ef e6       	ldi	r30, 0x6F	; 111
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24

    // WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
    // WDTCSR =  (1 << WDE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
    sei(); // Enable global interrupts
 15c:	78 94       	sei
    // SREG |= (1 << I);
}
 15e:	08 95       	ret

00000160 <WDGM_Init>:
// uint8 stuck;
extern call_count;

void WDGM_Init(void)
{
    status = OK ;
 160:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <status>
    led_no_calls = 0;
 164:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 168:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 16c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 170:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
    stuck = m4_eshta;
}
 174:	08 95       	ret

00000176 <WDGM_MainFunction>:
void WDGM_MainFunction(void)
{
    // call_count ++;
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms 
    stuck = eshta;
    if (call_count <= 5) {
 176:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count>
 17a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count+0x1>
 17e:	06 97       	sbiw	r24, 0x06	; 6
 180:	fc f4       	brge	.+62     	; 0x1c0 <WDGM_MainFunction+0x4a>
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 182:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 186:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 18a:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 18e:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 192:	08 97       	sbiw	r24, 0x08	; 8
 194:	a1 05       	cpc	r26, r1
 196:	b1 05       	cpc	r27, r1
 198:	78 f0       	brcs	.+30     	; 0x1b8 <WDGM_MainFunction+0x42>
 19a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 19e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 1a2:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 1a6:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 1aa:	0d 97       	sbiw	r24, 0x0d	; 13
 1ac:	a1 05       	cpc	r26, r1
 1ae:	b1 05       	cpc	r27, r1
 1b0:	18 f4       	brcc	.+6      	; 0x1b8 <WDGM_MainFunction+0x42>
        { 
            status = OK;
 1b2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <status>
 1b6:	08 95       	ret
        } else {
            status = NOK;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <status>
 1be:	08 95       	ret
        }
    }else{
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 1c0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 1c4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 1c8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 1cc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
        call_count = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <call_count+0x1>
 1d8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <call_count>
    }
 
    stuck = m4_eshta;
}
 1dc:	08 95       	ret

000001de <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 1de:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <status>
 1e2:	08 95       	ret

000001e4 <WDGM_AlivenessIndication>:



void WDGM_AlivenessIndication(void)
{
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 1e4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 1e8:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 1ec:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 1f0:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	a1 1d       	adc	r26, r1
 1f8:	b1 1d       	adc	r27, r1
 1fa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <led_no_calls>
 1fe:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <led_no_calls+0x1>
 202:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <led_no_calls+0x2>
 206:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <led_no_calls+0x3>
 20a:	08 95       	ret

0000020c <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 20c:	80 36       	cpi	r24, 0x60	; 96
 20e:	28 f5       	brcc	.+74     	; 0x25a <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 210:	e8 2f       	mov	r30, r24
 212:	e2 95       	swap	r30
 214:	e6 95       	lsr	r30
 216:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ea 5f       	subi	r30, 0xFA	; 250
 220:	fe 4f       	sbci	r31, 0xFE	; 254
 222:	01 90       	ld	r0, Z+
 224:	f0 81       	ld	r31, Z
 226:	e0 2d       	mov	r30, r0
 228:	40 81       	ld	r20, Z
 22a:	51 81       	ldd	r21, Z+1	; 0x01
 22c:	62 81       	ldd	r22, Z+2	; 0x02
 22e:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 230:	98 2f       	mov	r25, r24
 232:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <Nvic_EnableInterrupt+0x32>
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	9a 95       	dec	r25
 240:	e2 f7       	brpl	.-8      	; 0x23a <Nvic_EnableInterrupt+0x2e>
 242:	c9 01       	movw	r24, r18
 244:	33 0f       	add	r19, r19
 246:	aa 0b       	sbc	r26, r26
 248:	bb 0b       	sbc	r27, r27
 24a:	84 2b       	or	r24, r20
 24c:	95 2b       	or	r25, r21
 24e:	a6 2b       	or	r26, r22
 250:	b7 2b       	or	r27, r23
 252:	80 83       	st	Z, r24
 254:	91 83       	std	Z+1, r25	; 0x01
 256:	a2 83       	std	Z+2, r26	; 0x02
 258:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 25a:	08 95       	ret

0000025c <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 25c:	80 36       	cpi	r24, 0x60	; 96
 25e:	28 f5       	brcc	.+74     	; 0x2aa <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 260:	e8 2f       	mov	r30, r24
 262:	e2 95       	swap	r30
 264:	e6 95       	lsr	r30
 266:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	e0 50       	subi	r30, 0x00	; 0
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	01 90       	ld	r0, Z+
 274:	f0 81       	ld	r31, Z
 276:	e0 2d       	mov	r30, r0
 278:	40 81       	ld	r20, Z
 27a:	51 81       	ldd	r21, Z+1	; 0x01
 27c:	62 81       	ldd	r22, Z+2	; 0x02
 27e:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 280:	98 2f       	mov	r25, r24
 282:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <Nvic_DisableInterrupt+0x32>
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	9a 95       	dec	r25
 290:	e2 f7       	brpl	.-8      	; 0x28a <Nvic_DisableInterrupt+0x2e>
 292:	c9 01       	movw	r24, r18
 294:	33 0f       	add	r19, r19
 296:	aa 0b       	sbc	r26, r26
 298:	bb 0b       	sbc	r27, r27
 29a:	84 2b       	or	r24, r20
 29c:	95 2b       	or	r25, r21
 29e:	a6 2b       	or	r26, r22
 2a0:	b7 2b       	or	r27, r23
 2a2:	80 83       	st	Z, r24
 2a4:	91 83       	std	Z+1, r25	; 0x01
 2a6:	a2 83       	std	Z+2, r26	; 0x02
 2a8:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 2aa:	08 95       	ret

000002ac <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 2ac:	0e 94 95 01 	call	0x32a	; 0x32a <GPIO_Init>
    led_state = 0;
 2b0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <led_state>
    time_counter = 0;
 2b4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <time_counter>
 2b8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <time_counter+0x1>
 2bc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_counter+0x2>
 2c0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter+0x3>
}
 2c4:	08 95       	ret

000002c6 <LEDM_Manage>:

void LEDM_Manage(void)
{
	if (time_counter == 500)
 2c6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <time_counter>
 2ca:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <time_counter+0x1>
 2ce:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <time_counter+0x2>
 2d2:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <time_counter+0x3>
 2d6:	84 3f       	cpi	r24, 0xF4	; 244
 2d8:	91 40       	sbci	r25, 0x01	; 1
 2da:	a1 05       	cpc	r26, r1
 2dc:	b1 05       	cpc	r27, r1
 2de:	81 f4       	brne	.+32     	; 0x300 <LEDM_Manage+0x3a>
    {
		led_state = ~led_state;
 2e0:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <led_state>
 2e4:	60 95       	com	r22
 2e6:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 97 01 	call	0x32e	; 0x32e <GPIO_Write>
		time_counter = 0;
 2f0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <time_counter>
 2f4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <time_counter+0x1>
 2f8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_counter+0x2>
 2fc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter+0x3>
    }
	time_counter += 10;
 300:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <time_counter>
 304:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <time_counter+0x1>
 308:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <time_counter+0x2>
 30c:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <time_counter+0x3>
 310:	0a 96       	adiw	r24, 0x0a	; 10
 312:	a1 1d       	adc	r26, r1
 314:	b1 1d       	adc	r27, r1
 316:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <time_counter>
 31a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <time_counter+0x1>
 31e:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <time_counter+0x2>
 322:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 326:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <WDGM_AlivenessIndication>

0000032a <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 32a:	21 9a       	sbi	0x04, 1	; 4

}
 32c:	08 95       	ret

0000032e <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 32e:	45 b1       	in	r20, 0x05	; 5
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <GPIO_Write+0xe>
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	8a 95       	dec	r24
 33e:	e2 f7       	brpl	.-8      	; 0x338 <GPIO_Write+0xa>
 340:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 342:	66 23       	and	r22, r22
 344:	19 f0       	breq	.+6      	; 0x34c <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 346:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 348:	85 b9       	out	0x05, r24	; 5
    }
}
 34a:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 34c:	80 95       	com	r24
 34e:	84 23       	and	r24, r20
 350:	fb cf       	rjmp	.-10     	; 0x348 <GPIO_Write+0x1a>

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
