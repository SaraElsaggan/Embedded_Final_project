
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000966  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000966  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800114  00800114  00000a0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc7  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  00001977  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a98  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00002dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000084f5  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fb  00000000  00000000  0000b591  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000ba8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e48  00000000  00000000  0000bb44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  9e:	0c 94 b1 04 	jmp	0x962	; 0x962 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_6>:
#include <avr/wdt.h>
#include <avr/interrupt.h>

int x = 0;

ISR(WDT_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	00 d0       	rcall	.+0      	; 0xc4 <__vector_6+0x1e>
  c4:	00 d0       	rcall	.+0      	; 0xc6 <__vector_6+0x20>
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
    x = 1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  d2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    PORTB |= (1 << 0); // Set PB0 high
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	20 81       	ld	r18, Z
  de:	85 e2       	ldi	r24, 0x25	; 37
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	21 60       	ori	r18, 0x01	; 1
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
    for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
  e8:	19 82       	std	Y+1, r1	; 0x01
  ea:	1a 82       	std	Y+2, r1	; 0x02
  ec:	1b 82       	std	Y+3, r1	; 0x03
  ee:	1c 82       	std	Y+4, r1	; 0x04
  f0:	0b c0       	rjmp	.+22     	; 0x108 <__vector_6+0x62>
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	ab 81       	ldd	r26, Y+3	; 0x03
  f8:	bc 81       	ldd	r27, Y+4	; 0x04
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	a1 1d       	adc	r26, r1
  fe:	b1 1d       	adc	r27, r1
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	ab 83       	std	Y+3, r26	; 0x03
 106:	bc 83       	std	Y+4, r27	; 0x04
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	ab 81       	ldd	r26, Y+3	; 0x03
 10e:	bc 81       	ldd	r27, Y+4	; 0x04
 110:	f0 cf       	rjmp	.-32     	; 0xf2 <__vector_6+0x4c>

00000112 <WDGDrv_Init>:
    // _delay_ms(1000); 
    WDTCSR = (1 << WDIE); 
}

void WDGDrv_Init(void) {
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << 0);
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	fc 01       	movw	r30, r24
 120:	20 81       	ld	r18, Z
 122:	84 e2       	ldi	r24, 0x24	; 36
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	21 60       	ori	r18, 0x01	; 1
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);
 12c:	85 e2       	ldi	r24, 0x25	; 37
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	20 81       	ld	r18, Z
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	2e 7f       	andi	r18, 0xFE	; 254
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
    cli();// Disable global interrupts
 13e:	f8 94       	cli
    // SREG &= ~(1 << I);
    // wdt_enable(2);
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	28 e1       	ldi	r18, 0x18	; 24
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
    WDTCSR =  (1 << WDE)|(1 << WDIE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 14a:	80 e6       	ldi	r24, 0x60	; 96
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	2a e4       	ldi	r18, 0x4A	; 74
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
    sei(); // Enable global interrupts
 154:	78 94       	sei
    // SREG |= (1 << I);
}
 156:	00 00       	nop
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <main>:

int main(void) {
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << 0);    // Set PB0 as output for the LED
 166:	84 e2       	ldi	r24, 0x24	; 36
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	20 81       	ld	r18, Z
 16e:	84 e2       	ldi	r24, 0x24	; 36
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	21 60       	ori	r18, 0x01	; 1
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);  // Ensure the LED is initially off
 178:	85 e2       	ldi	r24, 0x25	; 37
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	20 81       	ld	r18, Z
 180:	85 e2       	ldi	r24, 0x25	; 37
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	2e 7f       	andi	r18, 0xFE	; 254
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
    WDGDrv_Init();
 18a:	0e 94 89 00 	call	0x112	; 0x112 <WDGDrv_Init>
    // Main loop
    while (1) {
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x30>

00000190 <WDGM_Init>:
static uint32 start_time;
static uint32 current_time;
uint32 last_execution_time;

void WDGM_Init(void)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
    led_no_calls = 0;
 19e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 1a2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 1a6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 1aa:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
    //start_time = HAL_GetTick();
    start_time = 0;
 1ae:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <start_time>
 1b2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <start_time+0x1>
 1b6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <start_time+0x2>
 1ba:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <start_time+0x3>
    //last_execution_time = HAL_GetTick(); 

}
 1be:	00 00       	nop
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
    //uint32 current_time = HAL_GetTick(); // get current time value using hal lib in stm32f4xx_hal
    if ((current_time - start_time) <= 100) // check if it's within 100ms
 1d6:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <current_time>
 1da:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <current_time+0x1>
 1de:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <current_time+0x2>
 1e2:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <current_time+0x3>
 1e6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <start_time>
 1ea:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <start_time+0x1>
 1ee:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <start_time+0x2>
 1f2:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <start_time+0x3>
 1f6:	79 01       	movw	r14, r18
 1f8:	8a 01       	movw	r16, r20
 1fa:	e8 1a       	sub	r14, r24
 1fc:	f9 0a       	sbc	r15, r25
 1fe:	0a 0b       	sbc	r16, r26
 200:	1b 0b       	sbc	r17, r27
 202:	d8 01       	movw	r26, r16
 204:	c7 01       	movw	r24, r14
 206:	85 36       	cpi	r24, 0x65	; 101
 208:	91 05       	cpc	r25, r1
 20a:	a1 05       	cpc	r26, r1
 20c:	b1 05       	cpc	r27, r1
 20e:	b0 f5       	brcc	.+108    	; 0x27c <WDGM_MainFunction+0xb6>
    {
        if (led_no_calls >= 8 && led_no_calls <= 12) { // check no. of calls is between 8 and 12 or not
 210:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 214:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 218:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 21c:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 220:	08 97       	sbiw	r24, 0x08	; 8
 222:	a1 05       	cpc	r26, r1
 224:	b1 05       	cpc	r27, r1
 226:	78 f0       	brcs	.+30     	; 0x246 <WDGM_MainFunction+0x80>
 228:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 22c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 230:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 234:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 238:	0d 97       	sbiw	r24, 0x0d	; 13
 23a:	a1 05       	cpc	r26, r1
 23c:	b1 05       	cpc	r27, r1
 23e:	18 f4       	brcc	.+6      	; 0x246 <WDGM_MainFunction+0x80>
            status = OK;
 240:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <status>
 244:	03 c0       	rjmp	.+6      	; 0x24c <WDGM_MainFunction+0x86>
        } else {
            status = NOK;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 24c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 250:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 254:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 258:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
        start_time = current_time; // update start time for the next 100ms period
 25c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <current_time>
 260:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <current_time+0x1>
 264:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <current_time+0x2>
 268:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <current_time+0x3>
 26c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <start_time>
 270:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <start_time+0x1>
 274:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <start_time+0x2>
 278:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <start_time+0x3>
    }
    last_execution_time = current_time;
 27c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <current_time>
 280:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <current_time+0x1>
 284:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <current_time+0x2>
 288:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <current_time+0x3>
 28c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <last_execution_time>
 290:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <last_execution_time+0x1>
 294:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <last_execution_time+0x2>
 298:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <last_execution_time+0x3>
}
 29c:	00 00       	nop
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	08 95       	ret

000002ac <WDGM_PovideSuppervisionStatus>:

WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 2b4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <status>
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void)
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 2c6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 2ca:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 2ce:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 2d2:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	a1 1d       	adc	r26, r1
 2da:	b1 1d       	adc	r27, r1
 2dc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <led_no_calls>
 2e0:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <led_no_calls+0x1>
 2e4:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <led_no_calls+0x2>
 2e8:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <led_no_calls+0x3>
}
 2ec:	00 00       	nop
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <Rcc_Init>:

#include "Bit_Operations.h"
#include "Rcc_Private.h"
#include "Std_Types.h"

void Rcc_Init(void) {
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(RCC_CR, 0);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	98 e3       	ldi	r25, 0x38	; 56
 300:	fc 01       	movw	r30, r24
 302:	80 81       	ld	r24, Z
 304:	91 81       	ldd	r25, Z+1	; 0x01
 306:	a2 81       	ldd	r26, Z+2	; 0x02
 308:	b3 81       	ldd	r27, Z+3	; 0x03
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	38 e3       	ldi	r19, 0x38	; 56
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	f9 01       	movw	r30, r18
 312:	80 83       	st	Z, r24
 314:	91 83       	std	Z+1, r25	; 0x01
 316:	a2 83       	std	Z+2, r26	; 0x02
 318:	b3 83       	std	Z+3, r27	; 0x03
//	RCC_CFGR |= (0x0A << 4); // 8MHz internal
}
 31a:	00 00       	nop
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <Rcc_Enable>:

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	00 d0       	rcall	.+0      	; 0x328 <Rcc_Enable+0x6>
 328:	1f 92       	push	r1
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	8b 83       	std	Y+3, r24	; 0x03
  uint8 BusId = PeripheralId / 32;
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	82 95       	swap	r24
 334:	86 95       	lsr	r24
 336:	87 70       	andi	r24, 0x07	; 7
 338:	89 83       	std	Y+1, r24	; 0x01
  uint8 PeripheralBitPosition = PeripheralId % 32;
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	8f 71       	andi	r24, 0x1F	; 31
 33e:	8a 83       	std	Y+2, r24	; 0x02
  switch (BusId) {
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	88 2f       	mov	r24, r24
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 05       	cpc	r25, r1
 34a:	79 f1       	breq	.+94     	; 0x3aa <Rcc_Enable+0x88>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	91 05       	cpc	r25, r1
 350:	1c f4       	brge	.+6      	; 0x358 <Rcc_Enable+0x36>
 352:	89 2b       	or	r24, r25
 354:	49 f0       	breq	.+18     	; 0x368 <Rcc_Enable+0x46>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
      break;
    default:
      break;
 356:	8c c0       	rjmp	.+280    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
}

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
  uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	91 05       	cpc	r25, r1
 35c:	09 f4       	brne	.+2      	; 0x360 <Rcc_Enable+0x3e>
 35e:	46 c0       	rjmp	.+140    	; 0x3ec <Rcc_Enable+0xca>
 360:	03 97       	sbiw	r24, 0x03	; 3
 362:	09 f4       	brne	.+2      	; 0x366 <Rcc_Enable+0x44>
 364:	64 c0       	rjmp	.+200    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
      break;
    default:
      break;
 366:	84 c0       	rjmp	.+264    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
  uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
    case RCC_AHB1:
      SET_BIT(RCC_AHB1ENR, PeripheralBitPosition);
 368:	80 e3       	ldi	r24, 0x30	; 48
 36a:	98 e3       	ldi	r25, 0x38	; 56
 36c:	fc 01       	movw	r30, r24
 36e:	20 81       	ld	r18, Z
 370:	31 81       	ldd	r19, Z+1	; 0x01
 372:	42 81       	ldd	r20, Z+2	; 0x02
 374:	53 81       	ldd	r21, Z+3	; 0x03
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	68 2f       	mov	r22, r24
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <Rcc_Enable+0x64>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <Rcc_Enable+0x60>
 38a:	09 2e       	mov	r0, r25
 38c:	00 0c       	add	r0, r0
 38e:	aa 0b       	sbc	r26, r26
 390:	bb 0b       	sbc	r27, r27
 392:	60 e3       	ldi	r22, 0x30	; 48
 394:	78 e3       	ldi	r23, 0x38	; 56
 396:	82 2b       	or	r24, r18
 398:	93 2b       	or	r25, r19
 39a:	a4 2b       	or	r26, r20
 39c:	b5 2b       	or	r27, r21
 39e:	fb 01       	movw	r30, r22
 3a0:	80 83       	st	Z, r24
 3a2:	91 83       	std	Z+1, r25	; 0x01
 3a4:	a2 83       	std	Z+2, r26	; 0x02
 3a6:	b3 83       	std	Z+3, r27	; 0x03
      break;
 3a8:	63 c0       	rjmp	.+198    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2ENR, PeripheralBitPosition);
 3aa:	84 e3       	ldi	r24, 0x34	; 52
 3ac:	98 e3       	ldi	r25, 0x38	; 56
 3ae:	fc 01       	movw	r30, r24
 3b0:	20 81       	ld	r18, Z
 3b2:	31 81       	ldd	r19, Z+1	; 0x01
 3b4:	42 81       	ldd	r20, Z+2	; 0x02
 3b6:	53 81       	ldd	r21, Z+3	; 0x03
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	68 2f       	mov	r22, r24
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <Rcc_Enable+0xa6>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <Rcc_Enable+0xa2>
 3cc:	09 2e       	mov	r0, r25
 3ce:	00 0c       	add	r0, r0
 3d0:	aa 0b       	sbc	r26, r26
 3d2:	bb 0b       	sbc	r27, r27
 3d4:	64 e3       	ldi	r22, 0x34	; 52
 3d6:	78 e3       	ldi	r23, 0x38	; 56
 3d8:	82 2b       	or	r24, r18
 3da:	93 2b       	or	r25, r19
 3dc:	a4 2b       	or	r26, r20
 3de:	b5 2b       	or	r27, r21
 3e0:	fb 01       	movw	r30, r22
 3e2:	80 83       	st	Z, r24
 3e4:	91 83       	std	Z+1, r25	; 0x01
 3e6:	a2 83       	std	Z+2, r26	; 0x02
 3e8:	b3 83       	std	Z+3, r27	; 0x03
      break;
 3ea:	42 c0       	rjmp	.+132    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
    case RCC_APB1:
      SET_BIT(RCC_APB1ENR, PeripheralBitPosition);
 3ec:	80 e4       	ldi	r24, 0x40	; 64
 3ee:	98 e3       	ldi	r25, 0x38	; 56
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 81       	ld	r18, Z
 3f4:	31 81       	ldd	r19, Z+1	; 0x01
 3f6:	42 81       	ldd	r20, Z+2	; 0x02
 3f8:	53 81       	ldd	r21, Z+3	; 0x03
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	68 2f       	mov	r22, r24
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	09 2e       	mov	r0, r25
 410:	00 0c       	add	r0, r0
 412:	aa 0b       	sbc	r26, r26
 414:	bb 0b       	sbc	r27, r27
 416:	60 e4       	ldi	r22, 0x40	; 64
 418:	78 e3       	ldi	r23, 0x38	; 56
 41a:	82 2b       	or	r24, r18
 41c:	93 2b       	or	r25, r19
 41e:	a4 2b       	or	r26, r20
 420:	b5 2b       	or	r27, r21
 422:	fb 01       	movw	r30, r22
 424:	80 83       	st	Z, r24
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	a2 83       	std	Z+2, r26	; 0x02
 42a:	b3 83       	std	Z+3, r27	; 0x03
      break;
 42c:	21 c0       	rjmp	.+66     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
 42e:	84 e4       	ldi	r24, 0x44	; 68
 430:	98 e3       	ldi	r25, 0x38	; 56
 432:	fc 01       	movw	r30, r24
 434:	20 81       	ld	r18, Z
 436:	31 81       	ldd	r19, Z+1	; 0x01
 438:	42 81       	ldd	r20, Z+2	; 0x02
 43a:	53 81       	ldd	r21, Z+3	; 0x03
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	68 2f       	mov	r22, r24
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	09 2e       	mov	r0, r25
 452:	00 0c       	add	r0, r0
 454:	aa 0b       	sbc	r26, r26
 456:	bb 0b       	sbc	r27, r27
 458:	64 e4       	ldi	r22, 0x44	; 68
 45a:	78 e3       	ldi	r23, 0x38	; 56
 45c:	82 2b       	or	r24, r18
 45e:	93 2b       	or	r25, r19
 460:	a4 2b       	or	r26, r20
 462:	b5 2b       	or	r27, r21
 464:	fb 01       	movw	r30, r22
 466:	80 83       	st	Z, r24
 468:	91 83       	std	Z+1, r25	; 0x01
 46a:	a2 83       	std	Z+2, r26	; 0x02
 46c:	b3 83       	std	Z+3, r27	; 0x03
      break;
 46e:	00 00       	nop
    default:
      break;
  }
}
 470:	00 00       	nop
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <Rcc_Disable>:

void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	00 d0       	rcall	.+0      	; 0x484 <Rcc_Disable+0x6>
 484:	1f 92       	push	r1
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	8b 83       	std	Y+3, r24	; 0x03
     uint8 BusId = PeripheralId / 32;
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	82 95       	swap	r24
 490:	86 95       	lsr	r24
 492:	87 70       	andi	r24, 0x07	; 7
 494:	89 83       	std	Y+1, r24	; 0x01
  uint8 PeripheralBitPosition = PeripheralId % 32;
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	8f 71       	andi	r24, 0x1F	; 31
 49a:	8a 83       	std	Y+2, r24	; 0x02
  switch (BusId) {
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	91 05       	cpc	r25, r1
 4a6:	79 f1       	breq	.+94     	; 0x506 <Rcc_Disable+0x88>
 4a8:	82 30       	cpi	r24, 0x02	; 2
 4aa:	91 05       	cpc	r25, r1
 4ac:	1c f4       	brge	.+6      	; 0x4b4 <Rcc_Disable+0x36>
 4ae:	89 2b       	or	r24, r25
 4b0:	49 f0       	breq	.+18     	; 0x4c4 <Rcc_Disable+0x46>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
      break;
    default:
      break;
 4b2:	8c c0       	rjmp	.+280    	; 0x5cc <Rcc_Disable+0x14e>
}

void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
     uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	91 05       	cpc	r25, r1
 4b8:	09 f4       	brne	.+2      	; 0x4bc <Rcc_Disable+0x3e>
 4ba:	46 c0       	rjmp	.+140    	; 0x548 <Rcc_Disable+0xca>
 4bc:	03 97       	sbiw	r24, 0x03	; 3
 4be:	09 f4       	brne	.+2      	; 0x4c2 <Rcc_Disable+0x44>
 4c0:	64 c0       	rjmp	.+200    	; 0x58a <Rcc_Disable+0x10c>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
      break;
    default:
      break;
 4c2:	84 c0       	rjmp	.+264    	; 0x5cc <Rcc_Disable+0x14e>
void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
     uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
    case RCC_AHB1:
      SET_BIT(RCC_AHB1RSTR, PeripheralBitPosition);
 4c4:	80 e1       	ldi	r24, 0x10	; 16
 4c6:	98 e3       	ldi	r25, 0x38	; 56
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 81       	ld	r18, Z
 4cc:	31 81       	ldd	r19, Z+1	; 0x01
 4ce:	42 81       	ldd	r20, Z+2	; 0x02
 4d0:	53 81       	ldd	r21, Z+3	; 0x03
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	68 2f       	mov	r22, r24
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <Rcc_Disable+0x64>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <Rcc_Disable+0x60>
 4e6:	09 2e       	mov	r0, r25
 4e8:	00 0c       	add	r0, r0
 4ea:	aa 0b       	sbc	r26, r26
 4ec:	bb 0b       	sbc	r27, r27
 4ee:	60 e1       	ldi	r22, 0x10	; 16
 4f0:	78 e3       	ldi	r23, 0x38	; 56
 4f2:	82 2b       	or	r24, r18
 4f4:	93 2b       	or	r25, r19
 4f6:	a4 2b       	or	r26, r20
 4f8:	b5 2b       	or	r27, r21
 4fa:	fb 01       	movw	r30, r22
 4fc:	80 83       	st	Z, r24
 4fe:	91 83       	std	Z+1, r25	; 0x01
 500:	a2 83       	std	Z+2, r26	; 0x02
 502:	b3 83       	std	Z+3, r27	; 0x03
      break;
 504:	63 c0       	rjmp	.+198    	; 0x5cc <Rcc_Disable+0x14e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2RSTR, PeripheralBitPosition);
 506:	84 e1       	ldi	r24, 0x14	; 20
 508:	98 e3       	ldi	r25, 0x38	; 56
 50a:	fc 01       	movw	r30, r24
 50c:	20 81       	ld	r18, Z
 50e:	31 81       	ldd	r19, Z+1	; 0x01
 510:	42 81       	ldd	r20, Z+2	; 0x02
 512:	53 81       	ldd	r21, Z+3	; 0x03
 514:	8a 81       	ldd	r24, Y+2	; 0x02
 516:	68 2f       	mov	r22, r24
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <Rcc_Disable+0xa6>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <Rcc_Disable+0xa2>
 528:	09 2e       	mov	r0, r25
 52a:	00 0c       	add	r0, r0
 52c:	aa 0b       	sbc	r26, r26
 52e:	bb 0b       	sbc	r27, r27
 530:	64 e1       	ldi	r22, 0x14	; 20
 532:	78 e3       	ldi	r23, 0x38	; 56
 534:	82 2b       	or	r24, r18
 536:	93 2b       	or	r25, r19
 538:	a4 2b       	or	r26, r20
 53a:	b5 2b       	or	r27, r21
 53c:	fb 01       	movw	r30, r22
 53e:	80 83       	st	Z, r24
 540:	91 83       	std	Z+1, r25	; 0x01
 542:	a2 83       	std	Z+2, r26	; 0x02
 544:	b3 83       	std	Z+3, r27	; 0x03
      break;
 546:	42 c0       	rjmp	.+132    	; 0x5cc <Rcc_Disable+0x14e>
    case RCC_APB1:
      SET_BIT(RCC_APB1RSTR, PeripheralBitPosition);
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	98 e3       	ldi	r25, 0x38	; 56
 54c:	fc 01       	movw	r30, r24
 54e:	20 81       	ld	r18, Z
 550:	31 81       	ldd	r19, Z+1	; 0x01
 552:	42 81       	ldd	r20, Z+2	; 0x02
 554:	53 81       	ldd	r21, Z+3	; 0x03
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	68 2f       	mov	r22, r24
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <Rcc_Disable+0xe8>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <Rcc_Disable+0xe4>
 56a:	09 2e       	mov	r0, r25
 56c:	00 0c       	add	r0, r0
 56e:	aa 0b       	sbc	r26, r26
 570:	bb 0b       	sbc	r27, r27
 572:	60 e2       	ldi	r22, 0x20	; 32
 574:	78 e3       	ldi	r23, 0x38	; 56
 576:	82 2b       	or	r24, r18
 578:	93 2b       	or	r25, r19
 57a:	a4 2b       	or	r26, r20
 57c:	b5 2b       	or	r27, r21
 57e:	fb 01       	movw	r30, r22
 580:	80 83       	st	Z, r24
 582:	91 83       	std	Z+1, r25	; 0x01
 584:	a2 83       	std	Z+2, r26	; 0x02
 586:	b3 83       	std	Z+3, r27	; 0x03
      break;
 588:	21 c0       	rjmp	.+66     	; 0x5cc <Rcc_Disable+0x14e>
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
 58a:	84 e2       	ldi	r24, 0x24	; 36
 58c:	98 e3       	ldi	r25, 0x38	; 56
 58e:	fc 01       	movw	r30, r24
 590:	20 81       	ld	r18, Z
 592:	31 81       	ldd	r19, Z+1	; 0x01
 594:	42 81       	ldd	r20, Z+2	; 0x02
 596:	53 81       	ldd	r21, Z+3	; 0x03
 598:	8a 81       	ldd	r24, Y+2	; 0x02
 59a:	68 2f       	mov	r22, r24
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <Rcc_Disable+0x12a>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	6a 95       	dec	r22
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <Rcc_Disable+0x126>
 5ac:	09 2e       	mov	r0, r25
 5ae:	00 0c       	add	r0, r0
 5b0:	aa 0b       	sbc	r26, r26
 5b2:	bb 0b       	sbc	r27, r27
 5b4:	64 e2       	ldi	r22, 0x24	; 36
 5b6:	78 e3       	ldi	r23, 0x38	; 56
 5b8:	82 2b       	or	r24, r18
 5ba:	93 2b       	or	r25, r19
 5bc:	a4 2b       	or	r26, r20
 5be:	b5 2b       	or	r27, r21
 5c0:	fb 01       	movw	r30, r22
 5c2:	80 83       	st	Z, r24
 5c4:	91 83       	std	Z+1, r25	; 0x01
 5c6:	a2 83       	std	Z+2, r26	; 0x02
 5c8:	b3 83       	std	Z+3, r27	; 0x03
      break;
 5ca:	00 00       	nop
    default:
      break;
  }
}
 5cc:	00 00       	nop
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <Nvic_EnableInterrupt+0x6>
 5e0:	1f 92       	push	r1
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
 5e6:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	80 36       	cpi	r24, 0x60	; 96
 5ec:	c0 f5       	brcc	.+112    	; 0x65e <Nvic_EnableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	82 95       	swap	r24
 5f2:	86 95       	lsr	r24
 5f4:	87 70       	andi	r24, 0x07	; 7
 5f6:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 5f8:	8b 81       	ldd	r24, Y+3	; 0x03
 5fa:	8f 71       	andi	r24, 0x1F	; 31
 5fc:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	88 2f       	mov	r24, r24
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	80 50       	subi	r24, 0x00	; 0
 60a:	9f 4f       	sbci	r25, 0xFF	; 255
 60c:	fc 01       	movw	r30, r24
 60e:	80 81       	ld	r24, Z
 610:	91 81       	ldd	r25, Z+1	; 0x01
 612:	fc 01       	movw	r30, r24
 614:	20 81       	ld	r18, Z
 616:	31 81       	ldd	r19, Z+1	; 0x01
 618:	42 81       	ldd	r20, Z+2	; 0x02
 61a:	53 81       	ldd	r21, Z+3	; 0x03
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	68 2f       	mov	r22, r24
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <Nvic_EnableInterrupt+0x52>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <Nvic_EnableInterrupt+0x4e>
 630:	09 2e       	mov	r0, r25
 632:	00 0c       	add	r0, r0
 634:	aa 0b       	sbc	r26, r26
 636:	bb 0b       	sbc	r27, r27
 638:	69 81       	ldd	r22, Y+1	; 0x01
 63a:	66 2f       	mov	r22, r22
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	66 0f       	add	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	60 50       	subi	r22, 0x00	; 0
 644:	7f 4f       	sbci	r23, 0xFF	; 255
 646:	fb 01       	movw	r30, r22
 648:	60 81       	ld	r22, Z
 64a:	71 81       	ldd	r23, Z+1	; 0x01
 64c:	82 2b       	or	r24, r18
 64e:	93 2b       	or	r25, r19
 650:	a4 2b       	or	r26, r20
 652:	b5 2b       	or	r27, r21
 654:	fb 01       	movw	r30, r22
 656:	80 83       	st	Z, r24
 658:	91 83       	std	Z+1, r25	; 0x01
 65a:	a2 83       	std	Z+2, r26	; 0x02
 65c:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 65e:	00 00       	nop
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	00 d0       	rcall	.+0      	; 0x672 <Nvic_DisableInterrupt+0x6>
 672:	1f 92       	push	r1
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	80 36       	cpi	r24, 0x60	; 96
 67e:	c0 f5       	brcc	.+112    	; 0x6f0 <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	82 95       	swap	r24
 684:	86 95       	lsr	r24
 686:	87 70       	andi	r24, 0x07	; 7
 688:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 68a:	8b 81       	ldd	r24, Y+3	; 0x03
 68c:	8f 71       	andi	r24, 0x1F	; 31
 68e:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 690:	89 81       	ldd	r24, Y+1	; 0x01
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	8a 5f       	subi	r24, 0xFA	; 250
 69c:	9e 4f       	sbci	r25, 0xFE	; 254
 69e:	fc 01       	movw	r30, r24
 6a0:	80 81       	ld	r24, Z
 6a2:	91 81       	ldd	r25, Z+1	; 0x01
 6a4:	fc 01       	movw	r30, r24
 6a6:	20 81       	ld	r18, Z
 6a8:	31 81       	ldd	r19, Z+1	; 0x01
 6aa:	42 81       	ldd	r20, Z+2	; 0x02
 6ac:	53 81       	ldd	r21, Z+3	; 0x03
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	68 2f       	mov	r22, r24
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <Nvic_DisableInterrupt+0x52>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <Nvic_DisableInterrupt+0x4e>
 6c2:	09 2e       	mov	r0, r25
 6c4:	00 0c       	add	r0, r0
 6c6:	aa 0b       	sbc	r26, r26
 6c8:	bb 0b       	sbc	r27, r27
 6ca:	69 81       	ldd	r22, Y+1	; 0x01
 6cc:	66 2f       	mov	r22, r22
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	6a 5f       	subi	r22, 0xFA	; 250
 6d6:	7e 4f       	sbci	r23, 0xFE	; 254
 6d8:	fb 01       	movw	r30, r22
 6da:	60 81       	ld	r22, Z
 6dc:	71 81       	ldd	r23, Z+1	; 0x01
 6de:	82 2b       	or	r24, r18
 6e0:	93 2b       	or	r25, r19
 6e2:	a4 2b       	or	r26, r20
 6e4:	b5 2b       	or	r27, r21
 6e6:	fb 01       	movw	r30, r22
 6e8:	80 83       	st	Z, r24
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	a2 83       	std	Z+2, r26	; 0x02
 6ee:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 6f0:	00 00       	nop
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	0f 90       	pop	r0
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <delay>:
#include "WDGM.h"
#include "WDGDrv.h"

static uint8 led_state;

static void delay(uint32 time){
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	28 97       	sbiw	r28, 0x08	; 8
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
 712:	6d 83       	std	Y+5, r22	; 0x05
 714:	7e 83       	std	Y+6, r23	; 0x06
 716:	8f 83       	std	Y+7, r24	; 0x07
 718:	98 87       	std	Y+8, r25	; 0x08
    volatile uint32 i;
    time *= 1000;
 71a:	2d 81       	ldd	r18, Y+5	; 0x05
 71c:	3e 81       	ldd	r19, Y+6	; 0x06
 71e:	4f 81       	ldd	r20, Y+7	; 0x07
 720:	58 85       	ldd	r21, Y+8	; 0x08
 722:	88 ee       	ldi	r24, 0xE8	; 232
 724:	93 e0       	ldi	r25, 0x03	; 3
 726:	dc 01       	movw	r26, r24
 728:	0e 94 97 04 	call	0x92e	; 0x92e <__muluhisi3>
 72c:	dc 01       	movw	r26, r24
 72e:	cb 01       	movw	r24, r22
 730:	8d 83       	std	Y+5, r24	; 0x05
 732:	9e 83       	std	Y+6, r25	; 0x06
 734:	af 83       	std	Y+7, r26	; 0x07
 736:	b8 87       	std	Y+8, r27	; 0x08
    //  watchdog_refresh();
    for ( i = 0 ; i<time;i++){
 738:	19 82       	std	Y+1, r1	; 0x01
 73a:	1a 82       	std	Y+2, r1	; 0x02
 73c:	1b 82       	std	Y+3, r1	; 0x03
 73e:	1c 82       	std	Y+4, r1	; 0x04
 740:	0b c0       	rjmp	.+22     	; 0x758 <delay+0x5a>
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	9a 81       	ldd	r25, Y+2	; 0x02
 746:	ab 81       	ldd	r26, Y+3	; 0x03
 748:	bc 81       	ldd	r27, Y+4	; 0x04
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	a1 1d       	adc	r26, r1
 74e:	b1 1d       	adc	r27, r1
 750:	89 83       	std	Y+1, r24	; 0x01
 752:	9a 83       	std	Y+2, r25	; 0x02
 754:	ab 83       	std	Y+3, r26	; 0x03
 756:	bc 83       	std	Y+4, r27	; 0x04
 758:	89 81       	ldd	r24, Y+1	; 0x01
 75a:	9a 81       	ldd	r25, Y+2	; 0x02
 75c:	ab 81       	ldd	r26, Y+3	; 0x03
 75e:	bc 81       	ldd	r27, Y+4	; 0x04
 760:	2d 81       	ldd	r18, Y+5	; 0x05
 762:	3e 81       	ldd	r19, Y+6	; 0x06
 764:	4f 81       	ldd	r20, Y+7	; 0x07
 766:	58 85       	ldd	r21, Y+8	; 0x08
 768:	82 17       	cp	r24, r18
 76a:	93 07       	cpc	r25, r19
 76c:	a4 07       	cpc	r26, r20
 76e:	b5 07       	cpc	r27, r21
 770:	40 f3       	brcs	.-48     	; 0x742 <delay+0x44>
    // WDG->CR |= 0xFF; //0111 1111
    //  watchdog_refresh();
    }
}
 772:	00 00       	nop
 774:	28 96       	adiw	r28, 0x08	; 8
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	f8 94       	cli
 77a:	de bf       	out	0x3e, r29	; 62
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	cd bf       	out	0x3d, r28	; 61
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <LEDM_Init>:


void LEDM_Init(void)
{
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 78e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <GPIO_Init>
    led_state = 0;
 792:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <led_state>
}
 796:	00 00       	nop
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <LEDM_Manage>:

void LEDM_Manage(void)
{
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62

    // HAL_Delay(500);
	delay(500);
 7a6:	64 ef       	ldi	r22, 0xF4	; 244
 7a8:	71 e0       	ldi	r23, 0x01	; 1
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 7f 03 	call	0x6fe	; 0x6fe <delay>
    led_state = ~led_state;
 7b2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_state>
 7b6:	80 95       	com	r24
 7b8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <led_state>
    GPIO_Write(LED_PIN_ID, led_state);
 7bc:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_state>
 7c0:	68 2f       	mov	r22, r24
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	0e 94 3a 04 	call	0x874	; 0x874 <GPIO_Write>
    WDGM_AlivenessIndication(); // to count the number of function calls
 7c8:	0e 94 5f 01 	call	0x2be	; 0x2be <WDGM_AlivenessIndication>
}
 7cc:	00 00       	nop
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	08 95       	ret

000007d4 <GPIO_Init>:
#include "Rcc.h"

uint32 GPIO_Addresses[2] = { 0x40020000, 0x40020400}; // for port A and B only

void GPIO_Init(void)
{
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	00 d0       	rcall	.+0      	; 0x7da <GPIO_Init+0x6>
 7da:	cd b7       	in	r28, 0x3d	; 61
 7dc:	de b7       	in	r29, 0x3e	; 62
    GpioType * gpioReg =  GPIO_Addresses[LED_PORT_ID];
 7de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <GPIO_Addresses+0x4>
 7e2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <GPIO_Addresses+0x5>
 7e6:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <GPIO_Addresses+0x6>
 7ea:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <GPIO_Addresses+0x7>
 7ee:	9a 83       	std	Y+2, r25	; 0x02
 7f0:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->GPIO_MODER &= ~(0x3 << (2 * LED_PIN_ID));
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	9a 81       	ldd	r25, Y+2	; 0x02
 7f6:	fc 01       	movw	r30, r24
 7f8:	80 81       	ld	r24, Z
 7fa:	91 81       	ldd	r25, Z+1	; 0x01
 7fc:	a2 81       	ldd	r26, Z+2	; 0x02
 7fe:	b3 81       	ldd	r27, Z+3	; 0x03
 800:	8f 73       	andi	r24, 0x3F	; 63
 802:	29 81       	ldd	r18, Y+1	; 0x01
 804:	3a 81       	ldd	r19, Y+2	; 0x02
 806:	f9 01       	movw	r30, r18
 808:	80 83       	st	Z, r24
 80a:	91 83       	std	Z+1, r25	; 0x01
 80c:	a2 83       	std	Z+2, r26	; 0x02
 80e:	b3 83       	std	Z+3, r27	; 0x03
	gpioReg->GPIO_MODER |= (0x01 << (2 * LED_PIN_ID));
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	9a 81       	ldd	r25, Y+2	; 0x02
 814:	fc 01       	movw	r30, r24
 816:	80 81       	ld	r24, Z
 818:	91 81       	ldd	r25, Z+1	; 0x01
 81a:	a2 81       	ldd	r26, Z+2	; 0x02
 81c:	b3 81       	ldd	r27, Z+3	; 0x03
 81e:	80 64       	ori	r24, 0x40	; 64
 820:	29 81       	ldd	r18, Y+1	; 0x01
 822:	3a 81       	ldd	r19, Y+2	; 0x02
 824:	f9 01       	movw	r30, r18
 826:	80 83       	st	Z, r24
 828:	91 83       	std	Z+1, r25	; 0x01
 82a:	a2 83       	std	Z+2, r26	; 0x02
 82c:	b3 83       	std	Z+3, r27	; 0x03
	gpioReg->GPIO_OTYPER  &= ~(0x01 << LED_PIN_ID);
 82e:	89 81       	ldd	r24, Y+1	; 0x01
 830:	9a 81       	ldd	r25, Y+2	; 0x02
 832:	fc 01       	movw	r30, r24
 834:	84 81       	ldd	r24, Z+4	; 0x04
 836:	95 81       	ldd	r25, Z+5	; 0x05
 838:	a6 81       	ldd	r26, Z+6	; 0x06
 83a:	b7 81       	ldd	r27, Z+7	; 0x07
 83c:	87 7f       	andi	r24, 0xF7	; 247
 83e:	29 81       	ldd	r18, Y+1	; 0x01
 840:	3a 81       	ldd	r19, Y+2	; 0x02
 842:	f9 01       	movw	r30, r18
 844:	84 83       	std	Z+4, r24	; 0x04
 846:	95 83       	std	Z+5, r25	; 0x05
 848:	a6 83       	std	Z+6, r26	; 0x06
 84a:	b7 83       	std	Z+7, r27	; 0x07
	gpioReg->GPIO_OTYPER |= (0x00 << LED_PIN_ID);
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	9a 81       	ldd	r25, Y+2	; 0x02
 850:	fc 01       	movw	r30, r24
 852:	84 81       	ldd	r24, Z+4	; 0x04
 854:	95 81       	ldd	r25, Z+5	; 0x05
 856:	a6 81       	ldd	r26, Z+6	; 0x06
 858:	b7 81       	ldd	r27, Z+7	; 0x07
 85a:	29 81       	ldd	r18, Y+1	; 0x01
 85c:	3a 81       	ldd	r19, Y+2	; 0x02
 85e:	f9 01       	movw	r30, r18
 860:	84 83       	std	Z+4, r24	; 0x04
 862:	95 83       	std	Z+5, r25	; 0x05
 864:	a6 83       	std	Z+6, r26	; 0x06
 866:	b7 83       	std	Z+7, r27	; 0x07
	// gpioReg->GPIO_PUPDR &= ~(0x3 << (2 * LED_PIN_ID));
}
 868:	00 00       	nop
 86a:	0f 90       	pop	r0
 86c:	0f 90       	pop	r0
 86e:	df 91       	pop	r29
 870:	cf 91       	pop	r28
 872:	08 95       	ret

00000874 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	00 d0       	rcall	.+0      	; 0x87a <GPIO_Write+0x6>
 87a:	00 d0       	rcall	.+0      	; 0x87c <GPIO_Write+0x8>
 87c:	cd b7       	in	r28, 0x3d	; 61
 87e:	de b7       	in	r29, 0x3e	; 62
 880:	8b 83       	std	Y+3, r24	; 0x03
 882:	6c 83       	std	Y+4, r22	; 0x04
	GpioType * gpioReg =  GPIO_Addresses[LED_PORT_ID];
 884:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <GPIO_Addresses+0x4>
 888:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <GPIO_Addresses+0x5>
 88c:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <GPIO_Addresses+0x6>
 890:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <GPIO_Addresses+0x7>
 894:	9a 83       	std	Y+2, r25	; 0x02
 896:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->GPIO_ODR &= ~(0x01 << PinId);
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	9a 81       	ldd	r25, Y+2	; 0x02
 89c:	fc 01       	movw	r30, r24
 89e:	24 89       	ldd	r18, Z+20	; 0x14
 8a0:	35 89       	ldd	r19, Z+21	; 0x15
 8a2:	46 89       	ldd	r20, Z+22	; 0x16
 8a4:	57 89       	ldd	r21, Z+23	; 0x17
 8a6:	8b 81       	ldd	r24, Y+3	; 0x03
 8a8:	68 2f       	mov	r22, r24
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <GPIO_Write+0x42>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	6a 95       	dec	r22
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <GPIO_Write+0x3e>
 8ba:	80 95       	com	r24
 8bc:	90 95       	com	r25
 8be:	09 2e       	mov	r0, r25
 8c0:	00 0c       	add	r0, r0
 8c2:	aa 0b       	sbc	r26, r26
 8c4:	bb 0b       	sbc	r27, r27
 8c6:	82 23       	and	r24, r18
 8c8:	93 23       	and	r25, r19
 8ca:	a4 23       	and	r26, r20
 8cc:	b5 23       	and	r27, r21
 8ce:	29 81       	ldd	r18, Y+1	; 0x01
 8d0:	3a 81       	ldd	r19, Y+2	; 0x02
 8d2:	f9 01       	movw	r30, r18
 8d4:	84 8b       	std	Z+20, r24	; 0x14
 8d6:	95 8b       	std	Z+21, r25	; 0x15
 8d8:	a6 8b       	std	Z+22, r26	; 0x16
 8da:	b7 8b       	std	Z+23, r27	; 0x17
	gpioReg->GPIO_ODR |= (PinData << PinId);
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	9a 81       	ldd	r25, Y+2	; 0x02
 8e0:	fc 01       	movw	r30, r24
 8e2:	24 89       	ldd	r18, Z+20	; 0x14
 8e4:	35 89       	ldd	r19, Z+21	; 0x15
 8e6:	46 89       	ldd	r20, Z+22	; 0x16
 8e8:	57 89       	ldd	r21, Z+23	; 0x17
 8ea:	8c 81       	ldd	r24, Y+4	; 0x04
 8ec:	88 2f       	mov	r24, r24
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	6b 81       	ldd	r22, Y+3	; 0x03
 8f2:	66 2f       	mov	r22, r22
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <GPIO_Write+0x88>
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	6a 95       	dec	r22
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <GPIO_Write+0x84>
 900:	09 2e       	mov	r0, r25
 902:	00 0c       	add	r0, r0
 904:	aa 0b       	sbc	r26, r26
 906:	bb 0b       	sbc	r27, r27
 908:	82 2b       	or	r24, r18
 90a:	93 2b       	or	r25, r19
 90c:	a4 2b       	or	r26, r20
 90e:	b5 2b       	or	r27, r21
 910:	29 81       	ldd	r18, Y+1	; 0x01
 912:	3a 81       	ldd	r19, Y+2	; 0x02
 914:	f9 01       	movw	r30, r18
 916:	84 8b       	std	Z+20, r24	; 0x14
 918:	95 8b       	std	Z+21, r25	; 0x15
 91a:	a6 8b       	std	Z+22, r26	; 0x16
 91c:	b7 8b       	std	Z+23, r27	; 0x17
}
 91e:	00 00       	nop
 920:	0f 90       	pop	r0
 922:	0f 90       	pop	r0
 924:	0f 90       	pop	r0
 926:	0f 90       	pop	r0
 928:	df 91       	pop	r29
 92a:	cf 91       	pop	r28
 92c:	08 95       	ret

0000092e <__muluhisi3>:
 92e:	0e 94 a2 04 	call	0x944	; 0x944 <__umulhisi3>
 932:	a5 9f       	mul	r26, r21
 934:	90 0d       	add	r25, r0
 936:	b4 9f       	mul	r27, r20
 938:	90 0d       	add	r25, r0
 93a:	a4 9f       	mul	r26, r20
 93c:	80 0d       	add	r24, r0
 93e:	91 1d       	adc	r25, r1
 940:	11 24       	eor	r1, r1
 942:	08 95       	ret

00000944 <__umulhisi3>:
 944:	a2 9f       	mul	r26, r18
 946:	b0 01       	movw	r22, r0
 948:	b3 9f       	mul	r27, r19
 94a:	c0 01       	movw	r24, r0
 94c:	a3 9f       	mul	r26, r19
 94e:	70 0d       	add	r23, r0
 950:	81 1d       	adc	r24, r1
 952:	11 24       	eor	r1, r1
 954:	91 1d       	adc	r25, r1
 956:	b2 9f       	mul	r27, r18
 958:	70 0d       	add	r23, r0
 95a:	81 1d       	adc	r24, r1
 95c:	11 24       	eor	r1, r1
 95e:	91 1d       	adc	r25, r1
 960:	08 95       	ret

00000962 <_exit>:
 962:	f8 94       	cli

00000964 <__stop_program>:
 964:	ff cf       	rjmp	.-2      	; 0x964 <__stop_program>
