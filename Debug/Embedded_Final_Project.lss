
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000460  000004f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800112  00800112  00000506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f2a  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ace  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001060  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  000030d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007e22  00000000  00000000  00003288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  0000b0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000302f  00000000  00000000  0000b378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  9e:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SysInit>:

uint32 call_count_100_ms = 0;
uint32 call_count_50_ms = 0;

int SysInit(void) {
    DDRB |= (1 << 0);
  a6:	20 9a       	sbi	0x04, 0	; 4
    DDRB |= (1 << 3);
  a8:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1 << 2);
  aa:	22 9a       	sbi	0x04, 2	; 4
    PORTB &= ~(1 << 0);
  ac:	28 98       	cbi	0x05, 0	; 5
    GPIO_Init();
  ae:	0e 94 1a 02 	call	0x434	; 0x434 <GPIO_Init>
    LEDM_Init();
  b2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LEDM_Init>
    WDGM_Init();
  b6:	0e 94 25 01 	call	0x24a	; 0x24a <WDGM_Init>
    WDGDrv_Init();
  ba:	0e 94 a1 00 	call	0x142	; 0x142 <WDGDrv_Init>
    
}
  be:	08 95       	ret

000000c0 <main>:

int main(void) {    
    SysInit();
  c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
    PORTB |= (1 <<0);
  c4:	28 9a       	sbi	0x05, 0	; 5
    static uint8 WDGCounter = 0;

    // Call WDGM_MainFunction for the first time
    LEDM_Manage();
  c6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LEDM_Manage>
    WDGM_MainFunction();
  ca:	0e 94 39 01 	call	0x272	; 0x272 <WDGM_MainFunction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x12>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x18>
  d8:	00 00       	nop
    // Main loop
    while (1) {
        _delay_ms(10);
        // _delay_ms(5);
        LEDM_Manage();          // wait for 10ms to call LEDM_Manage again 
  da:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LEDM_Manage>

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        // WDGCounter += 5; // Increment by the delay amount (10ms)
        WDGCounter += 10; // Increment by the delay amount (10ms)
  de:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  e2:	86 5f       	subi	r24, 0xF6	; 246
  e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
  e8:	84 31       	cpi	r24, 0x14	; 20
  ea:	88 f3       	brcs	.-30     	; 0xce <main+0xe>
            WDGM_MainFunction();  // Call watchdog management every 20ms
  ec:	0e 94 39 01 	call	0x272	; 0x272 <WDGM_MainFunction>
            call_count_100_ms ++;
  f0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count_100_ms>
  f4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <call_count_100_ms+0x1>
  f8:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <call_count_100_ms+0x2>
  fc:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <call_count_100_ms+0x3>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	a1 1d       	adc	r26, r1
 104:	b1 1d       	adc	r27, r1
 106:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <call_count_100_ms>
 10a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <call_count_100_ms+0x1>
 10e:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <call_count_100_ms+0x2>
 112:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <call_count_100_ms+0x3>
            call_count_50_ms ++;
 116:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count_50_ms>
 11a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count_50_ms+0x1>
 11e:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <call_count_50_ms+0x2>
 122:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <call_count_50_ms+0x3>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	a1 1d       	adc	r26, r1
 12a:	b1 1d       	adc	r27, r1
 12c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <call_count_50_ms>
 130:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <call_count_50_ms+0x1>
 134:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <call_count_50_ms+0x2>
 138:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <call_count_50_ms+0x3>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 13c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 140:	c6 cf       	rjmp	.-116    	; 0xce <main+0xe>

00000142 <WDGDrv_Init>:
    WDGDrv_IsrNotification();
}

void WDGDrv_Init(void)
{
    cli();                             // Enable global interrupts
 142:	f8 94       	cli
    // configure the timer
    TCCR1B |= (1 << WGM12);
 144:	e1 e8       	ldi	r30, 0x81	; 129
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	80 83       	st	Z, r24
    OCR1A = 779;
 14e:	8b e0       	ldi	r24, 0x0B	; 11
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 156:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
 15a:	80 81       	ld	r24, Z
 15c:	83 60       	ori	r24, 0x03	; 3
 15e:	80 83       	st	Z, r24
    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 160:	ef e6       	ldi	r30, 0x6F	; 111
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 83       	st	Z, r24

    // wdt_reset();
    // MCUSR &= ~(1<<3);
    // WDTCSR = 0x00;
    WDTCSR = (1 << WDCE) | (1 << WDE); // Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 16a:	e0 e6       	ldi	r30, 0x60	; 96
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	88 e1       	ldi	r24, 0x18	; 24
 170:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP1)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	80 83       	st	Z, r24
    // WDTCSR = (1 << WDIE) ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
    // sei();                             // Enable global interrupts
        // WDTCSR = (1 << WDE) | (1 << WDP2) | (1 << WDP1); // Set the watchdog to approximately 0.5 seconds
    SREG |= (1 << I);
 176:	8f b7       	in	r24, 0x3f	; 63
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	8f bf       	out	0x3f, r24	; 63
}
 17c:	08 95       	ret

0000017e <WDGDrv_IsrNotification>:

void WDGDrv_IsrNotification(void)
{
    if ((isr_counter % 2) != 0) // when time is 50 , 150 , 250 and so on
 17e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isr_counter>
 182:	80 ff       	sbrs	r24, 0
 184:	1b c0       	rjmp	.+54     	; 0x1bc <WDGDrv_IsrNotification+0x3e>
    {
        // check call_count(times WDGM_MainFunction is called) is 2 or more
        if (call_count_50_ms >= 2)
 186:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count_50_ms>
 18a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count_50_ms+0x1>
 18e:	02 97       	sbiw	r24, 0x02	; 2
 190:	74 f0       	brlt	.+28     	; 0x1ae <WDGDrv_IsrNotification+0x30>
        {
            stuck = 0;            // The function is not stuck
 192:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x1>
 196:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck>
            wdt_reset(); //  should i do the reset here when not stuck?
 19a:	a8 95       	wdr
            PORTB ^= (1 << 0); // to indicate the perodicity refreshment of the wdt
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	89 27       	eor	r24, r25
 1a2:	85 b9       	out	0x05, r24	; 5
            call_count_50_ms = 0; // Reset for the next 50ms period
 1a4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <call_count_50_ms+0x1>
 1a8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <call_count_50_ms>
 1ac:	08 95       	ret
        }
        else
        {
            stuck = 1; // The function might be stuck
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <stuck+0x1>
 1b6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <stuck>
 1ba:	08 95       	ret
        }
    }
    else  // if in 100 , 200 , 300 and so on
    {
        if (WDGM_PovideSuppervisionStatus() == OK && (!stuck))
 1bc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <WDGM_PovideSuppervisionStatus>
 1c0:	81 11       	cpse	r24, r1
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <WDGDrv_IsrNotification+0x5c>
 1c4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <stuck>
 1c8:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <stuck+0x1>
 1cc:	89 2b       	or	r24, r25
 1ce:	29 f4       	brne	.+10     	; 0x1da <WDGDrv_IsrNotification+0x5c>
        {
            wdt_reset();
 1d0:	a8 95       	wdr
            PORTB ^= (1 << 0); // to indicate the perodicity refreshment of the wdt
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	89 27       	eor	r24, r25
 1d8:	85 b9       	out	0x05, r24	; 5
        {
            // leave the wdt to reset 
            return;
        }
    }
}
 1da:	08 95       	ret

000001dc <__vector_11>:
extern stuck;
extern call_count_50_ms;
uint32 isr_counter = 0;

ISR(TIMER1_COMPA_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
    isr_counter++;
 1fe:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isr_counter>
 202:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <isr_counter+0x1>
 206:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <isr_counter+0x2>
 20a:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <isr_counter+0x3>
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	a1 1d       	adc	r26, r1
 212:	b1 1d       	adc	r27, r1
 214:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <isr_counter>
 218:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <isr_counter+0x1>
 21c:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <isr_counter+0x2>
 220:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <isr_counter+0x3>
    // PORTB ^= (1 << 0); // Set PB0 high
    WDGDrv_IsrNotification();
 224:	0e 94 bf 00 	call	0x17e	; 0x17e <WDGDrv_IsrNotification>
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <WDGM_Init>:
static volatile uint32 led_no_calls;
uint32 stuck;

void WDGM_Init(void)
{
    status = NOK;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <status>
    led_no_calls = 0;
 250:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 254:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 258:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 25c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
    stuck = 0;
 260:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck>
 264:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x1>
 268:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stuck+0x2>
 26c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stuck+0x3>
}
 270:	08 95       	ret

00000272 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    PORTB ^= (1 << 3); // to indicate the perodicity of the function
 272:	85 b1       	in	r24, 0x05	; 5
 274:	98 e0       	ldi	r25, 0x08	; 8
 276:	89 27       	eor	r24, r25
 278:	85 b9       	out	0x05, r24	; 5
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms
    if (call_count_100_ms <= 5)
 27a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count_100_ms>
 27e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <call_count_100_ms+0x1>
 282:	06 97       	sbiw	r24, 0x06	; 6
 284:	fc f4       	brge	.+62     	; 0x2c4 <WDGM_MainFunction+0x52>
    {
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 286:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 28a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 28e:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 292:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 296:	08 97       	sbiw	r24, 0x08	; 8
 298:	a1 05       	cpc	r26, r1
 29a:	b1 05       	cpc	r27, r1
 29c:	78 f0       	brcs	.+30     	; 0x2bc <WDGM_MainFunction+0x4a>
 29e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 2a2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 2a6:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 2aa:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 2ae:	0d 97       	sbiw	r24, 0x0d	; 13
 2b0:	a1 05       	cpc	r26, r1
 2b2:	b1 05       	cpc	r27, r1
 2b4:	18 f4       	brcc	.+6      	; 0x2bc <WDGM_MainFunction+0x4a>
        {
            status = OK;
 2b6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <status>
 2ba:	08 95       	ret
        }
        else
        {
            status = NOK;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <status>
 2c2:	08 95       	ret
        }
    }
    else
    {
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 2c4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 2c8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 2cc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 2d0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
        call_count_100_ms = 1;   // return the call count for the next 100ms period
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <call_count_100_ms+0x1>
 2dc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <call_count_100_ms>
    }
}
 2e0:	08 95       	ret

000002e2 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 2e2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <status>
 2e6:	08 95       	ret

000002e8 <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 2e8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 2ec:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 2f0:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 2f4:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	a1 1d       	adc	r26, r1
 2fc:	b1 1d       	adc	r27, r1
 2fe:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <led_no_calls>
 302:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <led_no_calls+0x1>
 306:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <led_no_calls+0x2>
 30a:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <led_no_calls+0x3>
 30e:	08 95       	ret

00000310 <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 310:	80 36       	cpi	r24, 0x60	; 96
 312:	28 f5       	brcc	.+74     	; 0x35e <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 314:	e8 2f       	mov	r30, r24
 316:	e2 95       	swap	r30
 318:	e6 95       	lsr	r30
 31a:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	ea 5f       	subi	r30, 0xFA	; 250
 324:	fe 4f       	sbci	r31, 0xFE	; 254
 326:	01 90       	ld	r0, Z+
 328:	f0 81       	ld	r31, Z
 32a:	e0 2d       	mov	r30, r0
 32c:	40 81       	ld	r20, Z
 32e:	51 81       	ldd	r21, Z+1	; 0x01
 330:	62 81       	ldd	r22, Z+2	; 0x02
 332:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 334:	98 2f       	mov	r25, r24
 336:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <Nvic_EnableInterrupt+0x32>
 33e:	22 0f       	add	r18, r18
 340:	33 1f       	adc	r19, r19
 342:	9a 95       	dec	r25
 344:	e2 f7       	brpl	.-8      	; 0x33e <Nvic_EnableInterrupt+0x2e>
 346:	c9 01       	movw	r24, r18
 348:	33 0f       	add	r19, r19
 34a:	aa 0b       	sbc	r26, r26
 34c:	bb 0b       	sbc	r27, r27
 34e:	84 2b       	or	r24, r20
 350:	95 2b       	or	r25, r21
 352:	a6 2b       	or	r26, r22
 354:	b7 2b       	or	r27, r23
 356:	80 83       	st	Z, r24
 358:	91 83       	std	Z+1, r25	; 0x01
 35a:	a2 83       	std	Z+2, r26	; 0x02
 35c:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 35e:	08 95       	ret

00000360 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 360:	80 36       	cpi	r24, 0x60	; 96
 362:	28 f5       	brcc	.+74     	; 0x3ae <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 364:	e8 2f       	mov	r30, r24
 366:	e2 95       	swap	r30
 368:	e6 95       	lsr	r30
 36a:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	e0 50       	subi	r30, 0x00	; 0
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	01 90       	ld	r0, Z+
 378:	f0 81       	ld	r31, Z
 37a:	e0 2d       	mov	r30, r0
 37c:	40 81       	ld	r20, Z
 37e:	51 81       	ldd	r21, Z+1	; 0x01
 380:	62 81       	ldd	r22, Z+2	; 0x02
 382:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 384:	98 2f       	mov	r25, r24
 386:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <Nvic_DisableInterrupt+0x32>
 38e:	22 0f       	add	r18, r18
 390:	33 1f       	adc	r19, r19
 392:	9a 95       	dec	r25
 394:	e2 f7       	brpl	.-8      	; 0x38e <Nvic_DisableInterrupt+0x2e>
 396:	c9 01       	movw	r24, r18
 398:	33 0f       	add	r19, r19
 39a:	aa 0b       	sbc	r26, r26
 39c:	bb 0b       	sbc	r27, r27
 39e:	84 2b       	or	r24, r20
 3a0:	95 2b       	or	r25, r21
 3a2:	a6 2b       	or	r26, r22
 3a4:	b7 2b       	or	r27, r23
 3a6:	80 83       	st	Z, r24
 3a8:	91 83       	std	Z+1, r25	; 0x01
 3aa:	a2 83       	std	Z+2, r26	; 0x02
 3ac:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 3ae:	08 95       	ret

000003b0 <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 3b0:	0e 94 1a 02 	call	0x434	; 0x434 <GPIO_Init>
    led_state = 0;
 3b4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <led_state>
    time_counter = 0;
 3b8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter>
 3bc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x1>
 3c0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x2>
 3c4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_counter+0x3>
}
 3c8:	08 95       	ret

000003ca <LEDM_Manage>:

void LEDM_Manage(void)
{   
    PORTB ^= (1 << 2); // to indicate the perodicity of the function
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	94 e0       	ldi	r25, 0x04	; 4
 3ce:	89 27       	eor	r24, r25
 3d0:	85 b9       	out	0x05, r24	; 5
    
	if (time_counter == 500)
 3d2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <time_counter>
 3d6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <time_counter+0x1>
 3da:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <time_counter+0x2>
 3de:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <time_counter+0x3>
 3e2:	84 3f       	cpi	r24, 0xF4	; 244
 3e4:	91 40       	sbci	r25, 0x01	; 1
 3e6:	a1 05       	cpc	r26, r1
 3e8:	b1 05       	cpc	r27, r1
 3ea:	81 f4       	brne	.+32     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
    {
		led_state = ~led_state;
 3ec:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <led_state>
 3f0:	60 95       	com	r22
 3f2:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 1c 02 	call	0x438	; 0x438 <GPIO_Write>
		time_counter = 0;
 3fc:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter>
 400:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x1>
 404:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x2>
 408:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_counter+0x3>
    }
	// time_counter += 5;
	time_counter += 10;
 40c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <time_counter>
 410:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <time_counter+0x1>
 414:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <time_counter+0x2>
 418:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <time_counter+0x3>
 41c:	0a 96       	adiw	r24, 0x0a	; 10
 41e:	a1 1d       	adc	r26, r1
 420:	b1 1d       	adc	r27, r1
 422:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <time_counter>
 426:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <time_counter+0x1>
 42a:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <time_counter+0x2>
 42e:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <time_counter+0x3>
    // WDGM_AlivenessIndication(); // to count the number of function calls
 432:	08 95       	ret

00000434 <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 434:	21 9a       	sbi	0x04, 1	; 4

}
 436:	08 95       	ret

00000438 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 438:	45 b1       	in	r20, 0x05	; 5
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	f9 01       	movw	r30, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <GPIO_Write+0xe>
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <GPIO_Write+0xa>
 44a:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 44c:	66 23       	and	r22, r22
 44e:	19 f0       	breq	.+6      	; 0x456 <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 450:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 452:	85 b9       	out	0x05, r24	; 5
    }
}
 454:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 456:	80 95       	com	r24
 458:	84 23       	and	r24, r20
 45a:	fb cf       	rjmp	.-10     	; 0x452 <GPIO_Write+0x1a>

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
