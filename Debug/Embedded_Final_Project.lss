
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800112  00800112  000005ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f56  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b16  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ecd  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007ace  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000281  00000000  00000000  0000ad3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000afbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000304f  00000000  00000000  0000b077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 88 02 	jmp	0x510	; 0x510 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Timer0_Init>:
volatile unsigned long time_at_last_10ms = 0;
static uint8 WDGCounter = 0;

void Timer0_Init(void)
{
    TCCR0A = (1 << WGM01);              // Config the timer
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36
    OCR0A = 15;                         // Set compare value for 1ms interrupt
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);             // Enable Timer Compare Interrupt
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    TCCR0B = (1 << CS01) | (1 << CS00); // Set prescaler to 64 and start Timer0
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	85 bd       	out	0x25, r24	; 37
    SREG |= (1 << I);
  b6:	8f b7       	in	r24, 0x3f	; 63
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	8f bf       	out	0x3f, r24	; 63
}
  bc:	08 95       	ret

000000be <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
    current_time++; // Increment the time variable every 1ms
  d0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current_time>
  d4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current_time+0x1>
  d8:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <current_time+0x2>
  dc:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <current_time+0x3>
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	a1 1d       	adc	r26, r1
  e4:	b1 1d       	adc	r27, r1
  e6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <current_time>
  ea:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <current_time+0x1>
  ee:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <current_time+0x2>
  f2:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <current_time+0x3>
}
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <SysInit>:

void SysInit(void)
{
    
    PORTB &= ~(1 << 0);
 108:	28 98       	cbi	0x05, 0	; 5
    GPIO_Init();
 10a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <GPIO_Init>
    LEDM_Init();
 10e:	0e 94 35 02 	call	0x46a	; 0x46a <LEDM_Init>
    WDGM_Init();
 112:	0e 94 45 01 	call	0x28a	; 0x28a <WDGM_Init>
    WDGDrv_Init();
 116:	0e 94 c8 00 	call	0x190	; 0x190 <WDGDrv_Init>
    Timer0_Init();
 11a:	0c 94 53 00 	jmp	0xa6	; 0xa6 <Timer0_Init>

0000011e <main>:
}

int main(void)
{
    SysInit();
 11e:	0e 94 84 00 	call	0x108	; 0x108 <SysInit>
    PORTB |= (1 << 0); // to monitor the system reset
 122:	28 9a       	sbi	0x05, 0	; 5
    while (1)
    {
        // if ((current_time - time_at_last_10ms) >= 5)
        if ((current_time - time_at_last_10ms) >= 10)
 124:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current_time>
 128:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current_time+0x1>
 12c:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <current_time+0x2>
 130:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <current_time+0x3>
 134:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <time_at_last_10ms>
 138:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <time_at_last_10ms+0x1>
 13c:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <time_at_last_10ms+0x2>
 140:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <time_at_last_10ms+0x3>
 144:	84 1b       	sub	r24, r20
 146:	95 0b       	sbc	r25, r21
 148:	a6 0b       	sbc	r26, r22
 14a:	b7 0b       	sbc	r27, r23
 14c:	0a 97       	sbiw	r24, 0x0a	; 10
 14e:	a1 05       	cpc	r26, r1
 150:	b1 05       	cpc	r27, r1
 152:	40 f3       	brcs	.-48     	; 0x124 <main+0x6>
        {
            time_at_last_10ms = current_time;
 154:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <current_time>
 158:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <current_time+0x1>
 15c:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <current_time+0x2>
 160:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <current_time+0x3>
 164:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <time_at_last_10ms>
 168:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <time_at_last_10ms+0x1>
 16c:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <time_at_last_10ms+0x2>
 170:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <time_at_last_10ms+0x3>
            LEDM_Manage();
 174:	0e 94 46 02 	call	0x48c	; 0x48c <LEDM_Manage>
            WDGCounter += 10;
 178:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 17c:	86 5f       	subi	r24, 0xF6	; 246
 17e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
            // WDGCounter += 5;
            if (WDGCounter >= 20)
 182:	84 31       	cpi	r24, 0x14	; 20
 184:	78 f2       	brcs	.-98     	; 0x124 <main+0x6>
            {
                WDGCounter = 0;      // Reset count after calling WDGM_MainFunction()
 186:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
                WDGM_MainFunction(); // Call watchdog management every 20ms
 18a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <WDGM_MainFunction>
 18e:	ca cf       	rjmp	.-108    	; 0x124 <main+0x6>

00000190 <WDGDrv_Init>:
    PORTB ^= (1 << 5); // to indicate the timer => 50ms
}

void WDGDrv_Init(void)
{
	SREG &= ~(1 << I); //Disable global interrupts
 190:	8f b7       	in	r24, 0x3f	; 63
 192:	8f 77       	andi	r24, 0x7F	; 127
 194:	8f bf       	out	0x3f, r24	; 63
    WDTCSR |= (1 << WDCE) | (1 << WDE); // Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 196:	e0 e6       	ldi	r30, 0x60	; 96
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	88 61       	ori	r24, 0x18	; 24
 19e:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP1)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	80 83       	st	Z, r24

    // CONFIG THE TIMER :
    TCCR1B |= (1 << WGM12); //CTC mode
 1a4:	e1 e8       	ldi	r30, 0x81	; 129
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11) | (1 << CS10); // Set the prescaler to 64
 1ae:	80 81       	ld	r24, Z
 1b0:	83 60       	ori	r24, 0x03	; 3
 1b2:	80 83       	st	Z, r24

	// to achieve 50 ms timer => f_OCnA = f_clk_I/O / (2 * N * (1 + OCRnA)) 
	
	OCR1A = 815; // realize it from proteus
 1b4:	8f e2       	ldi	r24, 0x2F	; 47
 1b6:	93 e0       	ldi	r25, 0x03	; 3
 1b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	// OCR1A = 780; //datasheet

	TIMSK1 |= (1 << OCIE1A); // Enable Timer Compare Interrupt
 1c0:	ef e6       	ldi	r30, 0x6F	; 111
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	80 83       	st	Z, r24
    SREG |= (1 << I); //enable global interrupts 
 1ca:	8f b7       	in	r24, 0x3f	; 63
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	8f bf       	out	0x3f, r24	; 63
}
 1d0:	08 95       	ret

000001d2 <WDGDrv_IsrNotification>:

void WDGDrv_IsrNotification(void)
{

		WDGM_StatusType wdgmStatus = WDGM_PovideSuppervisionStatus();
 1d2:	0e 94 ce 01 	call	0x39c	; 0x39c <WDGM_PovideSuppervisionStatus>
		uint8 check  = ((!wdgmStatus) && (!stuck)); 
 1d6:	81 11       	cpse	r24, r1
 1d8:	25 c0       	rjmp	.+74     	; 0x224 <WDGDrv_IsrNotification+0x52>
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <stuck>
 1e2:	30 91 2a 01 	lds	r19, 0x012A	; 0x80012a <stuck+0x1>
 1e6:	23 2b       	or	r18, r19
 1e8:	11 f0       	breq	.+4      	; 0x1ee <WDGDrv_IsrNotification+0x1c>
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	80 e0       	ldi	r24, 0x00	; 0

        if (check)
 1ee:	89 2b       	or	r24, r25
 1f0:	c9 f0       	breq	.+50     	; 0x224 <WDGDrv_IsrNotification+0x52>
        {
            wdt_reset();
 1f2:	a8 95       	wdr
            PORTB ^= (1 <<1); // to indicate the perodicity refreshment of the wdt
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	89 27       	eor	r24, r25
 1fa:	85 b9       	out	0x05, r24	; 5
			is_reset++;
 1fc:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <is_reset>
 200:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <is_reset+0x1>
 204:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <is_reset+0x2>
 208:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <is_reset+0x3>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	a1 1d       	adc	r26, r1
 210:	b1 1d       	adc	r27, r1
 212:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <is_reset>
 216:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <is_reset+0x1>
 21a:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <is_reset+0x2>
 21e:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <is_reset+0x3>
 222:	08 95       	ret
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 224:	88 e1       	ldi	r24, 0x18	; 24
 226:	98 e0       	ldi	r25, 0x08	; 8
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	a8 95       	wdr
 22e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 232:	0f be       	out	0x3f, r0	; 63
 234:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
			// leave it to reset
            wdt_enable(WDTO_15MS);
        }


}
 238:	08 95       	ret

0000023a <__vector_11>:

extern stuck;
uint32 is_reset = 0;

ISR(TIMER1_COMPA_vect)
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
    WDGDrv_IsrNotification();
 25c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <WDGDrv_IsrNotification>
    PORTB ^= (1 << 5); // to indicate the timer => 50ms
 260:	85 b1       	in	r24, 0x05	; 5
 262:	90 e2       	ldi	r25, 0x20	; 32
 264:	89 27       	eor	r24, r25
 266:	85 b9       	out	0x05, r24	; 5
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <WDGM_Init>:
static volatile uint32 led_no_calls;
uint32 stuck;

void WDGM_Init(void)
{
    status = OK;
 28a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <status>
    led_no_calls = 0;
 28e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 292:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 296:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 29a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
    stuck = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	a0 e0       	ldi	r26, 0x00	; 0
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <stuck>
 2aa:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <stuck+0x1>
 2ae:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <stuck+0x2>
 2b2:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <stuck+0x3>
    wdg_call_count_within_100_ms = 0;
 2b6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <wdg_call_count_within_100_ms>
 2ba:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <wdg_call_count_within_100_ms+0x1>
 2be:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <wdg_call_count_within_100_ms+0x2>
 2c2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <wdg_call_count_within_100_ms+0x3>
}
 2c6:	08 95       	ret

000002c8 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    stuck = 1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	a0 e0       	ldi	r26, 0x00	; 0
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <stuck>
 2d4:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <stuck+0x1>
 2d8:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <stuck+0x2>
 2dc:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <stuck+0x3>
    wdg_call_count_within_100_ms++;
 2e0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <wdg_call_count_within_100_ms>
 2e4:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <wdg_call_count_within_100_ms+0x1>
 2e8:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <wdg_call_count_within_100_ms+0x2>
 2ec:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <wdg_call_count_within_100_ms+0x3>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	a1 1d       	adc	r26, r1
 2f4:	b1 1d       	adc	r27, r1
 2f6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <wdg_call_count_within_100_ms>
 2fa:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <wdg_call_count_within_100_ms+0x1>
 2fe:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <wdg_call_count_within_100_ms+0x2>
 302:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <wdg_call_count_within_100_ms+0x3>
    PORTB ^= (1 << 3);  // to indicate the perodicity of the function (20ms)
 306:	85 b1       	in	r24, 0x05	; 5
 308:	98 e0       	ldi	r25, 0x08	; 8
 30a:	89 27       	eor	r24, r25
 30c:	85 b9       	out	0x05, r24	; 5
    if(wdg_call_count_within_100_ms >= 5) // 5 * 20 == 100 ms
 30e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <wdg_call_count_within_100_ms>
 312:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <wdg_call_count_within_100_ms+0x1>
 316:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <wdg_call_count_within_100_ms+0x2>
 31a:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <wdg_call_count_within_100_ms+0x3>
 31e:	05 97       	sbiw	r24, 0x05	; 5
 320:	a1 05       	cpc	r26, r1
 322:	b1 05       	cpc	r27, r1
 324:	70 f1       	brcs	.+92     	; 0x382 <WDGM_MainFunction+0xba>
    {
        PORTB ^= (1 << 6); // to indicate the perodicity of the function(within 100ms)
 326:	85 b1       	in	r24, 0x05	; 5
 328:	90 e4       	ldi	r25, 0x40	; 64
 32a:	89 27       	eor	r24, r25
 32c:	85 b9       	out	0x05, r24	; 5
        if (((led_no_calls >= 8) && (led_no_calls <= 12))) // check no. of calls is between 8 and 12 or not
 32e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 332:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 336:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 33a:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 33e:	08 97       	sbiw	r24, 0x08	; 8
 340:	a1 05       	cpc	r26, r1
 342:	b1 05       	cpc	r27, r1
 344:	38 f1       	brcs	.+78     	; 0x394 <WDGM_MainFunction+0xcc>
 346:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 34a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 34e:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 352:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 356:	0d 97       	sbiw	r24, 0x0d	; 13
 358:	a1 05       	cpc	r26, r1
 35a:	b1 05       	cpc	r27, r1
 35c:	d8 f4       	brcc	.+54     	; 0x394 <WDGM_MainFunction+0xcc>
        {
            status = OK;
 35e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <status>
        }
        else
        {
            status = NOK;
        }
        led_no_calls = 0; // Reset the led_no_calls for the next 100ms period
 362:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 366:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 36a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 36e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
        wdg_call_count_within_100_ms = 0;   // return the wdg_call_count_within_100_ms for the next 100ms period
 372:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <wdg_call_count_within_100_ms>
 376:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <wdg_call_count_within_100_ms+0x1>
 37a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <wdg_call_count_within_100_ms+0x2>
 37e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <wdg_call_count_within_100_ms+0x3>
    }
    
    stuck = 0;
 382:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <stuck>
 386:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <stuck+0x1>
 38a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <stuck+0x2>
 38e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <stuck+0x3>

}
 392:	08 95       	ret
        {
            status = OK;
        }
        else
        {
            status = NOK;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <status>
 39a:	e3 cf       	rjmp	.-58     	; 0x362 <WDGM_MainFunction+0x9a>

0000039c <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 39c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <status>
 3a0:	08 95       	ret

000003a2 <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 3a2:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 3a6:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 3aa:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 3ae:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <led_no_calls>
 3bc:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <led_no_calls+0x1>
 3c0:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <led_no_calls+0x2>
 3c4:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <led_no_calls+0x3>
}
 3c8:	08 95       	ret

000003ca <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 3ca:	80 36       	cpi	r24, 0x60	; 96
 3cc:	28 f5       	brcc	.+74     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 3ce:	e8 2f       	mov	r30, r24
 3d0:	e2 95       	swap	r30
 3d2:	e6 95       	lsr	r30
 3d4:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	ea 5f       	subi	r30, 0xFA	; 250
 3de:	fe 4f       	sbci	r31, 0xFE	; 254
 3e0:	01 90       	ld	r0, Z+
 3e2:	f0 81       	ld	r31, Z
 3e4:	e0 2d       	mov	r30, r0
 3e6:	40 81       	ld	r20, Z
 3e8:	51 81       	ldd	r21, Z+1	; 0x01
 3ea:	62 81       	ldd	r22, Z+2	; 0x02
 3ec:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 3ee:	98 2f       	mov	r25, r24
 3f0:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <Nvic_EnableInterrupt+0x32>
 3f8:	22 0f       	add	r18, r18
 3fa:	33 1f       	adc	r19, r19
 3fc:	9a 95       	dec	r25
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <Nvic_EnableInterrupt+0x2e>
 400:	c9 01       	movw	r24, r18
 402:	33 0f       	add	r19, r19
 404:	aa 0b       	sbc	r26, r26
 406:	bb 0b       	sbc	r27, r27
 408:	84 2b       	or	r24, r20
 40a:	95 2b       	or	r25, r21
 40c:	a6 2b       	or	r26, r22
 40e:	b7 2b       	or	r27, r23
 410:	80 83       	st	Z, r24
 412:	91 83       	std	Z+1, r25	; 0x01
 414:	a2 83       	std	Z+2, r26	; 0x02
 416:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 418:	08 95       	ret

0000041a <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 41a:	80 36       	cpi	r24, 0x60	; 96
 41c:	28 f5       	brcc	.+74     	; 0x468 <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 41e:	e8 2f       	mov	r30, r24
 420:	e2 95       	swap	r30
 422:	e6 95       	lsr	r30
 424:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	ee 0f       	add	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	e0 50       	subi	r30, 0x00	; 0
 42e:	ff 4f       	sbci	r31, 0xFF	; 255
 430:	01 90       	ld	r0, Z+
 432:	f0 81       	ld	r31, Z
 434:	e0 2d       	mov	r30, r0
 436:	40 81       	ld	r20, Z
 438:	51 81       	ldd	r21, Z+1	; 0x01
 43a:	62 81       	ldd	r22, Z+2	; 0x02
 43c:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 43e:	98 2f       	mov	r25, r24
 440:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <Nvic_DisableInterrupt+0x32>
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	9a 95       	dec	r25
 44e:	e2 f7       	brpl	.-8      	; 0x448 <Nvic_DisableInterrupt+0x2e>
 450:	c9 01       	movw	r24, r18
 452:	33 0f       	add	r19, r19
 454:	aa 0b       	sbc	r26, r26
 456:	bb 0b       	sbc	r27, r27
 458:	84 2b       	or	r24, r20
 45a:	95 2b       	or	r25, r21
 45c:	a6 2b       	or	r26, r22
 45e:	b7 2b       	or	r27, r23
 460:	80 83       	st	Z, r24
 462:	91 83       	std	Z+1, r25	; 0x01
 464:	a2 83       	std	Z+2, r26	; 0x02
 466:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 468:	08 95       	ret

0000046a <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 46a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <GPIO_Init>
    led_state = 0;
 46e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <led_state>
	GPIO_Write(LED_PIN_ID, led_state);
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	84 e0       	ldi	r24, 0x04	; 4
 476:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_Write>
    time_counter = 0;
 47a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <time_counter>
 47e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <time_counter+0x1>
 482:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <time_counter+0x2>
 486:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <time_counter+0x3>
}
 48a:	08 95       	ret

0000048c <LEDM_Manage>:

void LEDM_Manage(void)
{   
    PORTB ^= (1 << 2); // to indicate the perodicity of the function (10ms)
 48c:	85 b1       	in	r24, 0x05	; 5
 48e:	94 e0       	ldi	r25, 0x04	; 4
 490:	89 27       	eor	r24, r25
 492:	85 b9       	out	0x05, r24	; 5
	time_counter += 10;
 494:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <time_counter>
 498:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <time_counter+0x1>
 49c:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <time_counter+0x2>
 4a0:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <time_counter+0x3>
 4a4:	0a 96       	adiw	r24, 0x0a	; 10
 4a6:	a1 1d       	adc	r26, r1
 4a8:	b1 1d       	adc	r27, r1
 4aa:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <time_counter>
 4ae:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <time_counter+0x1>
 4b2:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <time_counter+0x2>
 4b6:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <time_counter+0x3>
	// time_counter += 5;
	if (time_counter >= 500)
 4ba:	84 3f       	cpi	r24, 0xF4	; 244
 4bc:	91 40       	sbci	r25, 0x01	; 1
 4be:	a1 05       	cpc	r26, r1
 4c0:	b1 05       	cpc	r27, r1
 4c2:	80 f0       	brcs	.+32     	; 0x4e4 <LEDM_Manage+0x58>
    {
		led_state = ~led_state;
 4c4:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <led_state>
 4c8:	60 95       	com	r22
 4ca:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 4ce:	84 e0       	ldi	r24, 0x04	; 4
 4d0:	0e 94 76 02 	call	0x4ec	; 0x4ec <GPIO_Write>
		time_counter = 0; // Reset the time counter for the next 500ms period
 4d4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <time_counter>
 4d8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <time_counter+0x1>
 4dc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <time_counter+0x2>
 4e0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <time_counter+0x3>
    }
  // WDGM_AlivenessIndication(); // to count the number of function calls
}
 4e4:	08 95       	ret

000004e6 <GPIO_Init>:
    gpioReg->DDR |= (1 << 2); // ledmange
    gpioReg->DDR |= (1 << 3); // WDG_main
    // gpioReg->DDR |= (1 << 4);  //led_toggle
    gpioReg->DDR |= (1 << 5); // timer
    gpioReg->DDR |= (1 << 6); // evey100ms
    gpioReg->DDR |= (1 << 7); // evey100ms
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	84 b9       	out	0x04, r24	; 4
}
 4ea:	08 95       	ret

000004ec <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 4ec:	45 b1       	in	r20, 0x05	; 5
 4ee:	21 e0       	ldi	r18, 0x01	; 1
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	f9 01       	movw	r30, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <GPIO_Write+0xe>
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	8a 95       	dec	r24
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <GPIO_Write+0xa>
 4fe:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 500:	66 23       	and	r22, r22
 502:	19 f0       	breq	.+6      	; 0x50a <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 504:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 506:	85 b9       	out	0x05, r24	; 5
    }
}
 508:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	fb cf       	rjmp	.-10     	; 0x506 <GPIO_Write+0x1a>

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
