
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000088a  0000091e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000088a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800112  00800112  00000930  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9c  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009da  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b85  00000000  00000000  00002216  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00002d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d25  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d5  00000000  00000000  0000ad19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000b0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e08  00000000  00000000  0000b18e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 43 04 	jmp	0x886	; 0x886 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <GPIO.h>
#include <LEDM.h>
#include <WDGM.h>


int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	60 97       	sbiw	r28, 0x10	; 16
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    // Set PB0 as output for the LED
	GPIO_Init();
  ba:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_Init>

     WDGDrv_Init();
  be:	0e 94 1b 01 	call	0x236	; 0x236 <WDGDrv_Init>
    LEDM_Init();
  c2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LEDM_Init>
    WDGM_Init();
  c6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <WDGM_Init>

    int counter = 1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	9a 83       	std	Y+2, r25	; 0x02
  d0:	89 83       	std	Y+1, r24	; 0x01
    LEDM_Manage();
  d2:	0e 94 8f 02 	call	0x51e	; 0x51e <LEDM_Manage>
    WDGM_MainFunction();
  d6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <WDGM_MainFunction>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	a0 e2       	ldi	r26, 0x20	; 32
  e0:	b1 e4       	ldi	r27, 0x41	; 65
  e2:	8b 83       	std	Y+3, r24	; 0x03
  e4:	9c 83       	std	Y+4, r25	; 0x04
  e6:	ad 83       	std	Y+5, r26	; 0x05
  e8:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	4a e7       	ldi	r20, 0x7A	; 122
  f0:	53 e4       	ldi	r21, 0x43	; 67
  f2:	6b 81       	ldd	r22, Y+3	; 0x03
  f4:	7c 81       	ldd	r23, Y+4	; 0x04
  f6:	8d 81       	ldd	r24, Y+5	; 0x05
  f8:	9e 81       	ldd	r25, Y+6	; 0x06
  fa:	0e 94 ae 03 	call	0x75c	; 0x75c <__mulsf3>
  fe:	dc 01       	movw	r26, r24
 100:	cb 01       	movw	r24, r22
 102:	8f 83       	std	Y+7, r24	; 0x07
 104:	98 87       	std	Y+8, r25	; 0x08
 106:	a9 87       	std	Y+9, r26	; 0x09
 108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 e8       	ldi	r20, 0x80	; 128
 110:	5f e3       	ldi	r21, 0x3F	; 63
 112:	6f 81       	ldd	r22, Y+7	; 0x07
 114:	78 85       	ldd	r23, Y+8	; 0x08
 116:	89 85       	ldd	r24, Y+9	; 0x09
 118:	9a 85       	ldd	r25, Y+10	; 0x0a
 11a:	0e 94 28 03 	call	0x650	; 0x650 <__cmpsf2>
 11e:	88 23       	and	r24, r24
 120:	2c f4       	brge	.+10     	; 0x12c <main+0x86>
		__ticks = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	9c 87       	std	Y+12, r25	; 0x0c
 128:	8b 87       	std	Y+11, r24	; 0x0b
 12a:	3f c0       	rjmp	.+126    	; 0x1aa <main+0x104>
	else if (__tmp > 65535)
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	3f ef       	ldi	r19, 0xFF	; 255
 130:	4f e7       	ldi	r20, 0x7F	; 127
 132:	57 e4       	ldi	r21, 0x47	; 71
 134:	6f 81       	ldd	r22, Y+7	; 0x07
 136:	78 85       	ldd	r23, Y+8	; 0x08
 138:	89 85       	ldd	r24, Y+9	; 0x09
 13a:	9a 85       	ldd	r25, Y+10	; 0x0a
 13c:	0e 94 a9 03 	call	0x752	; 0x752 <__gesf2>
 140:	18 16       	cp	r1, r24
 142:	4c f5       	brge	.+82     	; 0x196 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e2       	ldi	r20, 0x20	; 32
 14a:	51 e4       	ldi	r21, 0x41	; 65
 14c:	6b 81       	ldd	r22, Y+3	; 0x03
 14e:	7c 81       	ldd	r23, Y+4	; 0x04
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	9e 81       	ldd	r25, Y+6	; 0x06
 154:	0e 94 ae 03 	call	0x75c	; 0x75c <__mulsf3>
 158:	dc 01       	movw	r26, r24
 15a:	cb 01       	movw	r24, r22
 15c:	bc 01       	movw	r22, r24
 15e:	cd 01       	movw	r24, r26
 160:	0e 94 2d 03 	call	0x65a	; 0x65a <__fixunssfsi>
 164:	dc 01       	movw	r26, r24
 166:	cb 01       	movw	r24, r22
 168:	9c 87       	std	Y+12, r25	; 0x0c
 16a:	8b 87       	std	Y+11, r24	; 0x0b
 16c:	0f c0       	rjmp	.+30     	; 0x18c <main+0xe6>
 16e:	89 e1       	ldi	r24, 0x19	; 25
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	9e 87       	std	Y+14, r25	; 0x0e
 174:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 176:	8d 85       	ldd	r24, Y+13	; 0x0d
 178:	9e 85       	ldd	r25, Y+14	; 0x0e
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xd4>
 17e:	9e 87       	std	Y+14, r25	; 0x0e
 180:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	8b 85       	ldd	r24, Y+11	; 0x0b
 184:	9c 85       	ldd	r25, Y+12	; 0x0c
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	9c 87       	std	Y+12, r25	; 0x0c
 18a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	8b 85       	ldd	r24, Y+11	; 0x0b
 18e:	9c 85       	ldd	r25, Y+12	; 0x0c
 190:	89 2b       	or	r24, r25
 192:	69 f7       	brne	.-38     	; 0x16e <main+0xc8>
 194:	14 c0       	rjmp	.+40     	; 0x1be <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 196:	6f 81       	ldd	r22, Y+7	; 0x07
 198:	78 85       	ldd	r23, Y+8	; 0x08
 19a:	89 85       	ldd	r24, Y+9	; 0x09
 19c:	9a 85       	ldd	r25, Y+10	; 0x0a
 19e:	0e 94 2d 03 	call	0x65a	; 0x65a <__fixunssfsi>
 1a2:	dc 01       	movw	r26, r24
 1a4:	cb 01       	movw	r24, r22
 1a6:	9c 87       	std	Y+12, r25	; 0x0c
 1a8:	8b 87       	std	Y+11, r24	; 0x0b
 1aa:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ac:	9c 85       	ldd	r25, Y+12	; 0x0c
 1ae:	98 8b       	std	Y+16, r25	; 0x10
 1b0:	8f 87       	std	Y+15, r24	; 0x0f
 1b2:	8f 85       	ldd	r24, Y+15	; 0x0f
 1b4:	98 89       	ldd	r25, Y+16	; 0x10
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x110>
 1ba:	98 8b       	std	Y+16, r25	; 0x10
 1bc:	8f 87       	std	Y+15, r24	; 0x0f
    while (1) {
         _delay_ms(10);         // Wait for 10 milliseconds
         LEDM_Manage();
 1be:	0e 94 8f 02 	call	0x51e	; 0x51e <LEDM_Manage>
         if (counter == 2)
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	02 97       	sbiw	r24, 0x02	; 2
 1c8:	31 f4       	brne	.+12     	; 0x1d6 <main+0x130>
         {
           WDGM_MainFunction();
 1ca:	0e 94 7f 01 	call	0x2fe	; 0x2fe <WDGM_MainFunction>
           counter = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	9a 83       	std	Y+2, r25	; 0x02
 1d4:	89 83       	std	Y+1, r24	; 0x01
         }
         counter++;
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	9a 83       	std	Y+2, r25	; 0x02
 1de:	89 83       	std	Y+1, r24	; 0x01

    int counter = 1;
    LEDM_Manage();
    WDGM_MainFunction();
    while (1) {
         _delay_ms(10);         // Wait for 10 milliseconds
 1e0:	7c cf       	rjmp	.-264    	; 0xda <main+0x34>

000001e2 <__vector_11>:


int x = 0;


ISR(TIMER1_COMPA_vect) {
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
    x = 1;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 206:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
    PORTB |= (1 << 0); // Set PB0 high
 20a:	85 e2       	ldi	r24, 0x25	; 37
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	20 81       	ld	r18, Z
 212:	85 e2       	ldi	r24, 0x25	; 37
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	21 60       	ori	r18, 0x01	; 1
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
    // wdt_reset(); // Reset the watchdog timer

    // for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
    // _delay_ms(1000); 
    // WDTCSR = (1 << WDIE);
}
 21c:	00 00       	nop
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <WDGDrv_Init>:

void WDGDrv_Init(void) {
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62

    cli();
 23e:	f8 94       	cli
    // configure the timer
    TCCR1B |= (1 << WGM12);
 240:	81 e8       	ldi	r24, 0x81	; 129
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	20 81       	ld	r18, Z
 248:	81 e8       	ldi	r24, 0x81	; 129
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	28 60       	ori	r18, 0x08	; 8
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18

    // Set the value for a 50ms interval
    // Using a prescaler of 64: (16e6 / 64) = 250000 Hz Timer Frequency
    // 50ms = 0.05s, so OCR1A = 0.05 * 250000 = 12500 - 1 (subtract 1 because it starts from 0)
    OCR1A = 12499;
 252:	88 e8       	ldi	r24, 0x88	; 136
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	23 ed       	ldi	r18, 0xD3	; 211
 258:	30 e3       	ldi	r19, 0x30	; 48
 25a:	fc 01       	movw	r30, r24
 25c:	31 83       	std	Z+1, r19	; 0x01
 25e:	20 83       	st	Z, r18

    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
 260:	81 e8       	ldi	r24, 0x81	; 129
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fc 01       	movw	r30, r24
 266:	20 81       	ld	r18, Z
 268:	81 e8       	ldi	r24, 0x81	; 129
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	23 60       	ori	r18, 0x03	; 3
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18

    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 272:	8f e6       	ldi	r24, 0x6F	; 111
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	fc 01       	movw	r30, r24
 278:	20 81       	ld	r18, Z
 27a:	8f e6       	ldi	r24, 0x6F	; 111
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	22 60       	ori	r18, 0x02	; 2
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18



    DDRB |= (1 << 0);
 284:	84 e2       	ldi	r24, 0x24	; 36
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	20 81       	ld	r18, Z
 28c:	84 e2       	ldi	r24, 0x24	; 36
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	21 60       	ori	r18, 0x01	; 1
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	fc 01       	movw	r30, r24
 29c:	20 81       	ld	r18, Z
 29e:	85 e2       	ldi	r24, 0x25	; 37
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	2e 7f       	andi	r18, 0xFE	; 254
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
    // SREG &= ~(1 << I);
    //Interrupt and System Reset Mode
    // wdt_enable(2);
    // WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
    // WDTCSR =  (1 << WDE)| (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
    sei(); // Enable global interrupts
 2a8:	78 94       	sei
    // SREG |= (1 << I);
// 
}
 2aa:	00 00       	nop
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
    // uint32 current_time = HAL_GetTick();

    if(WDGM_PovideSuppervisionStatus()==OK  /*&& the WDGM_MainFunction_is_not_STUCK*/){
 2ba:	0e 94 c5 01 	call	0x38a	; 0x38a <WDGM_PovideSuppervisionStatus>
       //refresh 
    }else{
        return;
    }
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <WDGM_Init>:
static uint32 led_no_calls;
static uint8 call_count;
static uint32 stuck;

void WDGM_Init(void)
{
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>
    led_no_calls = 0;
 2d2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls>
 2d6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x1>
 2da:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x2>
 2de:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x3>
    call_count = 0;
 2e2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <call_count>
    stuck = 0;
 2e6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <stuck>
 2ea:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <stuck+0x1>
 2ee:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stuck+0x2>
 2f2:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <stuck+0x3>
}
 2f6:	00 00       	nop
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
    call_count ++;
 306:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <call_count>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <call_count>
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms 
    if (call_count <= 6) {
 310:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <call_count>
 314:	87 30       	cpi	r24, 0x07	; 7
 316:	48 f5       	brcc	.+82     	; 0x36a <WDGM_MainFunction+0x6c>
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 318:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_no_calls>
 31c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <led_no_calls+0x1>
 320:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <led_no_calls+0x2>
 324:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <led_no_calls+0x3>
 328:	08 97       	sbiw	r24, 0x08	; 8
 32a:	a1 05       	cpc	r26, r1
 32c:	b1 05       	cpc	r27, r1
 32e:	78 f0       	brcs	.+30     	; 0x34e <WDGM_MainFunction+0x50>
 330:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_no_calls>
 334:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <led_no_calls+0x1>
 338:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <led_no_calls+0x2>
 33c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <led_no_calls+0x3>
 340:	0d 97       	sbiw	r24, 0x0d	; 13
 342:	a1 05       	cpc	r26, r1
 344:	b1 05       	cpc	r27, r1
 346:	18 f4       	brcc	.+6      	; 0x34e <WDGM_MainFunction+0x50>
        { 
            status = OK;
 348:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <status>
 34c:	03 c0       	rjmp	.+6      	; 0x354 <WDGM_MainFunction+0x56>
        } else {
            status = NOK;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 354:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls>
 358:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x1>
 35c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x2>
 360:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x3>
        call_count = 0; // Reset count for next 100ms period
 364:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <call_count>
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
    }
}
 368:	0c c0       	rjmp	.+24     	; 0x382 <WDGM_MainFunction+0x84>
        led_no_calls = 0; // Reset the call counter for the next 100ms period
        call_count = 0; // Reset count for next 100ms period
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	a0 e0       	ldi	r26, 0x00	; 0
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <stuck>
 376:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <stuck+0x1>
 37a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <stuck+0x2>
 37e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <stuck+0x3>
    }
}
 382:	00 00       	nop
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 392:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <status>
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <WDGM_AlivenessIndication>:



void WDGM_AlivenessIndication(void)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 3a4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_no_calls>
 3a8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <led_no_calls+0x1>
 3ac:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <led_no_calls+0x2>
 3b0:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <led_no_calls+0x3>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	a1 1d       	adc	r26, r1
 3b8:	b1 1d       	adc	r27, r1
 3ba:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <led_no_calls>
 3be:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <led_no_calls+0x1>
 3c2:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <led_no_calls+0x2>
 3c6:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <led_no_calls+0x3>
}
 3ca:	00 00       	nop
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <Nvic_EnableInterrupt+0x6>
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	80 36       	cpi	r24, 0x60	; 96
 3e4:	c0 f5       	brcc	.+112    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	82 95       	swap	r24
 3ea:	86 95       	lsr	r24
 3ec:	87 70       	andi	r24, 0x07	; 7
 3ee:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	8f 71       	andi	r24, 0x1F	; 31
 3f4:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	80 50       	subi	r24, 0x00	; 0
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	fc 01       	movw	r30, r24
 406:	80 81       	ld	r24, Z
 408:	91 81       	ldd	r25, Z+1	; 0x01
 40a:	fc 01       	movw	r30, r24
 40c:	20 81       	ld	r18, Z
 40e:	31 81       	ldd	r19, Z+1	; 0x01
 410:	42 81       	ldd	r20, Z+2	; 0x02
 412:	53 81       	ldd	r21, Z+3	; 0x03
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	68 2f       	mov	r22, r24
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	09 2e       	mov	r0, r25
 42a:	00 0c       	add	r0, r0
 42c:	aa 0b       	sbc	r26, r26
 42e:	bb 0b       	sbc	r27, r27
 430:	69 81       	ldd	r22, Y+1	; 0x01
 432:	66 2f       	mov	r22, r22
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	60 50       	subi	r22, 0x00	; 0
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	fb 01       	movw	r30, r22
 440:	60 81       	ld	r22, Z
 442:	71 81       	ldd	r23, Z+1	; 0x01
 444:	82 2b       	or	r24, r18
 446:	93 2b       	or	r25, r19
 448:	a4 2b       	or	r26, r20
 44a:	b5 2b       	or	r27, r21
 44c:	fb 01       	movw	r30, r22
 44e:	80 83       	st	Z, r24
 450:	91 83       	std	Z+1, r25	; 0x01
 452:	a2 83       	std	Z+2, r26	; 0x02
 454:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 456:	00 00       	nop
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	00 d0       	rcall	.+0      	; 0x46a <Nvic_DisableInterrupt+0x6>
 46a:	1f 92       	push	r1
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	80 36       	cpi	r24, 0x60	; 96
 476:	c0 f5       	brcc	.+112    	; 0x4e8 <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	82 95       	swap	r24
 47c:	86 95       	lsr	r24
 47e:	87 70       	andi	r24, 0x07	; 7
 480:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 482:	8b 81       	ldd	r24, Y+3	; 0x03
 484:	8f 71       	andi	r24, 0x1F	; 31
 486:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	8a 5f       	subi	r24, 0xFA	; 250
 494:	9e 4f       	sbci	r25, 0xFE	; 254
 496:	fc 01       	movw	r30, r24
 498:	80 81       	ld	r24, Z
 49a:	91 81       	ldd	r25, Z+1	; 0x01
 49c:	fc 01       	movw	r30, r24
 49e:	20 81       	ld	r18, Z
 4a0:	31 81       	ldd	r19, Z+1	; 0x01
 4a2:	42 81       	ldd	r20, Z+2	; 0x02
 4a4:	53 81       	ldd	r21, Z+3	; 0x03
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	68 2f       	mov	r22, r24
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <Nvic_DisableInterrupt+0x52>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <Nvic_DisableInterrupt+0x4e>
 4ba:	09 2e       	mov	r0, r25
 4bc:	00 0c       	add	r0, r0
 4be:	aa 0b       	sbc	r26, r26
 4c0:	bb 0b       	sbc	r27, r27
 4c2:	69 81       	ldd	r22, Y+1	; 0x01
 4c4:	66 2f       	mov	r22, r22
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	6a 5f       	subi	r22, 0xFA	; 250
 4ce:	7e 4f       	sbci	r23, 0xFE	; 254
 4d0:	fb 01       	movw	r30, r22
 4d2:	60 81       	ld	r22, Z
 4d4:	71 81       	ldd	r23, Z+1	; 0x01
 4d6:	82 2b       	or	r24, r18
 4d8:	93 2b       	or	r25, r19
 4da:	a4 2b       	or	r26, r20
 4dc:	b5 2b       	or	r27, r21
 4de:	fb 01       	movw	r30, r22
 4e0:	80 83       	st	Z, r24
 4e2:	91 83       	std	Z+1, r25	; 0x01
 4e4:	a2 83       	std	Z+2, r26	; 0x02
 4e6:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 4e8:	00 00       	nop
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	08 95       	ret

000004f6 <LEDM_Init>:

static uint8 led_state;


void LEDM_Init(void)
{
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 4fe:	0e 94 cc 02 	call	0x598	; 0x598 <GPIO_Init>
    led_state = 0;
 502:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <led_state>
    time_counter = 0;
 506:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_counter>
 50a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter+0x1>
 50e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x2>
 512:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x3>
}
 516:	00 00       	nop
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <LEDM_Manage>:

void LEDM_Manage(void)
{
 51e:	cf 93       	push	r28
 520:	df 93       	push	r29
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
	if (time_counter == 500)
 526:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <time_counter>
 52a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <time_counter+0x1>
 52e:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <time_counter+0x2>
 532:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <time_counter+0x3>
 536:	84 3f       	cpi	r24, 0xF4	; 244
 538:	91 40       	sbci	r25, 0x01	; 1
 53a:	a1 05       	cpc	r26, r1
 53c:	b1 05       	cpc	r27, r1
 53e:	99 f4       	brne	.+38     	; 0x566 <LEDM_Manage+0x48>
    {
		led_state = ~led_state;
 540:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <led_state>
 544:	80 95       	com	r24
 546:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 54a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <led_state>
 54e:	68 2f       	mov	r22, r24
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 e5 02 	call	0x5ca	; 0x5ca <GPIO_Write>
		time_counter = 0;
 556:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_counter>
 55a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter+0x1>
 55e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x2>
 562:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x3>
    }
	time_counter += 10;
 566:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <time_counter>
 56a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <time_counter+0x1>
 56e:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <time_counter+0x2>
 572:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <time_counter+0x3>
 576:	0a 96       	adiw	r24, 0x0a	; 10
 578:	a1 1d       	adc	r26, r1
 57a:	b1 1d       	adc	r27, r1
 57c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <time_counter>
 580:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <time_counter+0x1>
 584:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <time_counter+0x2>
 588:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 58c:	0e 94 ce 01 	call	0x39c	; 0x39c <WDGM_AlivenessIndication>
 590:	00 00       	nop
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <GPIO_Init>:
#include "Gpio_Private.h"

GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	00 d0       	rcall	.+0      	; 0x59e <GPIO_Init+0x6>
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 5a2:	83 e2       	ldi	r24, 0x23	; 35
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	9a 83       	std	Y+2, r25	; 0x02
 5a8:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->DDR |= (1 << LED_PIN_ID);
 5aa:	89 81       	ldd	r24, Y+1	; 0x01
 5ac:	9a 81       	ldd	r25, Y+2	; 0x02
 5ae:	fc 01       	movw	r30, r24
 5b0:	81 81       	ldd	r24, Z+1	; 0x01
 5b2:	28 2f       	mov	r18, r24
 5b4:	22 60       	ori	r18, 0x02	; 2
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ba:	fc 01       	movw	r30, r24
 5bc:	21 83       	std	Z+1, r18	; 0x01

}
 5be:	00 00       	nop
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <GPIO_Write+0x6>
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <GPIO_Write+0x8>
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
 5d6:	8b 83       	std	Y+3, r24	; 0x03
 5d8:	6c 83       	std	Y+4, r22	; 0x04
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 5da:	83 e2       	ldi	r24, 0x23	; 35
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	9a 83       	std	Y+2, r25	; 0x02
 5e0:	89 83       	std	Y+1, r24	; 0x01
    if (PinData) {
 5e2:	8c 81       	ldd	r24, Y+4	; 0x04
 5e4:	88 23       	and	r24, r24
 5e6:	b1 f0       	breq	.+44     	; 0x614 <GPIO_Write+0x4a>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	9a 81       	ldd	r25, Y+2	; 0x02
 5ec:	fc 01       	movw	r30, r24
 5ee:	82 81       	ldd	r24, Z+2	; 0x02
 5f0:	48 2f       	mov	r20, r24
 5f2:	8b 81       	ldd	r24, Y+3	; 0x03
 5f4:	28 2f       	mov	r18, r24
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <GPIO_Write+0x38>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	2a 95       	dec	r18
 604:	e2 f7       	brpl	.-8      	; 0x5fe <GPIO_Write+0x34>
 606:	84 2b       	or	r24, r20
 608:	28 2f       	mov	r18, r24
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	9a 81       	ldd	r25, Y+2	; 0x02
 60e:	fc 01       	movw	r30, r24
 610:	22 83       	std	Z+2, r18	; 0x02
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
    }
}
 612:	16 c0       	rjmp	.+44     	; 0x640 <GPIO_Write+0x76>
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	9a 81       	ldd	r25, Y+2	; 0x02
 618:	fc 01       	movw	r30, r24
 61a:	82 81       	ldd	r24, Z+2	; 0x02
 61c:	48 2f       	mov	r20, r24
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <GPIO_Write+0x64>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	2a 95       	dec	r18
 630:	e2 f7       	brpl	.-8      	; 0x62a <GPIO_Write+0x60>
 632:	80 95       	com	r24
 634:	84 23       	and	r24, r20
 636:	28 2f       	mov	r18, r24
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	9a 81       	ldd	r25, Y+2	; 0x02
 63c:	fc 01       	movw	r30, r24
 63e:	22 83       	std	Z+2, r18	; 0x02
    }
}
 640:	00 00       	nop
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <__cmpsf2>:
 650:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fp_cmp>
 654:	08 f4       	brcc	.+2      	; 0x658 <__cmpsf2+0x8>
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret

0000065a <__fixunssfsi>:
 65a:	0e 94 88 03 	call	0x710	; 0x710 <__fp_splitA>
 65e:	88 f0       	brcs	.+34     	; 0x682 <__fixunssfsi+0x28>
 660:	9f 57       	subi	r25, 0x7F	; 127
 662:	98 f0       	brcs	.+38     	; 0x68a <__fixunssfsi+0x30>
 664:	b9 2f       	mov	r27, r25
 666:	99 27       	eor	r25, r25
 668:	b7 51       	subi	r27, 0x17	; 23
 66a:	b0 f0       	brcs	.+44     	; 0x698 <__fixunssfsi+0x3e>
 66c:	e1 f0       	breq	.+56     	; 0x6a6 <__fixunssfsi+0x4c>
 66e:	66 0f       	add	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	1a f0       	brmi	.+6      	; 0x67e <__fixunssfsi+0x24>
 678:	ba 95       	dec	r27
 67a:	c9 f7       	brne	.-14     	; 0x66e <__fixunssfsi+0x14>
 67c:	14 c0       	rjmp	.+40     	; 0x6a6 <__fixunssfsi+0x4c>
 67e:	b1 30       	cpi	r27, 0x01	; 1
 680:	91 f0       	breq	.+36     	; 0x6a6 <__fixunssfsi+0x4c>
 682:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_zero>
 686:	b1 e0       	ldi	r27, 0x01	; 1
 688:	08 95       	ret
 68a:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_zero>
 68e:	67 2f       	mov	r22, r23
 690:	78 2f       	mov	r23, r24
 692:	88 27       	eor	r24, r24
 694:	b8 5f       	subi	r27, 0xF8	; 248
 696:	39 f0       	breq	.+14     	; 0x6a6 <__fixunssfsi+0x4c>
 698:	b9 3f       	cpi	r27, 0xF9	; 249
 69a:	cc f3       	brlt	.-14     	; 0x68e <__fixunssfsi+0x34>
 69c:	86 95       	lsr	r24
 69e:	77 95       	ror	r23
 6a0:	67 95       	ror	r22
 6a2:	b3 95       	inc	r27
 6a4:	d9 f7       	brne	.-10     	; 0x69c <__fixunssfsi+0x42>
 6a6:	3e f4       	brtc	.+14     	; 0x6b6 <__fixunssfsi+0x5c>
 6a8:	90 95       	com	r25
 6aa:	80 95       	com	r24
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <__fp_cmp>:
 6b8:	99 0f       	add	r25, r25
 6ba:	00 08       	sbc	r0, r0
 6bc:	55 0f       	add	r21, r21
 6be:	aa 0b       	sbc	r26, r26
 6c0:	e0 e8       	ldi	r30, 0x80	; 128
 6c2:	fe ef       	ldi	r31, 0xFE	; 254
 6c4:	16 16       	cp	r1, r22
 6c6:	17 06       	cpc	r1, r23
 6c8:	e8 07       	cpc	r30, r24
 6ca:	f9 07       	cpc	r31, r25
 6cc:	c0 f0       	brcs	.+48     	; 0x6fe <__fp_cmp+0x46>
 6ce:	12 16       	cp	r1, r18
 6d0:	13 06       	cpc	r1, r19
 6d2:	e4 07       	cpc	r30, r20
 6d4:	f5 07       	cpc	r31, r21
 6d6:	98 f0       	brcs	.+38     	; 0x6fe <__fp_cmp+0x46>
 6d8:	62 1b       	sub	r22, r18
 6da:	73 0b       	sbc	r23, r19
 6dc:	84 0b       	sbc	r24, r20
 6de:	95 0b       	sbc	r25, r21
 6e0:	39 f4       	brne	.+14     	; 0x6f0 <__fp_cmp+0x38>
 6e2:	0a 26       	eor	r0, r26
 6e4:	61 f0       	breq	.+24     	; 0x6fe <__fp_cmp+0x46>
 6e6:	23 2b       	or	r18, r19
 6e8:	24 2b       	or	r18, r20
 6ea:	25 2b       	or	r18, r21
 6ec:	21 f4       	brne	.+8      	; 0x6f6 <__fp_cmp+0x3e>
 6ee:	08 95       	ret
 6f0:	0a 26       	eor	r0, r26
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <__fp_cmp+0x3e>
 6f4:	a1 40       	sbci	r26, 0x01	; 1
 6f6:	a6 95       	lsr	r26
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	81 1d       	adc	r24, r1
 6fc:	81 1d       	adc	r24, r1
 6fe:	08 95       	ret

00000700 <__fp_split3>:
 700:	57 fd       	sbrc	r21, 7
 702:	90 58       	subi	r25, 0x80	; 128
 704:	44 0f       	add	r20, r20
 706:	55 1f       	adc	r21, r21
 708:	59 f0       	breq	.+22     	; 0x720 <__fp_splitA+0x10>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	71 f0       	breq	.+28     	; 0x72a <__fp_splitA+0x1a>
 70e:	47 95       	ror	r20

00000710 <__fp_splitA>:
 710:	88 0f       	add	r24, r24
 712:	97 fb       	bst	r25, 7
 714:	99 1f       	adc	r25, r25
 716:	61 f0       	breq	.+24     	; 0x730 <__fp_splitA+0x20>
 718:	9f 3f       	cpi	r25, 0xFF	; 255
 71a:	79 f0       	breq	.+30     	; 0x73a <__fp_splitA+0x2a>
 71c:	87 95       	ror	r24
 71e:	08 95       	ret
 720:	12 16       	cp	r1, r18
 722:	13 06       	cpc	r1, r19
 724:	14 06       	cpc	r1, r20
 726:	55 1f       	adc	r21, r21
 728:	f2 cf       	rjmp	.-28     	; 0x70e <__fp_split3+0xe>
 72a:	46 95       	lsr	r20
 72c:	f1 df       	rcall	.-30     	; 0x710 <__fp_splitA>
 72e:	08 c0       	rjmp	.+16     	; 0x740 <__fp_splitA+0x30>
 730:	16 16       	cp	r1, r22
 732:	17 06       	cpc	r1, r23
 734:	18 06       	cpc	r1, r24
 736:	99 1f       	adc	r25, r25
 738:	f1 cf       	rjmp	.-30     	; 0x71c <__fp_splitA+0xc>
 73a:	86 95       	lsr	r24
 73c:	71 05       	cpc	r23, r1
 73e:	61 05       	cpc	r22, r1
 740:	08 94       	sec
 742:	08 95       	ret

00000744 <__fp_zero>:
 744:	e8 94       	clt

00000746 <__fp_szero>:
 746:	bb 27       	eor	r27, r27
 748:	66 27       	eor	r22, r22
 74a:	77 27       	eor	r23, r23
 74c:	cb 01       	movw	r24, r22
 74e:	97 f9       	bld	r25, 7
 750:	08 95       	ret

00000752 <__gesf2>:
 752:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fp_cmp>
 756:	08 f4       	brcc	.+2      	; 0x75a <__gesf2+0x8>
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__mulsf3>:
 75c:	0e 94 c1 03 	call	0x782	; 0x782 <__mulsf3x>
 760:	0c 94 32 04 	jmp	0x864	; 0x864 <__fp_round>
 764:	0e 94 24 04 	call	0x848	; 0x848 <__fp_pscA>
 768:	38 f0       	brcs	.+14     	; 0x778 <__mulsf3+0x1c>
 76a:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscB>
 76e:	20 f0       	brcs	.+8      	; 0x778 <__mulsf3+0x1c>
 770:	95 23       	and	r25, r21
 772:	11 f0       	breq	.+4      	; 0x778 <__mulsf3+0x1c>
 774:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_inf>
 778:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_nan>
 77c:	11 24       	eor	r1, r1
 77e:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_szero>

00000782 <__mulsf3x>:
 782:	0e 94 80 03 	call	0x700	; 0x700 <__fp_split3>
 786:	70 f3       	brcs	.-36     	; 0x764 <__mulsf3+0x8>

00000788 <__mulsf3_pse>:
 788:	95 9f       	mul	r25, r21
 78a:	c1 f3       	breq	.-16     	; 0x77c <__mulsf3+0x20>
 78c:	95 0f       	add	r25, r21
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	55 1f       	adc	r21, r21
 792:	62 9f       	mul	r22, r18
 794:	f0 01       	movw	r30, r0
 796:	72 9f       	mul	r23, r18
 798:	bb 27       	eor	r27, r27
 79a:	f0 0d       	add	r31, r0
 79c:	b1 1d       	adc	r27, r1
 79e:	63 9f       	mul	r22, r19
 7a0:	aa 27       	eor	r26, r26
 7a2:	f0 0d       	add	r31, r0
 7a4:	b1 1d       	adc	r27, r1
 7a6:	aa 1f       	adc	r26, r26
 7a8:	64 9f       	mul	r22, r20
 7aa:	66 27       	eor	r22, r22
 7ac:	b0 0d       	add	r27, r0
 7ae:	a1 1d       	adc	r26, r1
 7b0:	66 1f       	adc	r22, r22
 7b2:	82 9f       	mul	r24, r18
 7b4:	22 27       	eor	r18, r18
 7b6:	b0 0d       	add	r27, r0
 7b8:	a1 1d       	adc	r26, r1
 7ba:	62 1f       	adc	r22, r18
 7bc:	73 9f       	mul	r23, r19
 7be:	b0 0d       	add	r27, r0
 7c0:	a1 1d       	adc	r26, r1
 7c2:	62 1f       	adc	r22, r18
 7c4:	83 9f       	mul	r24, r19
 7c6:	a0 0d       	add	r26, r0
 7c8:	61 1d       	adc	r22, r1
 7ca:	22 1f       	adc	r18, r18
 7cc:	74 9f       	mul	r23, r20
 7ce:	33 27       	eor	r19, r19
 7d0:	a0 0d       	add	r26, r0
 7d2:	61 1d       	adc	r22, r1
 7d4:	23 1f       	adc	r18, r19
 7d6:	84 9f       	mul	r24, r20
 7d8:	60 0d       	add	r22, r0
 7da:	21 1d       	adc	r18, r1
 7dc:	82 2f       	mov	r24, r18
 7de:	76 2f       	mov	r23, r22
 7e0:	6a 2f       	mov	r22, r26
 7e2:	11 24       	eor	r1, r1
 7e4:	9f 57       	subi	r25, 0x7F	; 127
 7e6:	50 40       	sbci	r21, 0x00	; 0
 7e8:	9a f0       	brmi	.+38     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ea:	f1 f0       	breq	.+60     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7ec:	88 23       	and	r24, r24
 7ee:	4a f0       	brmi	.+18     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f0:	ee 0f       	add	r30, r30
 7f2:	ff 1f       	adc	r31, r31
 7f4:	bb 1f       	adc	r27, r27
 7f6:	66 1f       	adc	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	91 50       	subi	r25, 0x01	; 1
 7fe:	50 40       	sbci	r21, 0x00	; 0
 800:	a9 f7       	brne	.-22     	; 0x7ec <__mulsf3_pse+0x64>
 802:	9e 3f       	cpi	r25, 0xFE	; 254
 804:	51 05       	cpc	r21, r1
 806:	80 f0       	brcs	.+32     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 808:	0c 94 1b 04 	jmp	0x836	; 0x836 <__fp_inf>
 80c:	0c 94 a3 03 	jmp	0x746	; 0x746 <__fp_szero>
 810:	5f 3f       	cpi	r21, 0xFF	; 255
 812:	e4 f3       	brlt	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 814:	98 3e       	cpi	r25, 0xE8	; 232
 816:	d4 f3       	brlt	.-12     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 818:	86 95       	lsr	r24
 81a:	77 95       	ror	r23
 81c:	67 95       	ror	r22
 81e:	b7 95       	ror	r27
 820:	f7 95       	ror	r31
 822:	e7 95       	ror	r30
 824:	9f 5f       	subi	r25, 0xFF	; 255
 826:	c1 f7       	brne	.-16     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 828:	fe 2b       	or	r31, r30
 82a:	88 0f       	add	r24, r24
 82c:	91 1d       	adc	r25, r1
 82e:	96 95       	lsr	r25
 830:	87 95       	ror	r24
 832:	97 f9       	bld	r25, 7
 834:	08 95       	ret

00000836 <__fp_inf>:
 836:	97 f9       	bld	r25, 7
 838:	9f 67       	ori	r25, 0x7F	; 127
 83a:	80 e8       	ldi	r24, 0x80	; 128
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	08 95       	ret

00000842 <__fp_nan>:
 842:	9f ef       	ldi	r25, 0xFF	; 255
 844:	80 ec       	ldi	r24, 0xC0	; 192
 846:	08 95       	ret

00000848 <__fp_pscA>:
 848:	00 24       	eor	r0, r0
 84a:	0a 94       	dec	r0
 84c:	16 16       	cp	r1, r22
 84e:	17 06       	cpc	r1, r23
 850:	18 06       	cpc	r1, r24
 852:	09 06       	cpc	r0, r25
 854:	08 95       	ret

00000856 <__fp_pscB>:
 856:	00 24       	eor	r0, r0
 858:	0a 94       	dec	r0
 85a:	12 16       	cp	r1, r18
 85c:	13 06       	cpc	r1, r19
 85e:	14 06       	cpc	r1, r20
 860:	05 06       	cpc	r0, r21
 862:	08 95       	ret

00000864 <__fp_round>:
 864:	09 2e       	mov	r0, r25
 866:	03 94       	inc	r0
 868:	00 0c       	add	r0, r0
 86a:	11 f4       	brne	.+4      	; 0x870 <__fp_round+0xc>
 86c:	88 23       	and	r24, r24
 86e:	52 f0       	brmi	.+20     	; 0x884 <__fp_round+0x20>
 870:	bb 0f       	add	r27, r27
 872:	40 f4       	brcc	.+16     	; 0x884 <__fp_round+0x20>
 874:	bf 2b       	or	r27, r31
 876:	11 f4       	brne	.+4      	; 0x87c <__fp_round+0x18>
 878:	60 ff       	sbrs	r22, 0
 87a:	04 c0       	rjmp	.+8      	; 0x884 <__fp_round+0x20>
 87c:	6f 5f       	subi	r22, 0xFF	; 255
 87e:	7f 4f       	sbci	r23, 0xFF	; 255
 880:	8f 4f       	sbci	r24, 0xFF	; 255
 882:	9f 4f       	sbci	r25, 0xFF	; 255
 884:	08 95       	ret

00000886 <_exit>:
 886:	f8 94       	cli

00000888 <__stop_program>:
 888:	ff cf       	rjmp	.-2      	; 0x888 <__stop_program>
