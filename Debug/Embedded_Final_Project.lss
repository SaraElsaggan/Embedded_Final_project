
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .data         00000012  00800100  0000038c  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800112  00800112  00000432  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8b  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a99  00000000  00000000  0000142f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b1e  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000029e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007dc1  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  0000a949  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e62  00000000  00000000  0000ac0f  2**0
=======
  0 .data         00000012  00800100  00000888  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800112  00800112  0000092e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df6  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a45  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd3  00000000  00000000  000022e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d40  00000000  00000000  00003330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000410  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b480  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e1b  00000000  00000000  0000b528  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
<<<<<<< Updated upstream
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
=======
  18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_6>
>>>>>>> Stashed changes
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< Updated upstream
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f3 e0       	ldi	r31, 0x03	; 3
=======
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f8 e0       	ldi	r31, 0x08	; 8
>>>>>>> Stashed changes
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
<<<<<<< Updated upstream
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>
=======
  9a:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  9e:	0c 94 42 04 	jmp	0x884	; 0x884 <_exit>
>>>>>>> Stashed changes

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

<<<<<<< Updated upstream
000000a6 <main>:
#include <WDGM.h>


=======
000000a6 <SysInit>:

#include <GPIO.h>
#include <LEDM.h>
#include <WDGM.h>

void SysInit(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
  ae:	0e 94 cb 02 	call	0x596	; 0x596 <GPIO_Init>
    LEDM_Init();
  b2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <LEDM_Init>
    WDGM_Init();
  b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <WDGM_Init>
    // WDGDrv_Init();
}
  ba:	00 00       	nop
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <main>:

int main(void) {
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	2e 97       	sbiw	r28, 0x0e	; 14
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
    SysInit();
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
    static uint8 WDGCounter = 0;
>>>>>>> Stashed changes

int main(void) {
    DDRB |= (1 << 0);
  a6:	b8 9a       	sbi	0x17, 0	; 23
    PORTB &= ~(1 << 0);
  a8:	c0 98       	cbi	0x18, 0	; 24
    GPIO_Init();
  aa:	0e 94 b0 01 	call	0x360	; 0x360 <GPIO_Init>
    LEDM_Init();
  ae:	0e 94 71 01 	call	0x2e2	; 0x2e2 <LEDM_Init>
    WDGM_Init();
  b2:	0e 94 c2 00 	call	0x184	; 0x184 <WDGM_Init>
    WDGDrv_Init();
  b6:	0e 94 73 00 	call	0xe6	; 0xe6 <WDGDrv_Init>
    static uint8 WDGCounter = 0;    // Call WDGM_MainFunction for the first time
    WDGM_MainFunction();
<<<<<<< Updated upstream
  ba:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <WDGM_MainFunction>
    // Main loop
    while (1) {
        LEDM_Manage();
  be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LEDM_Manage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	83 ec       	ldi	r24, 0xC3	; 195
  c4:	99 e0       	ldi	r25, 0x09	; 9
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x20>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x26>
  cc:	00 00       	nop
=======
  da:	0e 94 7e 01 	call	0x2fc	; 0x2fc <WDGM_MainFunction>
    // Main loop
    while (1) {
        LEDM_Manage();
  de:	0e 94 8e 02 	call	0x51c	; 0x51c <LEDM_Manage>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a0 e2       	ldi	r26, 0x20	; 32
  e8:	b1 e4       	ldi	r27, 0x41	; 65
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	ab 83       	std	Y+3, r26	; 0x03
  f0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	4a e7       	ldi	r20, 0x7A	; 122
  f8:	53 e4       	ldi	r21, 0x43	; 67
  fa:	69 81       	ldd	r22, Y+1	; 0x01
  fc:	7a 81       	ldd	r23, Y+2	; 0x02
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	0e 94 ad 03 	call	0x75a	; 0x75a <__mulsf3>
 106:	dc 01       	movw	r26, r24
 108:	cb 01       	movw	r24, r22
 10a:	8d 83       	std	Y+5, r24	; 0x05
 10c:	9e 83       	std	Y+6, r25	; 0x06
 10e:	af 83       	std	Y+7, r26	; 0x07
 110:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e8       	ldi	r20, 0x80	; 128
 118:	5f e3       	ldi	r21, 0x3F	; 63
 11a:	6d 81       	ldd	r22, Y+5	; 0x05
 11c:	7e 81       	ldd	r23, Y+6	; 0x06
 11e:	8f 81       	ldd	r24, Y+7	; 0x07
 120:	98 85       	ldd	r25, Y+8	; 0x08
 122:	0e 94 27 03 	call	0x64e	; 0x64e <__cmpsf2>
 126:	88 23       	and	r24, r24
 128:	2c f4       	brge	.+10     	; 0x134 <main+0x72>
		__ticks = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9a 87       	std	Y+10, r25	; 0x0a
 130:	89 87       	std	Y+9, r24	; 0x09
 132:	3f c0       	rjmp	.+126    	; 0x1b2 <main+0xf0>
	else if (__tmp > 65535)
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	4f e7       	ldi	r20, 0x7F	; 127
 13a:	57 e4       	ldi	r21, 0x47	; 71
 13c:	6d 81       	ldd	r22, Y+5	; 0x05
 13e:	7e 81       	ldd	r23, Y+6	; 0x06
 140:	8f 81       	ldd	r24, Y+7	; 0x07
 142:	98 85       	ldd	r25, Y+8	; 0x08
 144:	0e 94 a8 03 	call	0x750	; 0x750 <__gesf2>
 148:	18 16       	cp	r1, r24
 14a:	4c f5       	brge	.+82     	; 0x19e <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e2       	ldi	r20, 0x20	; 32
 152:	51 e4       	ldi	r21, 0x41	; 65
 154:	69 81       	ldd	r22, Y+1	; 0x01
 156:	7a 81       	ldd	r23, Y+2	; 0x02
 158:	8b 81       	ldd	r24, Y+3	; 0x03
 15a:	9c 81       	ldd	r25, Y+4	; 0x04
 15c:	0e 94 ad 03 	call	0x75a	; 0x75a <__mulsf3>
 160:	dc 01       	movw	r26, r24
 162:	cb 01       	movw	r24, r22
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	0e 94 2c 03 	call	0x658	; 0x658 <__fixunssfsi>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	9a 87       	std	Y+10, r25	; 0x0a
 172:	89 87       	std	Y+9, r24	; 0x09
 174:	0f c0       	rjmp	.+30     	; 0x194 <main+0xd2>
 176:	89 e1       	ldi	r24, 0x19	; 25
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	9c 87       	std	Y+12, r25	; 0x0c
 17c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17e:	8b 85       	ldd	r24, Y+11	; 0x0b
 180:	9c 85       	ldd	r25, Y+12	; 0x0c
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0xc0>
 186:	9c 87       	std	Y+12, r25	; 0x0c
 188:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18a:	89 85       	ldd	r24, Y+9	; 0x09
 18c:	9a 85       	ldd	r25, Y+10	; 0x0a
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	9a 87       	std	Y+10, r25	; 0x0a
 192:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 194:	89 85       	ldd	r24, Y+9	; 0x09
 196:	9a 85       	ldd	r25, Y+10	; 0x0a
 198:	89 2b       	or	r24, r25
 19a:	69 f7       	brne	.-38     	; 0x176 <main+0xb4>
 19c:	14 c0       	rjmp	.+40     	; 0x1c6 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 19e:	6d 81       	ldd	r22, Y+5	; 0x05
 1a0:	7e 81       	ldd	r23, Y+6	; 0x06
 1a2:	8f 81       	ldd	r24, Y+7	; 0x07
 1a4:	98 85       	ldd	r25, Y+8	; 0x08
 1a6:	0e 94 2c 03 	call	0x658	; 0x658 <__fixunssfsi>
 1aa:	dc 01       	movw	r26, r24
 1ac:	cb 01       	movw	r24, r22
 1ae:	9a 87       	std	Y+10, r25	; 0x0a
 1b0:	89 87       	std	Y+9, r24	; 0x09
 1b2:	89 85       	ldd	r24, Y+9	; 0x09
 1b4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b6:	9e 87       	std	Y+14, r25	; 0x0e
 1b8:	8d 87       	std	Y+13, r24	; 0x0d
 1ba:	8d 85       	ldd	r24, Y+13	; 0x0d
 1bc:	9e 85       	ldd	r25, Y+14	; 0x0e
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0xfc>
 1c2:	9e 87       	std	Y+14, r25	; 0x0e
 1c4:	8d 87       	std	Y+13, r24	; 0x0d
>>>>>>> Stashed changes
        _delay_ms(10); // wait for 10ms to call LEDM_Manage again 

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        WDGCounter += 10; // Increment by the delay amount (10ms)
<<<<<<< Updated upstream
  ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  d2:	86 5f       	subi	r24, 0xF6	; 246
  d4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
  d8:	84 31       	cpi	r24, 0x14	; 20
  da:	88 f3       	brcs	.-30     	; 0xbe <main+0x18>
            WDGM_MainFunction();  // Call watchdog management every 20ms
  dc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <WDGM_MainFunction>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
  e0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
  e4:	ec cf       	rjmp	.-40     	; 0xbe <main+0x18>

000000e6 <WDGDrv_Init>:
}

void WDGDrv_Init(void) {

    //configure the timer
    TCCR1B |= (1 << WGM12);
  e6:	e1 e8       	ldi	r30, 0x81	; 129
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	80 83       	st	Z, r24
    OCR1A = 779;
  f0:	8b e0       	ldi	r24, 0x0B	; 11
  f2:	93 e0       	ldi	r25, 0x03	; 3
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
  fc:	80 81       	ld	r24, Z
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	80 83       	st	Z, r24
    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 102:	ef e6       	ldi	r30, 0x6F	; 111
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24

    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 10c:	e0 e6       	ldi	r30, 0x60	; 96
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	88 e1       	ldi	r24, 0x18	; 24
 112:	80 83       	st	Z, r24
    WDTCSR =  (1 << WDE) | (1 << WDP1)     ;    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	80 83       	st	Z, r24
    sei(); // Enable global interrupts
 118:	78 94       	sei
}
 11a:	08 95       	ret

0000011c <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
    if(WDGM_PovideSuppervisionStatus()==OK  && (!stuck)){
 11c:	0e 94 0a 01 	call	0x214	; 0x214 <WDGM_PovideSuppervisionStatus>
 120:	81 11       	cpse	r24, r1
 122:	07 c0       	rjmp	.+14     	; 0x132 <WDGDrv_IsrNotification+0x16>
 124:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <stuck>
 128:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <stuck+0x1>
 12c:	89 2b       	or	r24, r25
 12e:	09 f4       	brne	.+2      	; 0x132 <WDGDrv_IsrNotification+0x16>
        wdt_reset();
 130:	a8 95       	wdr
=======
 1c6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1ca:	86 5f       	subi	r24, 0xF6	; 246
 1cc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
 1d0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1d4:	84 31       	cpi	r24, 0x14	; 20
 1d6:	08 f4       	brcc	.+2      	; 0x1da <main+0x118>
 1d8:	82 cf       	rjmp	.-252    	; 0xde <main+0x1c>
            WDGM_MainFunction();  // Call watchdog management every 20ms
 1da:	0e 94 7e 01 	call	0x2fc	; 0x2fc <WDGM_MainFunction>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 1de:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>

    // Call WDGM_MainFunction for the first time
    WDGM_MainFunction();
    // Main loop
    while (1) {
        LEDM_Manage();
 1e2:	7d cf       	rjmp	.-262    	; 0xde <main+0x1c>

000001e4 <__vector_6>:


int x = 0;


ISR(WDT_vect) {
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
    x = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <x+0x1>
 208:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <x>
    PORTB |= (1 << 0); // Set PB0 high
 20c:	85 e2       	ldi	r24, 0x25	; 37
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	20 81       	ld	r18, Z
 214:	85 e2       	ldi	r24, 0x25	; 37
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	21 60       	ori	r18, 0x01	; 1
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
    // for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
    // _delay_ms(1000); 
    // WDTCSR = (1 << WDIE);
}
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <WDGDrv_Init>:

void WDGDrv_Init(void) {
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << 0);
 240:	84 e2       	ldi	r24, 0x24	; 36
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	20 81       	ld	r18, Z
 248:	84 e2       	ldi	r24, 0x24	; 36
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	21 60       	ori	r18, 0x01	; 1
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);
 252:	85 e2       	ldi	r24, 0x25	; 37
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	20 81       	ld	r18, Z
 25a:	85 e2       	ldi	r24, 0x25	; 37
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	2e 7f       	andi	r18, 0xFE	; 254
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
    // Disable global interrupts
    cli();
 264:	f8 94       	cli
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	88 70       	andi	r24, 0x08	; 8
 26c:	99 27       	eor	r25, r25
 26e:	89 2b       	or	r24, r25
 270:	11 f0       	breq	.+4      	; 0x276 <WDGDrv_Init+0x3e>
 272:	88 e2       	ldi	r24, 0x28	; 40
 274:	01 c0       	rjmp	.+2      	; 0x278 <WDGDrv_Init+0x40>
 276:	88 e0       	ldi	r24, 0x08	; 8
						_BV(WDE) | (value & 0x07)) )
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	97 70       	andi	r25, 0x07	; 7
 27c:	89 2b       	or	r24, r25
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 27e:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 280:	88 e1       	ldi	r24, 0x18	; 24
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	a8 95       	wdr
 288:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    // SREG &= ~(1 << I);
    //Interrupt and System Reset Mode
    wdt_enable(2);
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 292:	80 e6       	ldi	r24, 0x60	; 96
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	28 e1       	ldi	r18, 0x18	; 24
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
    WDTCSR =  (1 << WDE)|(1 << WDIE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 29c:	80 e6       	ldi	r24, 0x60	; 96
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	2a e4       	ldi	r18, 0x4A	; 74
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
    sei(); // Enable global interrupts
 2a6:	78 94       	sei
    // SREG |= (1 << I);
// 
}
 2a8:	00 00       	nop
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
    // uint32 current_time = HAL_GetTick();

    if(WDGM_PovideSuppervisionStatus()==OK  /*&& the WDGM_MainFunction_is_not_STUCK*/){
 2b8:	0e 94 c4 01 	call	0x388	; 0x388 <WDGM_PovideSuppervisionStatus>
       //refresh 
>>>>>>> Stashed changes
    }else{
        return;
    }
}
<<<<<<< Updated upstream
 132:	08 95       	ret

00000134 <__vector_11>:



extern stuck;

ISR(TIMER1_COMPA_vect) {
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
    PORTB ^= (1 << 0); // Set PB0 high
 156:	85 b1       	in	r24, 0x05	; 5
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	89 27       	eor	r24, r25
 15c:	85 b9       	out	0x05, r24	; 5
    WDGDrv_IsrNotification();
 15e:	0e 94 8e 00 	call	0x11c	; 0x11c <WDGDrv_IsrNotification>
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <WDGM_Init>:
=======
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <WDGM_Init>:
static uint32 led_no_calls;
>>>>>>> Stashed changes
static uint8 call_count;
 uint32 stuck;

void WDGM_Init(void)
{
<<<<<<< Updated upstream
    status = NOK ;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <status>
    led_no_calls = 0;
 18a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <led_no_calls>
 18e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls+0x1>
 192:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x2>
 196:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x3>
    call_count = 0;
 19a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <call_count>
    stuck = 0;
 19e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <stuck>
 1a2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <stuck+0x1>
 1a6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stuck+0x2>
 1aa:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <stuck+0x3>
}
 1ae:	08 95       	ret

000001b0 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    call_count ++;
 1b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <call_count>
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms 
    if (call_count <= 6) {
 1ba:	87 30       	cpi	r24, 0x07	; 7
 1bc:	f0 f4       	brcc	.+60     	; 0x1fa <WDGM_MainFunction+0x4a>
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 1be:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <led_no_calls>
 1c2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <led_no_calls+0x1>
 1c6:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <led_no_calls+0x2>
 1ca:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <led_no_calls+0x3>
 1ce:	08 97       	sbiw	r24, 0x08	; 8
 1d0:	a1 09       	sbc	r26, r1
 1d2:	b1 09       	sbc	r27, r1
 1d4:	05 97       	sbiw	r24, 0x05	; 5
 1d6:	a1 05       	cpc	r26, r1
 1d8:	b1 05       	cpc	r27, r1
 1da:	58 f4       	brcc	.+22     	; 0x1f2 <WDGM_MainFunction+0x42>
        { 
            status = OK;
 1dc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <status>
        } else {
            status = NOK;
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 1e0:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <led_no_calls>
 1e4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls+0x1>
 1e8:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x2>
 1ec:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x3>
 1f0:	08 95       	ret
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
        { 
            status = OK;
        } else {
            status = NOK;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <status>
 1f8:	f3 cf       	rjmp	.-26     	; 0x1e0 <WDGM_MainFunction+0x30>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
=======
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
    led_no_calls = 0;
 2d0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls>
 2d4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x1>
 2d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x2>
 2dc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x3>
    call_count = 0;
 2e0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <call_count>
    stuck = 0;
 2e4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <stuck>
 2e8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <stuck+0x1>
 2ec:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <stuck+0x2>
 2f0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stuck+0x3>
}
 2f4:	00 00       	nop
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
    call_count ++;
 304:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <call_count>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <call_count>
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms 
    if (call_count <= 6) {
 30e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <call_count>
 312:	87 30       	cpi	r24, 0x07	; 7
 314:	48 f5       	brcc	.+82     	; 0x368 <WDGM_MainFunction+0x6c>
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 316:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <led_no_calls>
 31a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <led_no_calls+0x1>
 31e:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <led_no_calls+0x2>
 322:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <led_no_calls+0x3>
 326:	08 97       	sbiw	r24, 0x08	; 8
 328:	a1 05       	cpc	r26, r1
 32a:	b1 05       	cpc	r27, r1
 32c:	78 f0       	brcs	.+30     	; 0x34c <WDGM_MainFunction+0x50>
 32e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <led_no_calls>
 332:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <led_no_calls+0x1>
 336:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <led_no_calls+0x2>
 33a:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <led_no_calls+0x3>
 33e:	0d 97       	sbiw	r24, 0x0d	; 13
 340:	a1 05       	cpc	r26, r1
 342:	b1 05       	cpc	r27, r1
 344:	18 f4       	brcc	.+6      	; 0x34c <WDGM_MainFunction+0x50>
        { 
            status = OK;
 346:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <status>
 34a:	03 c0       	rjmp	.+6      	; 0x352 <WDGM_MainFunction+0x56>
        } else {
            status = NOK;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 352:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls>
 356:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x1>
 35a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x2>
 35e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x3>
        call_count = 0; // Reset count for next 100ms period
 362:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <call_count>
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
    }
}
 366:	0c c0       	rjmp	.+24     	; 0x380 <WDGM_MainFunction+0x84>
        led_no_calls = 0; // Reset the call counter for the next 100ms period
        call_count = 0; // Reset count for next 100ms period
>>>>>>> Stashed changes
    }
    else
    {
        stuck = 1; // Indicate potential stuck condition
<<<<<<< Updated upstream
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	a0 e0       	ldi	r26, 0x00	; 0
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <stuck>
 206:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <stuck+0x1>
 20a:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <stuck+0x2>
 20e:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <stuck+0x3>
    }
}
 212:	08 95       	ret

00000214 <WDGM_PovideSuppervisionStatus>:
=======
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	a0 e0       	ldi	r26, 0x00	; 0
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <stuck>
 374:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <stuck+0x1>
 378:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <stuck+0x2>
 37c:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <stuck+0x3>
    }
}
 380:	00 00       	nop
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <WDGM_PovideSuppervisionStatus>:
>>>>>>> Stashed changes


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
<<<<<<< Updated upstream
    return status; // The WDGM state
}
 214:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <status>
 218:	08 95       	ret

0000021a <WDGM_AlivenessIndication>:
=======
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 390:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <status>
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <WDGM_AlivenessIndication>:
>>>>>>> Stashed changes



void WDGM_AlivenessIndication(void)
{
<<<<<<< Updated upstream
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 21a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <led_no_calls>
 21e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <led_no_calls+0x1>
 222:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <led_no_calls+0x2>
 226:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <led_no_calls+0x3>
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	a1 1d       	adc	r26, r1
 22e:	b1 1d       	adc	r27, r1
 230:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <led_no_calls>
 234:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <led_no_calls+0x1>
 238:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <led_no_calls+0x2>
 23c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <led_no_calls+0x3>
 240:	08 95       	ret
=======
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 3a2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <led_no_calls>
 3a6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <led_no_calls+0x1>
 3aa:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <led_no_calls+0x2>
 3ae:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <led_no_calls+0x3>
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <led_no_calls>
 3bc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <led_no_calls+0x1>
 3c0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <led_no_calls+0x2>
 3c4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <led_no_calls+0x3>
}
 3c8:	00 00       	nop
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <Nvic_EnableInterrupt>:
>>>>>>> Stashed changes

00000242 <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
<<<<<<< Updated upstream
  if (IRQn < 96)
 242:	80 36       	cpi	r24, 0x60	; 96
 244:	28 f5       	brcc	.+74     	; 0x290 <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 246:	e8 2f       	mov	r30, r24
 248:	e2 95       	swap	r30
 24a:	e6 95       	lsr	r30
 24c:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	ea 5f       	subi	r30, 0xFA	; 250
 256:	fe 4f       	sbci	r31, 0xFE	; 254
 258:	01 90       	ld	r0, Z+
 25a:	f0 81       	ld	r31, Z
 25c:	e0 2d       	mov	r30, r0
 25e:	40 81       	ld	r20, Z
 260:	51 81       	ldd	r21, Z+1	; 0x01
 262:	62 81       	ldd	r22, Z+2	; 0x02
 264:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 266:	98 2f       	mov	r25, r24
 268:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Nvic_EnableInterrupt+0x32>
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	9a 95       	dec	r25
 276:	e2 f7       	brpl	.-8      	; 0x270 <Nvic_EnableInterrupt+0x2e>
 278:	c9 01       	movw	r24, r18
 27a:	33 0f       	add	r19, r19
 27c:	aa 0b       	sbc	r26, r26
 27e:	bb 0b       	sbc	r27, r27
 280:	84 2b       	or	r24, r20
 282:	95 2b       	or	r25, r21
 284:	a6 2b       	or	r26, r22
 286:	b7 2b       	or	r27, r23
 288:	80 83       	st	Z, r24
 28a:	91 83       	std	Z+1, r25	; 0x01
 28c:	a2 83       	std	Z+2, r26	; 0x02
 28e:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 290:	08 95       	ret

00000292 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 292:	80 36       	cpi	r24, 0x60	; 96
 294:	28 f5       	brcc	.+74     	; 0x2e0 <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 296:	e8 2f       	mov	r30, r24
 298:	e2 95       	swap	r30
 29a:	e6 95       	lsr	r30
 29c:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	e0 50       	subi	r30, 0x00	; 0
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	01 90       	ld	r0, Z+
 2aa:	f0 81       	ld	r31, Z
 2ac:	e0 2d       	mov	r30, r0
 2ae:	40 81       	ld	r20, Z
 2b0:	51 81       	ldd	r21, Z+1	; 0x01
 2b2:	62 81       	ldd	r22, Z+2	; 0x02
 2b4:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 2b6:	98 2f       	mov	r25, r24
 2b8:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <Nvic_DisableInterrupt+0x32>
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	9a 95       	dec	r25
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <Nvic_DisableInterrupt+0x2e>
 2c8:	c9 01       	movw	r24, r18
 2ca:	33 0f       	add	r19, r19
 2cc:	aa 0b       	sbc	r26, r26
 2ce:	bb 0b       	sbc	r27, r27
 2d0:	84 2b       	or	r24, r20
 2d2:	95 2b       	or	r25, r21
 2d4:	a6 2b       	or	r26, r22
 2d6:	b7 2b       	or	r27, r23
 2d8:	80 83       	st	Z, r24
 2da:	91 83       	std	Z+1, r25	; 0x01
 2dc:	a2 83       	std	Z+2, r26	; 0x02
 2de:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 2e0:	08 95       	ret
=======
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <Nvic_EnableInterrupt+0x6>
 3d6:	1f 92       	push	r1
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	80 36       	cpi	r24, 0x60	; 96
 3e2:	c0 f5       	brcc	.+112    	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	82 95       	swap	r24
 3e8:	86 95       	lsr	r24
 3ea:	87 70       	andi	r24, 0x07	; 7
 3ec:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	8f 71       	andi	r24, 0x1F	; 31
 3f2:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	88 2f       	mov	r24, r24
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	80 50       	subi	r24, 0x00	; 0
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	fc 01       	movw	r30, r24
 404:	80 81       	ld	r24, Z
 406:	91 81       	ldd	r25, Z+1	; 0x01
 408:	fc 01       	movw	r30, r24
 40a:	20 81       	ld	r18, Z
 40c:	31 81       	ldd	r19, Z+1	; 0x01
 40e:	42 81       	ldd	r20, Z+2	; 0x02
 410:	53 81       	ldd	r21, Z+3	; 0x03
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	68 2f       	mov	r22, r24
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	09 2e       	mov	r0, r25
 428:	00 0c       	add	r0, r0
 42a:	aa 0b       	sbc	r26, r26
 42c:	bb 0b       	sbc	r27, r27
 42e:	69 81       	ldd	r22, Y+1	; 0x01
 430:	66 2f       	mov	r22, r22
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	60 50       	subi	r22, 0x00	; 0
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	fb 01       	movw	r30, r22
 43e:	60 81       	ld	r22, Z
 440:	71 81       	ldd	r23, Z+1	; 0x01
 442:	82 2b       	or	r24, r18
 444:	93 2b       	or	r25, r19
 446:	a4 2b       	or	r26, r20
 448:	b5 2b       	or	r27, r21
 44a:	fb 01       	movw	r30, r22
 44c:	80 83       	st	Z, r24
 44e:	91 83       	std	Z+1, r25	; 0x01
 450:	a2 83       	std	Z+2, r26	; 0x02
 452:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 454:	00 00       	nop
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	00 d0       	rcall	.+0      	; 0x468 <Nvic_DisableInterrupt+0x6>
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	80 36       	cpi	r24, 0x60	; 96
 474:	c0 f5       	brcc	.+112    	; 0x4e6 <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	82 95       	swap	r24
 47a:	86 95       	lsr	r24
 47c:	87 70       	andi	r24, 0x07	; 7
 47e:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	8f 71       	andi	r24, 0x1F	; 31
 484:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	88 2f       	mov	r24, r24
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	8a 5f       	subi	r24, 0xFA	; 250
 492:	9e 4f       	sbci	r25, 0xFE	; 254
 494:	fc 01       	movw	r30, r24
 496:	80 81       	ld	r24, Z
 498:	91 81       	ldd	r25, Z+1	; 0x01
 49a:	fc 01       	movw	r30, r24
 49c:	20 81       	ld	r18, Z
 49e:	31 81       	ldd	r19, Z+1	; 0x01
 4a0:	42 81       	ldd	r20, Z+2	; 0x02
 4a2:	53 81       	ldd	r21, Z+3	; 0x03
 4a4:	8a 81       	ldd	r24, Y+2	; 0x02
 4a6:	68 2f       	mov	r22, r24
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <Nvic_DisableInterrupt+0x52>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <Nvic_DisableInterrupt+0x4e>
 4b8:	09 2e       	mov	r0, r25
 4ba:	00 0c       	add	r0, r0
 4bc:	aa 0b       	sbc	r26, r26
 4be:	bb 0b       	sbc	r27, r27
 4c0:	69 81       	ldd	r22, Y+1	; 0x01
 4c2:	66 2f       	mov	r22, r22
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	6a 5f       	subi	r22, 0xFA	; 250
 4cc:	7e 4f       	sbci	r23, 0xFE	; 254
 4ce:	fb 01       	movw	r30, r22
 4d0:	60 81       	ld	r22, Z
 4d2:	71 81       	ldd	r23, Z+1	; 0x01
 4d4:	82 2b       	or	r24, r18
 4d6:	93 2b       	or	r25, r19
 4d8:	a4 2b       	or	r26, r20
 4da:	b5 2b       	or	r27, r21
 4dc:	fb 01       	movw	r30, r22
 4de:	80 83       	st	Z, r24
 4e0:	91 83       	std	Z+1, r25	; 0x01
 4e2:	a2 83       	std	Z+2, r26	; 0x02
 4e4:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 4e6:	00 00       	nop
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <LEDM_Init>:
>>>>>>> Stashed changes

000002e2 <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
<<<<<<< Updated upstream
    GPIO_Init();
 2e2:	0e 94 b0 01 	call	0x360	; 0x360 <GPIO_Init>
    led_state = 0;
 2e6:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_state>
    time_counter = 0;
 2ea:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <time_counter>
 2ee:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_counter+0x1>
 2f2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter+0x2>
 2f6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x3>
}
 2fa:	08 95       	ret

000002fc <LEDM_Manage>:

void LEDM_Manage(void)
{
	if (time_counter == 500)
 2fc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <time_counter>
 300:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <time_counter+0x1>
 304:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <time_counter+0x2>
 308:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <time_counter+0x3>
 30c:	84 3f       	cpi	r24, 0xF4	; 244
 30e:	91 40       	sbci	r25, 0x01	; 1
 310:	a1 05       	cpc	r26, r1
 312:	b1 05       	cpc	r27, r1
 314:	81 f4       	brne	.+32     	; 0x336 <LEDM_Manage+0x3a>
    {
		led_state = ~led_state;
 316:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <led_state>
 31a:	60 95       	com	r22
 31c:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 b2 01 	call	0x364	; 0x364 <GPIO_Write>
		time_counter = 0;
 326:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <time_counter>
 32a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <time_counter+0x1>
 32e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter+0x2>
 332:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x3>
    }
	time_counter += 10;
 336:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <time_counter>
 33a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <time_counter+0x1>
 33e:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <time_counter+0x2>
 342:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <time_counter+0x3>
 346:	0a 96       	adiw	r24, 0x0a	; 10
 348:	a1 1d       	adc	r26, r1
 34a:	b1 1d       	adc	r27, r1
 34c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <time_counter>
 350:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <time_counter+0x1>
 354:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <time_counter+0x2>
 358:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 35c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <WDGM_AlivenessIndication>
=======
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 4fc:	0e 94 cb 02 	call	0x596	; 0x596 <GPIO_Init>
    led_state = 0;
 500:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_state>
    time_counter = 0;
 504:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter>
 508:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x1>
 50c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x2>
 510:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x3>
}
 514:	00 00       	nop
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <LEDM_Manage>:

void LEDM_Manage(void)
{
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
	if (time_counter == 500)
 524:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_counter>
 528:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_counter+0x1>
 52c:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <time_counter+0x2>
 530:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <time_counter+0x3>
 534:	84 3f       	cpi	r24, 0xF4	; 244
 536:	91 40       	sbci	r25, 0x01	; 1
 538:	a1 05       	cpc	r26, r1
 53a:	b1 05       	cpc	r27, r1
 53c:	99 f4       	brne	.+38     	; 0x564 <LEDM_Manage+0x48>
    {
		led_state = ~led_state;
 53e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_state>
 542:	80 95       	com	r24
 544:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 548:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_state>
 54c:	68 2f       	mov	r22, r24
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <GPIO_Write>
		time_counter = 0;
 554:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter>
 558:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x1>
 55c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x2>
 560:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x3>
    }
	time_counter += 10;
 564:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_counter>
 568:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_counter+0x1>
 56c:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <time_counter+0x2>
 570:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <time_counter+0x3>
 574:	0a 96       	adiw	r24, 0x0a	; 10
 576:	a1 1d       	adc	r26, r1
 578:	b1 1d       	adc	r27, r1
 57a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <time_counter>
 57e:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <time_counter+0x1>
 582:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <time_counter+0x2>
 586:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 58a:	0e 94 cd 01 	call	0x39a	; 0x39a <WDGM_AlivenessIndication>
 58e:	00 00       	nop
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <GPIO_Init>:
#include "Gpio_Private.h"
>>>>>>> Stashed changes

00000360 <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
<<<<<<< Updated upstream
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 360:	21 9a       	sbi	0x04, 1	; 4

}
 362:	08 95       	ret

00000364 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 364:	45 b1       	in	r20, 0x05	; 5
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	f9 01       	movw	r30, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <GPIO_Write+0xe>
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	8a 95       	dec	r24
 374:	e2 f7       	brpl	.-8      	; 0x36e <GPIO_Write+0xa>
 376:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 378:	66 23       	and	r22, r22
 37a:	19 f0       	breq	.+6      	; 0x382 <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 37c:	84 2b       	or	r24, r20
=======
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	00 d0       	rcall	.+0      	; 0x59c <GPIO_Init+0x6>
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 5a0:	83 e2       	ldi	r24, 0x23	; 35
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	9a 83       	std	Y+2, r25	; 0x02
 5a6:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->DDR |= (1 << LED_PIN_ID);
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	9a 81       	ldd	r25, Y+2	; 0x02
 5ac:	fc 01       	movw	r30, r24
 5ae:	81 81       	ldd	r24, Z+1	; 0x01
 5b0:	28 2f       	mov	r18, r24
 5b2:	22 60       	ori	r18, 0x02	; 2
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	9a 81       	ldd	r25, Y+2	; 0x02
 5b8:	fc 01       	movw	r30, r24
 5ba:	21 83       	std	Z+1, r18	; 0x01

}
 5bc:	00 00       	nop
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	00 d0       	rcall	.+0      	; 0x5ce <GPIO_Write+0x6>
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <GPIO_Write+0x8>
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	8b 83       	std	Y+3, r24	; 0x03
 5d6:	6c 83       	std	Y+4, r22	; 0x04
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 5d8:	83 e2       	ldi	r24, 0x23	; 35
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	9a 83       	std	Y+2, r25	; 0x02
 5de:	89 83       	std	Y+1, r24	; 0x01
    if (PinData) {
 5e0:	8c 81       	ldd	r24, Y+4	; 0x04
 5e2:	88 23       	and	r24, r24
 5e4:	b1 f0       	breq	.+44     	; 0x612 <GPIO_Write+0x4a>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ea:	fc 01       	movw	r30, r24
 5ec:	82 81       	ldd	r24, Z+2	; 0x02
 5ee:	48 2f       	mov	r20, r24
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <GPIO_Write+0x38>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	2a 95       	dec	r18
 602:	e2 f7       	brpl	.-8      	; 0x5fc <GPIO_Write+0x34>
 604:	84 2b       	or	r24, r20
 606:	28 2f       	mov	r18, r24
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	9a 81       	ldd	r25, Y+2	; 0x02
 60c:	fc 01       	movw	r30, r24
 60e:	22 83       	std	Z+2, r18	; 0x02
>>>>>>> Stashed changes
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 37e:	85 b9       	out	0x05, r24	; 5
    }
}
<<<<<<< Updated upstream
 380:	08 95       	ret
=======
 610:	16 c0       	rjmp	.+44     	; 0x63e <GPIO_Write+0x76>
>>>>>>> Stashed changes
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
<<<<<<< Updated upstream
 382:	80 95       	com	r24
 384:	84 23       	and	r24, r20
 386:	fb cf       	rjmp	.-10     	; 0x37e <GPIO_Write+0x1a>

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
=======
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	9a 81       	ldd	r25, Y+2	; 0x02
 616:	fc 01       	movw	r30, r24
 618:	82 81       	ldd	r24, Z+2	; 0x02
 61a:	48 2f       	mov	r20, r24
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	28 2f       	mov	r18, r24
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <GPIO_Write+0x64>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	2a 95       	dec	r18
 62e:	e2 f7       	brpl	.-8      	; 0x628 <GPIO_Write+0x60>
 630:	80 95       	com	r24
 632:	84 23       	and	r24, r20
 634:	28 2f       	mov	r18, r24
 636:	89 81       	ldd	r24, Y+1	; 0x01
 638:	9a 81       	ldd	r25, Y+2	; 0x02
 63a:	fc 01       	movw	r30, r24
 63c:	22 83       	std	Z+2, r18	; 0x02
    }
}
 63e:	00 00       	nop
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <__cmpsf2>:
 64e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_cmp>
 652:	08 f4       	brcc	.+2      	; 0x656 <__cmpsf2+0x8>
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	08 95       	ret

00000658 <__fixunssfsi>:
 658:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_splitA>
 65c:	88 f0       	brcs	.+34     	; 0x680 <__fixunssfsi+0x28>
 65e:	9f 57       	subi	r25, 0x7F	; 127
 660:	98 f0       	brcs	.+38     	; 0x688 <__fixunssfsi+0x30>
 662:	b9 2f       	mov	r27, r25
 664:	99 27       	eor	r25, r25
 666:	b7 51       	subi	r27, 0x17	; 23
 668:	b0 f0       	brcs	.+44     	; 0x696 <__fixunssfsi+0x3e>
 66a:	e1 f0       	breq	.+56     	; 0x6a4 <__fixunssfsi+0x4c>
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	1a f0       	brmi	.+6      	; 0x67c <__fixunssfsi+0x24>
 676:	ba 95       	dec	r27
 678:	c9 f7       	brne	.-14     	; 0x66c <__fixunssfsi+0x14>
 67a:	14 c0       	rjmp	.+40     	; 0x6a4 <__fixunssfsi+0x4c>
 67c:	b1 30       	cpi	r27, 0x01	; 1
 67e:	91 f0       	breq	.+36     	; 0x6a4 <__fixunssfsi+0x4c>
 680:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_zero>
 684:	b1 e0       	ldi	r27, 0x01	; 1
 686:	08 95       	ret
 688:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_zero>
 68c:	67 2f       	mov	r22, r23
 68e:	78 2f       	mov	r23, r24
 690:	88 27       	eor	r24, r24
 692:	b8 5f       	subi	r27, 0xF8	; 248
 694:	39 f0       	breq	.+14     	; 0x6a4 <__fixunssfsi+0x4c>
 696:	b9 3f       	cpi	r27, 0xF9	; 249
 698:	cc f3       	brlt	.-14     	; 0x68c <__fixunssfsi+0x34>
 69a:	86 95       	lsr	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b3 95       	inc	r27
 6a2:	d9 f7       	brne	.-10     	; 0x69a <__fixunssfsi+0x42>
 6a4:	3e f4       	brtc	.+14     	; 0x6b4 <__fixunssfsi+0x5c>
 6a6:	90 95       	com	r25
 6a8:	80 95       	com	r24
 6aa:	70 95       	com	r23
 6ac:	61 95       	neg	r22
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255
 6b0:	8f 4f       	sbci	r24, 0xFF	; 255
 6b2:	9f 4f       	sbci	r25, 0xFF	; 255
 6b4:	08 95       	ret

000006b6 <__fp_cmp>:
 6b6:	99 0f       	add	r25, r25
 6b8:	00 08       	sbc	r0, r0
 6ba:	55 0f       	add	r21, r21
 6bc:	aa 0b       	sbc	r26, r26
 6be:	e0 e8       	ldi	r30, 0x80	; 128
 6c0:	fe ef       	ldi	r31, 0xFE	; 254
 6c2:	16 16       	cp	r1, r22
 6c4:	17 06       	cpc	r1, r23
 6c6:	e8 07       	cpc	r30, r24
 6c8:	f9 07       	cpc	r31, r25
 6ca:	c0 f0       	brcs	.+48     	; 0x6fc <__fp_cmp+0x46>
 6cc:	12 16       	cp	r1, r18
 6ce:	13 06       	cpc	r1, r19
 6d0:	e4 07       	cpc	r30, r20
 6d2:	f5 07       	cpc	r31, r21
 6d4:	98 f0       	brcs	.+38     	; 0x6fc <__fp_cmp+0x46>
 6d6:	62 1b       	sub	r22, r18
 6d8:	73 0b       	sbc	r23, r19
 6da:	84 0b       	sbc	r24, r20
 6dc:	95 0b       	sbc	r25, r21
 6de:	39 f4       	brne	.+14     	; 0x6ee <__fp_cmp+0x38>
 6e0:	0a 26       	eor	r0, r26
 6e2:	61 f0       	breq	.+24     	; 0x6fc <__fp_cmp+0x46>
 6e4:	23 2b       	or	r18, r19
 6e6:	24 2b       	or	r18, r20
 6e8:	25 2b       	or	r18, r21
 6ea:	21 f4       	brne	.+8      	; 0x6f4 <__fp_cmp+0x3e>
 6ec:	08 95       	ret
 6ee:	0a 26       	eor	r0, r26
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <__fp_cmp+0x3e>
 6f2:	a1 40       	sbci	r26, 0x01	; 1
 6f4:	a6 95       	lsr	r26
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	81 1d       	adc	r24, r1
 6fa:	81 1d       	adc	r24, r1
 6fc:	08 95       	ret

000006fe <__fp_split3>:
 6fe:	57 fd       	sbrc	r21, 7
 700:	90 58       	subi	r25, 0x80	; 128
 702:	44 0f       	add	r20, r20
 704:	55 1f       	adc	r21, r21
 706:	59 f0       	breq	.+22     	; 0x71e <__fp_splitA+0x10>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	71 f0       	breq	.+28     	; 0x728 <__fp_splitA+0x1a>
 70c:	47 95       	ror	r20

0000070e <__fp_splitA>:
 70e:	88 0f       	add	r24, r24
 710:	97 fb       	bst	r25, 7
 712:	99 1f       	adc	r25, r25
 714:	61 f0       	breq	.+24     	; 0x72e <__fp_splitA+0x20>
 716:	9f 3f       	cpi	r25, 0xFF	; 255
 718:	79 f0       	breq	.+30     	; 0x738 <__fp_splitA+0x2a>
 71a:	87 95       	ror	r24
 71c:	08 95       	ret
 71e:	12 16       	cp	r1, r18
 720:	13 06       	cpc	r1, r19
 722:	14 06       	cpc	r1, r20
 724:	55 1f       	adc	r21, r21
 726:	f2 cf       	rjmp	.-28     	; 0x70c <__fp_split3+0xe>
 728:	46 95       	lsr	r20
 72a:	f1 df       	rcall	.-30     	; 0x70e <__fp_splitA>
 72c:	08 c0       	rjmp	.+16     	; 0x73e <__fp_splitA+0x30>
 72e:	16 16       	cp	r1, r22
 730:	17 06       	cpc	r1, r23
 732:	18 06       	cpc	r1, r24
 734:	99 1f       	adc	r25, r25
 736:	f1 cf       	rjmp	.-30     	; 0x71a <__fp_splitA+0xc>
 738:	86 95       	lsr	r24
 73a:	71 05       	cpc	r23, r1
 73c:	61 05       	cpc	r22, r1
 73e:	08 94       	sec
 740:	08 95       	ret

00000742 <__fp_zero>:
 742:	e8 94       	clt

00000744 <__fp_szero>:
 744:	bb 27       	eor	r27, r27
 746:	66 27       	eor	r22, r22
 748:	77 27       	eor	r23, r23
 74a:	cb 01       	movw	r24, r22
 74c:	97 f9       	bld	r25, 7
 74e:	08 95       	ret

00000750 <__gesf2>:
 750:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_cmp>
 754:	08 f4       	brcc	.+2      	; 0x758 <__gesf2+0x8>
 756:	8f ef       	ldi	r24, 0xFF	; 255
 758:	08 95       	ret

0000075a <__mulsf3>:
 75a:	0e 94 c0 03 	call	0x780	; 0x780 <__mulsf3x>
 75e:	0c 94 31 04 	jmp	0x862	; 0x862 <__fp_round>
 762:	0e 94 23 04 	call	0x846	; 0x846 <__fp_pscA>
 766:	38 f0       	brcs	.+14     	; 0x776 <__mulsf3+0x1c>
 768:	0e 94 2a 04 	call	0x854	; 0x854 <__fp_pscB>
 76c:	20 f0       	brcs	.+8      	; 0x776 <__mulsf3+0x1c>
 76e:	95 23       	and	r25, r21
 770:	11 f0       	breq	.+4      	; 0x776 <__mulsf3+0x1c>
 772:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_inf>
 776:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_nan>
 77a:	11 24       	eor	r1, r1
 77c:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>

00000780 <__mulsf3x>:
 780:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fp_split3>
 784:	70 f3       	brcs	.-36     	; 0x762 <__mulsf3+0x8>

00000786 <__mulsf3_pse>:
 786:	95 9f       	mul	r25, r21
 788:	c1 f3       	breq	.-16     	; 0x77a <__mulsf3+0x20>
 78a:	95 0f       	add	r25, r21
 78c:	50 e0       	ldi	r21, 0x00	; 0
 78e:	55 1f       	adc	r21, r21
 790:	62 9f       	mul	r22, r18
 792:	f0 01       	movw	r30, r0
 794:	72 9f       	mul	r23, r18
 796:	bb 27       	eor	r27, r27
 798:	f0 0d       	add	r31, r0
 79a:	b1 1d       	adc	r27, r1
 79c:	63 9f       	mul	r22, r19
 79e:	aa 27       	eor	r26, r26
 7a0:	f0 0d       	add	r31, r0
 7a2:	b1 1d       	adc	r27, r1
 7a4:	aa 1f       	adc	r26, r26
 7a6:	64 9f       	mul	r22, r20
 7a8:	66 27       	eor	r22, r22
 7aa:	b0 0d       	add	r27, r0
 7ac:	a1 1d       	adc	r26, r1
 7ae:	66 1f       	adc	r22, r22
 7b0:	82 9f       	mul	r24, r18
 7b2:	22 27       	eor	r18, r18
 7b4:	b0 0d       	add	r27, r0
 7b6:	a1 1d       	adc	r26, r1
 7b8:	62 1f       	adc	r22, r18
 7ba:	73 9f       	mul	r23, r19
 7bc:	b0 0d       	add	r27, r0
 7be:	a1 1d       	adc	r26, r1
 7c0:	62 1f       	adc	r22, r18
 7c2:	83 9f       	mul	r24, r19
 7c4:	a0 0d       	add	r26, r0
 7c6:	61 1d       	adc	r22, r1
 7c8:	22 1f       	adc	r18, r18
 7ca:	74 9f       	mul	r23, r20
 7cc:	33 27       	eor	r19, r19
 7ce:	a0 0d       	add	r26, r0
 7d0:	61 1d       	adc	r22, r1
 7d2:	23 1f       	adc	r18, r19
 7d4:	84 9f       	mul	r24, r20
 7d6:	60 0d       	add	r22, r0
 7d8:	21 1d       	adc	r18, r1
 7da:	82 2f       	mov	r24, r18
 7dc:	76 2f       	mov	r23, r22
 7de:	6a 2f       	mov	r22, r26
 7e0:	11 24       	eor	r1, r1
 7e2:	9f 57       	subi	r25, 0x7F	; 127
 7e4:	50 40       	sbci	r21, 0x00	; 0
 7e6:	9a f0       	brmi	.+38     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7e8:	f1 f0       	breq	.+60     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7ea:	88 23       	and	r24, r24
 7ec:	4a f0       	brmi	.+18     	; 0x800 <__DATA_REGION_LENGTH__>
 7ee:	ee 0f       	add	r30, r30
 7f0:	ff 1f       	adc	r31, r31
 7f2:	bb 1f       	adc	r27, r27
 7f4:	66 1f       	adc	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	88 1f       	adc	r24, r24
 7fa:	91 50       	subi	r25, 0x01	; 1
 7fc:	50 40       	sbci	r21, 0x00	; 0
 7fe:	a9 f7       	brne	.-22     	; 0x7ea <__mulsf3_pse+0x64>
 800:	9e 3f       	cpi	r25, 0xFE	; 254
 802:	51 05       	cpc	r21, r1
 804:	80 f0       	brcs	.+32     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 806:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_inf>
 80a:	0c 94 a2 03 	jmp	0x744	; 0x744 <__fp_szero>
 80e:	5f 3f       	cpi	r21, 0xFF	; 255
 810:	e4 f3       	brlt	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	98 3e       	cpi	r25, 0xE8	; 232
 814:	d4 f3       	brlt	.-12     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 816:	86 95       	lsr	r24
 818:	77 95       	ror	r23
 81a:	67 95       	ror	r22
 81c:	b7 95       	ror	r27
 81e:	f7 95       	ror	r31
 820:	e7 95       	ror	r30
 822:	9f 5f       	subi	r25, 0xFF	; 255
 824:	c1 f7       	brne	.-16     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 826:	fe 2b       	or	r31, r30
 828:	88 0f       	add	r24, r24
 82a:	91 1d       	adc	r25, r1
 82c:	96 95       	lsr	r25
 82e:	87 95       	ror	r24
 830:	97 f9       	bld	r25, 7
 832:	08 95       	ret

00000834 <__fp_inf>:
 834:	97 f9       	bld	r25, 7
 836:	9f 67       	ori	r25, 0x7F	; 127
 838:	80 e8       	ldi	r24, 0x80	; 128
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	60 e0       	ldi	r22, 0x00	; 0
 83e:	08 95       	ret

00000840 <__fp_nan>:
 840:	9f ef       	ldi	r25, 0xFF	; 255
 842:	80 ec       	ldi	r24, 0xC0	; 192
 844:	08 95       	ret

00000846 <__fp_pscA>:
 846:	00 24       	eor	r0, r0
 848:	0a 94       	dec	r0
 84a:	16 16       	cp	r1, r22
 84c:	17 06       	cpc	r1, r23
 84e:	18 06       	cpc	r1, r24
 850:	09 06       	cpc	r0, r25
 852:	08 95       	ret

00000854 <__fp_pscB>:
 854:	00 24       	eor	r0, r0
 856:	0a 94       	dec	r0
 858:	12 16       	cp	r1, r18
 85a:	13 06       	cpc	r1, r19
 85c:	14 06       	cpc	r1, r20
 85e:	05 06       	cpc	r0, r21
 860:	08 95       	ret

00000862 <__fp_round>:
 862:	09 2e       	mov	r0, r25
 864:	03 94       	inc	r0
 866:	00 0c       	add	r0, r0
 868:	11 f4       	brne	.+4      	; 0x86e <__fp_round+0xc>
 86a:	88 23       	and	r24, r24
 86c:	52 f0       	brmi	.+20     	; 0x882 <__fp_round+0x20>
 86e:	bb 0f       	add	r27, r27
 870:	40 f4       	brcc	.+16     	; 0x882 <__fp_round+0x20>
 872:	bf 2b       	or	r27, r31
 874:	11 f4       	brne	.+4      	; 0x87a <__fp_round+0x18>
 876:	60 ff       	sbrs	r22, 0
 878:	04 c0       	rjmp	.+8      	; 0x882 <__fp_round+0x20>
 87a:	6f 5f       	subi	r22, 0xFF	; 255
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	08 95       	ret

00000884 <_exit>:
 884:	f8 94       	cli

00000886 <__stop_program>:
 886:	ff cf       	rjmp	.-2      	; 0x886 <__stop_program>
>>>>>>> Stashed changes
