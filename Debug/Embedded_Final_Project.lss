
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000003f8  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800112  00800112  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f26  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ade  00000000  00000000  0000153e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbe  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007e2a  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  0000adb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000afdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000302f  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  9e:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SysInit>:

uint32 call_count_100_ms = 0;
uint32 call_count_50_ms = 0;

int SysInit(void) {
    DDRB |= (1 << 0);
  a6:	20 9a       	sbi	0x04, 0	; 4
    DDRB |= (1 << 3);
  a8:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1 << 2);
  aa:	22 9a       	sbi	0x04, 2	; 4
    PORTB &= ~(1 << 0);
  ac:	28 98       	cbi	0x05, 0	; 5
    GPIO_Init();
  ae:	0e 94 e6 01 	call	0x3cc	; 0x3cc <GPIO_Init>
    LEDM_Init();
  b2:	0e 94 a3 01 	call	0x346	; 0x346 <LEDM_Init>
    WDGM_Init();
  b6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <WDGM_Init>
    WDGDrv_Init();
  ba:	0e 94 74 00 	call	0xe8	; 0xe8 <WDGDrv_Init>
    
}
  be:	08 95       	ret

000000c0 <main>:

int main(void) {
    
    SysInit();
  c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
    DDRB |= (1 << 0);
  c4:	20 9a       	sbi	0x04, 0	; 4
    PORTB |= (1 <<0);
  c6:	28 9a       	sbi	0x05, 0	; 5
    static uint8 WDGCounter = 0;

    // Call WDGM_MainFunction for the first time
    LEDM_Manage();
  c8:	0e 94 b0 01 	call	0x360	; 0x360 <LEDM_Manage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x10>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x16>
  d6:	00 00       	nop
    // WDGM_MainFunction();
    // Main loop
    while (1) {
        _delay_ms(10);
        // _delay_ms(5);
        LEDM_Manage();          // wait for 10ms to call LEDM_Manage again 
  d8:	0e 94 b0 01 	call	0x360	; 0x360 <LEDM_Manage>

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        // WDGCounter += 5; // Increment by the delay amount (10ms)
        WDGCounter += 10; // Increment by the delay amount (10ms)
  dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  e0:	86 5f       	subi	r24, 0xF6	; 246
  e2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
  e6:	f2 cf       	rjmp	.-28     	; 0xcc <main+0xc>

000000e8 <WDGDrv_Init>:
    WDGDrv_IsrNotification();
}

void WDGDrv_Init(void)
{
    cli();                             // Enable global interrupts
  e8:	f8 94       	cli

    // configure the timer
    TCCR1B |= (1 << WGM12);
  ea:	e1 e8       	ldi	r30, 0x81	; 129
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
    OCR1A = 779;
  f4:	8b e0       	ldi	r24, 0x0B	; 11
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
 100:	80 81       	ld	r24, Z
 102:	83 60       	ori	r24, 0x03	; 3
 104:	80 83       	st	Z, r24
    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 106:	ef e6       	ldi	r30, 0x6F	; 111
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24


    // wdt_reset();
    // MCUSR &= ~(1<<3);
    // WDTCSR = 0x00;
    WDTCSR = (1 << WDCE) | (1 << WDE); // Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 110:	e0 e6       	ldi	r30, 0x60	; 96
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP1)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	80 83       	st	Z, r24
    // WDTCSR = (1 << WDIE) ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
    // sei();                             // Enable global interrupts
        // WDTCSR = (1 << WDE) | (1 << WDP2) | (1 << WDP1); // Set the watchdog to approximately 0.5 seconds

    SREG |= (1 << I);
 11c:	8f b7       	in	r24, 0x3f	; 63
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8f bf       	out	0x3f, r24	; 63
}
 122:	08 95       	ret

00000124 <WDGDrv_IsrNotification>:

void WDGDrv_IsrNotification(void)
{
    if ((isr_counter % 2) != 0) // when time is 50 , 150 , 250 and so on
 124:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isr_counter>
 128:	80 ff       	sbrs	r24, 0
 12a:	17 c0       	rjmp	.+46     	; 0x15a <WDGDrv_IsrNotification+0x36>
    {
        // check call_count(times WDGM_MainFunction is called) is 2 or more
        if (call_count_50_ms >= 2)
 12c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count_50_ms>
 130:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count_50_ms+0x1>
 134:	02 97       	sbiw	r24, 0x02	; 2
 136:	54 f0       	brlt	.+20     	; 0x14c <WDGDrv_IsrNotification+0x28>
        {
            stuck = 0;            // The function is not stuck
 138:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x1>
 13c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck>
            wdt_reset(); //  should i do the reset here when not stuck?
 140:	a8 95       	wdr
            // PORTB ^= (1 << 0); // to indicate the perodicity refreshment of the wdt
            call_count_50_ms = 0; // Reset for the next 50ms period
 142:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <call_count_50_ms+0x1>
 146:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <call_count_50_ms>
 14a:	08 95       	ret
        }
        else
        {
            stuck = 1; // The function might be stuck
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <stuck+0x1>
 154:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <stuck>
 158:	08 95       	ret
        }
    }
    else  // if in 100 , 200 , 300 and so on
    {
        if (WDGM_PovideSuppervisionStatus() == OK && (!stuck))
 15a:	0e 94 3c 01 	call	0x278	; 0x278 <WDGM_PovideSuppervisionStatus>
 15e:	81 11       	cpse	r24, r1
 160:	07 c0       	rjmp	.+14     	; 0x170 <WDGDrv_IsrNotification+0x4c>
 162:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <stuck>
 166:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <stuck+0x1>
 16a:	89 2b       	or	r24, r25
 16c:	09 f4       	brne	.+2      	; 0x170 <WDGDrv_IsrNotification+0x4c>
        {
            wdt_reset();
 16e:	a8 95       	wdr
        {
            // leave the wdt to reset 
            return;
        }
    }
}
 170:	08 95       	ret

00000172 <__vector_11>:
extern stuck;
extern call_count_50_ms;
uint32 isr_counter = 0;

ISR(TIMER1_COMPA_vect)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
    isr_counter++;
 194:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isr_counter>
 198:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <isr_counter+0x1>
 19c:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <isr_counter+0x2>
 1a0:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <isr_counter+0x3>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	a1 1d       	adc	r26, r1
 1a8:	b1 1d       	adc	r27, r1
 1aa:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <isr_counter>
 1ae:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <isr_counter+0x1>
 1b2:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <isr_counter+0x2>
 1b6:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <isr_counter+0x3>
    // PORTB ^= (1 << 0); // Set PB0 high
    WDGDrv_IsrNotification();
 1ba:	0e 94 92 00 	call	0x124	; 0x124 <WDGDrv_IsrNotification>
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <WDGM_Init>:
static volatile uint32 led_no_calls;
uint32 stuck;

void WDGM_Init(void)
{
    status = NOK;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <status>
    led_no_calls = 0;
 1e6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 1ea:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 1ee:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 1f2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
    stuck = 0;
 1f6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck>
 1fa:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x1>
 1fe:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stuck+0x2>
 202:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stuck+0x3>
}
 206:	08 95       	ret

00000208 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    PORTB ^= (1 << 3); // to indicate the perodicity of the function
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	98 e0       	ldi	r25, 0x08	; 8
 20c:	89 27       	eor	r24, r25
 20e:	85 b9       	out	0x05, r24	; 5
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms
    if (call_count_100_ms <= 5)
 210:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count_100_ms>
 214:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <call_count_100_ms+0x1>
 218:	06 97       	sbiw	r24, 0x06	; 6
 21a:	fc f4       	brge	.+62     	; 0x25a <WDGM_MainFunction+0x52>
    {
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 21c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 220:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 224:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 228:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 22c:	08 97       	sbiw	r24, 0x08	; 8
 22e:	a1 05       	cpc	r26, r1
 230:	b1 05       	cpc	r27, r1
 232:	78 f0       	brcs	.+30     	; 0x252 <WDGM_MainFunction+0x4a>
 234:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 238:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 23c:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 240:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 244:	0d 97       	sbiw	r24, 0x0d	; 13
 246:	a1 05       	cpc	r26, r1
 248:	b1 05       	cpc	r27, r1
 24a:	18 f4       	brcc	.+6      	; 0x252 <WDGM_MainFunction+0x4a>
        {
            status = OK;
 24c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <status>
 250:	08 95       	ret
        }
        else
        {
            status = NOK;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <status>
 258:	08 95       	ret
        }
    }
    else
    {
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 25a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 25e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 262:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 266:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
        call_count_100_ms = 1;   // return the call count for the next 100ms period
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <call_count_100_ms+0x1>
 272:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <call_count_100_ms>
    }
}
 276:	08 95       	ret

00000278 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 278:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <status>
 27c:	08 95       	ret

0000027e <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 27e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 282:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 286:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 28a:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	a1 1d       	adc	r26, r1
 292:	b1 1d       	adc	r27, r1
 294:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <led_no_calls>
 298:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <led_no_calls+0x1>
 29c:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <led_no_calls+0x2>
 2a0:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <led_no_calls+0x3>
 2a4:	08 95       	ret

000002a6 <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 2a6:	80 36       	cpi	r24, 0x60	; 96
 2a8:	28 f5       	brcc	.+74     	; 0x2f4 <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 2aa:	e8 2f       	mov	r30, r24
 2ac:	e2 95       	swap	r30
 2ae:	e6 95       	lsr	r30
 2b0:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	ea 5f       	subi	r30, 0xFA	; 250
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	01 90       	ld	r0, Z+
 2be:	f0 81       	ld	r31, Z
 2c0:	e0 2d       	mov	r30, r0
 2c2:	40 81       	ld	r20, Z
 2c4:	51 81       	ldd	r21, Z+1	; 0x01
 2c6:	62 81       	ldd	r22, Z+2	; 0x02
 2c8:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 2ca:	98 2f       	mov	r25, r24
 2cc:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <Nvic_EnableInterrupt+0x32>
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	9a 95       	dec	r25
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <Nvic_EnableInterrupt+0x2e>
 2dc:	c9 01       	movw	r24, r18
 2de:	33 0f       	add	r19, r19
 2e0:	aa 0b       	sbc	r26, r26
 2e2:	bb 0b       	sbc	r27, r27
 2e4:	84 2b       	or	r24, r20
 2e6:	95 2b       	or	r25, r21
 2e8:	a6 2b       	or	r26, r22
 2ea:	b7 2b       	or	r27, r23
 2ec:	80 83       	st	Z, r24
 2ee:	91 83       	std	Z+1, r25	; 0x01
 2f0:	a2 83       	std	Z+2, r26	; 0x02
 2f2:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 2f4:	08 95       	ret

000002f6 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 2f6:	80 36       	cpi	r24, 0x60	; 96
 2f8:	28 f5       	brcc	.+74     	; 0x344 <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 2fa:	e8 2f       	mov	r30, r24
 2fc:	e2 95       	swap	r30
 2fe:	e6 95       	lsr	r30
 300:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	e0 50       	subi	r30, 0x00	; 0
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	01 90       	ld	r0, Z+
 30e:	f0 81       	ld	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	40 81       	ld	r20, Z
 314:	51 81       	ldd	r21, Z+1	; 0x01
 316:	62 81       	ldd	r22, Z+2	; 0x02
 318:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 31a:	98 2f       	mov	r25, r24
 31c:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <Nvic_DisableInterrupt+0x32>
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	9a 95       	dec	r25
 32a:	e2 f7       	brpl	.-8      	; 0x324 <Nvic_DisableInterrupt+0x2e>
 32c:	c9 01       	movw	r24, r18
 32e:	33 0f       	add	r19, r19
 330:	aa 0b       	sbc	r26, r26
 332:	bb 0b       	sbc	r27, r27
 334:	84 2b       	or	r24, r20
 336:	95 2b       	or	r25, r21
 338:	a6 2b       	or	r26, r22
 33a:	b7 2b       	or	r27, r23
 33c:	80 83       	st	Z, r24
 33e:	91 83       	std	Z+1, r25	; 0x01
 340:	a2 83       	std	Z+2, r26	; 0x02
 342:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 344:	08 95       	ret

00000346 <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 346:	0e 94 e6 01 	call	0x3cc	; 0x3cc <GPIO_Init>
    led_state = 0;
 34a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <led_state>
    time_counter = 0;
 34e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter>
 352:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x1>
 356:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x2>
 35a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_counter+0x3>
}
 35e:	08 95       	ret

00000360 <LEDM_Manage>:

void LEDM_Manage(void)
{   
    PORTB ^= (1 << 2); // to indicate the perodicity of the function
 360:	85 b1       	in	r24, 0x05	; 5
 362:	94 e0       	ldi	r25, 0x04	; 4
 364:	89 27       	eor	r24, r25
 366:	85 b9       	out	0x05, r24	; 5
    
	if (time_counter == 500)
 368:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <time_counter>
 36c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <time_counter+0x1>
 370:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <time_counter+0x2>
 374:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <time_counter+0x3>
 378:	84 3f       	cpi	r24, 0xF4	; 244
 37a:	91 40       	sbci	r25, 0x01	; 1
 37c:	a1 05       	cpc	r26, r1
 37e:	b1 05       	cpc	r27, r1
 380:	81 f4       	brne	.+32     	; 0x3a2 <LEDM_Manage+0x42>
    {
		led_state = ~led_state;
 382:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <led_state>
 386:	60 95       	com	r22
 388:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <GPIO_Write>
		time_counter = 0;
 392:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter>
 396:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x1>
 39a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x2>
 39e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_counter+0x3>
    }
	// time_counter += 5;
	time_counter += 10;
 3a2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <time_counter>
 3a6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <time_counter+0x1>
 3aa:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <time_counter+0x2>
 3ae:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <time_counter+0x3>
 3b2:	0a 96       	adiw	r24, 0x0a	; 10
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <time_counter>
 3bc:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <time_counter+0x1>
 3c0:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <time_counter+0x2>
 3c4:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 3c8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <WDGM_AlivenessIndication>

000003cc <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 3cc:	21 9a       	sbi	0x04, 1	; 4

}
 3ce:	08 95       	ret

000003d0 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 3d0:	45 b1       	in	r20, 0x05	; 5
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	f9 01       	movw	r30, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <GPIO_Write+0xe>
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	8a 95       	dec	r24
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <GPIO_Write+0xa>
 3e2:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 3e4:	66 23       	and	r22, r22
 3e6:	19 f0       	breq	.+6      	; 0x3ee <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 3e8:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 3ea:	85 b9       	out	0x05, r24	; 5
    }
}
 3ec:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 3ee:	80 95       	com	r24
 3f0:	84 23       	and	r24, r20
 3f2:	fb cf       	rjmp	.-10     	; 0x3ea <GPIO_Write+0x1a>

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
