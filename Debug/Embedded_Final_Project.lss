
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000008c8  0000095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800112  00800112  0000096e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd9  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3e  00000000  00000000  000018b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a52  00000000  00000000  000022f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00002d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d3d  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000409  00000000  00000000  0000acf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e1b  00000000  00000000  0000b19e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <GPIO.h>
#include <LEDM.h>
#include <WDGM.h>


int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	60 97       	sbiw	r28, 0x10	; 16
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    // Set PB0 as output for the LED
	GPIO_Init();
  ba:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GPIO_Init>

//    WDGDrv_Init();
    // LEDM_Init();
    // WDGM_Init();

    int counter = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	9a 83       	std	Y+2, r25	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	a0 e2       	ldi	r26, 0x20	; 32
  cc:	b1 e4       	ldi	r27, 0x41	; 65
  ce:	8b 83       	std	Y+3, r24	; 0x03
  d0:	9c 83       	std	Y+4, r25	; 0x04
  d2:	ad 83       	std	Y+5, r26	; 0x05
  d4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	4a e7       	ldi	r20, 0x7A	; 122
  dc:	53 e4       	ldi	r21, 0x43	; 67
  de:	6b 81       	ldd	r22, Y+3	; 0x03
  e0:	7c 81       	ldd	r23, Y+4	; 0x04
  e2:	8d 81       	ldd	r24, Y+5	; 0x05
  e4:	9e 81       	ldd	r25, Y+6	; 0x06
  e6:	0e 94 cd 03 	call	0x79a	; 0x79a <__mulsf3>
  ea:	dc 01       	movw	r26, r24
  ec:	cb 01       	movw	r24, r22
  ee:	8f 83       	std	Y+7, r24	; 0x07
  f0:	98 87       	std	Y+8, r25	; 0x08
  f2:	a9 87       	std	Y+9, r26	; 0x09
  f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	40 e8       	ldi	r20, 0x80	; 128
  fc:	5f e3       	ldi	r21, 0x3F	; 63
  fe:	6f 81       	ldd	r22, Y+7	; 0x07
 100:	78 85       	ldd	r23, Y+8	; 0x08
 102:	89 85       	ldd	r24, Y+9	; 0x09
 104:	9a 85       	ldd	r25, Y+10	; 0x0a
 106:	0e 94 47 03 	call	0x68e	; 0x68e <__cmpsf2>
 10a:	88 23       	and	r24, r24
 10c:	2c f4       	brge	.+10     	; 0x118 <main+0x72>
		__ticks = 1;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	9c 87       	std	Y+12, r25	; 0x0c
 114:	8b 87       	std	Y+11, r24	; 0x0b
 116:	3f c0       	rjmp	.+126    	; 0x196 <main+0xf0>
	else if (__tmp > 65535)
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	3f ef       	ldi	r19, 0xFF	; 255
 11c:	4f e7       	ldi	r20, 0x7F	; 127
 11e:	57 e4       	ldi	r21, 0x47	; 71
 120:	6f 81       	ldd	r22, Y+7	; 0x07
 122:	78 85       	ldd	r23, Y+8	; 0x08
 124:	89 85       	ldd	r24, Y+9	; 0x09
 126:	9a 85       	ldd	r25, Y+10	; 0x0a
 128:	0e 94 c8 03 	call	0x790	; 0x790 <__gesf2>
 12c:	18 16       	cp	r1, r24
 12e:	4c f5       	brge	.+82     	; 0x182 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	40 e2       	ldi	r20, 0x20	; 32
 136:	51 e4       	ldi	r21, 0x41	; 65
 138:	6b 81       	ldd	r22, Y+3	; 0x03
 13a:	7c 81       	ldd	r23, Y+4	; 0x04
 13c:	8d 81       	ldd	r24, Y+5	; 0x05
 13e:	9e 81       	ldd	r25, Y+6	; 0x06
 140:	0e 94 cd 03 	call	0x79a	; 0x79a <__mulsf3>
 144:	dc 01       	movw	r26, r24
 146:	cb 01       	movw	r24, r22
 148:	bc 01       	movw	r22, r24
 14a:	cd 01       	movw	r24, r26
 14c:	0e 94 4c 03 	call	0x698	; 0x698 <__fixunssfsi>
 150:	dc 01       	movw	r26, r24
 152:	cb 01       	movw	r24, r22
 154:	9c 87       	std	Y+12, r25	; 0x0c
 156:	8b 87       	std	Y+11, r24	; 0x0b
 158:	0f c0       	rjmp	.+30     	; 0x178 <main+0xd2>
 15a:	89 e1       	ldi	r24, 0x19	; 25
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	9e 87       	std	Y+14, r25	; 0x0e
 160:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 162:	8d 85       	ldd	r24, Y+13	; 0x0d
 164:	9e 85       	ldd	r25, Y+14	; 0x0e
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0xc0>
 16a:	9e 87       	std	Y+14, r25	; 0x0e
 16c:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16e:	8b 85       	ldd	r24, Y+11	; 0x0b
 170:	9c 85       	ldd	r25, Y+12	; 0x0c
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	9c 87       	std	Y+12, r25	; 0x0c
 176:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 178:	8b 85       	ldd	r24, Y+11	; 0x0b
 17a:	9c 85       	ldd	r25, Y+12	; 0x0c
 17c:	89 2b       	or	r24, r25
 17e:	69 f7       	brne	.-38     	; 0x15a <main+0xb4>
 180:	14 c0       	rjmp	.+40     	; 0x1aa <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 182:	6f 81       	ldd	r22, Y+7	; 0x07
 184:	78 85       	ldd	r23, Y+8	; 0x08
 186:	89 85       	ldd	r24, Y+9	; 0x09
 188:	9a 85       	ldd	r25, Y+10	; 0x0a
 18a:	0e 94 4c 03 	call	0x698	; 0x698 <__fixunssfsi>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	9c 87       	std	Y+12, r25	; 0x0c
 194:	8b 87       	std	Y+11, r24	; 0x0b
 196:	8b 85       	ldd	r24, Y+11	; 0x0b
 198:	9c 85       	ldd	r25, Y+12	; 0x0c
 19a:	98 8b       	std	Y+16, r25	; 0x10
 19c:	8f 87       	std	Y+15, r24	; 0x0f
 19e:	8f 85       	ldd	r24, Y+15	; 0x0f
 1a0:	98 89       	ldd	r25, Y+16	; 0x10
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0xfc>
 1a6:	98 8b       	std	Y+16, r25	; 0x10
 1a8:	8f 87       	std	Y+15, r24	; 0x0f

    while (1) {

        _delay_ms(10);         // Wait for 10 milliseconds
         LEDM_Manage();
 1aa:	0e 94 ae 02 	call	0x55c	; 0x55c <LEDM_Manage>
         if (counter == 2)
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	9a 81       	ldd	r25, Y+2	; 0x02
 1b2:	02 97       	sbiw	r24, 0x02	; 2
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <main+0x11c>
         {
           WDGM_MainFunction();
 1b6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <WDGM_MainFunction>
           counter = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	9a 83       	std	Y+2, r25	; 0x02
 1c0:	89 83       	std	Y+1, r24	; 0x01
         }
         counter++;
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01

    int counter = 1;

    while (1) {

        _delay_ms(10);         // Wait for 10 milliseconds
 1cc:	7c cf       	rjmp	.-264    	; 0xc6 <main+0x20>

000001ce <__vector_6>:


int x = 0;


ISR(WDT_vect) {
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
    x = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 1f2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
    PORTB |= (1 << 0); // Set PB0 high
 1f6:	85 e2       	ldi	r24, 0x25	; 37
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 81       	ld	r18, Z
 1fe:	85 e2       	ldi	r24, 0x25	; 37
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	21 60       	ori	r18, 0x01	; 1
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
    // for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
    // _delay_ms(1000); 
    // WDTCSR = (1 << WDIE);
}
 208:	00 00       	nop
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	2f 91       	pop	r18
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <WDGDrv_Init>:

void WDGDrv_Init(void) {
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << 0);
 22a:	84 e2       	ldi	r24, 0x24	; 36
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	20 81       	ld	r18, Z
 232:	84 e2       	ldi	r24, 0x24	; 36
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	21 60       	ori	r18, 0x01	; 1
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);
 23c:	85 e2       	ldi	r24, 0x25	; 37
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	20 81       	ld	r18, Z
 244:	85 e2       	ldi	r24, 0x25	; 37
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	2e 7f       	andi	r18, 0xFE	; 254
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
    // Disable global interrupts
    cli();
 24e:	f8 94       	cli
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	88 70       	andi	r24, 0x08	; 8
 256:	99 27       	eor	r25, r25
 258:	89 2b       	or	r24, r25
 25a:	11 f0       	breq	.+4      	; 0x260 <WDGDrv_Init+0x3e>
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	01 c0       	rjmp	.+2      	; 0x262 <WDGDrv_Init+0x40>
 260:	88 e0       	ldi	r24, 0x08	; 8
						_BV(WDE) | (value & 0x07)) )
 262:	92 e0       	ldi	r25, 0x02	; 2
 264:	97 70       	andi	r25, 0x07	; 7
 266:	89 2b       	or	r24, r25
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 268:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 26a:	88 e1       	ldi	r24, 0x18	; 24
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	a8 95       	wdr
 272:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 276:	0f be       	out	0x3f, r0	; 63
 278:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    // SREG &= ~(1 << I);
    //Interrupt and System Reset Mode
    wdt_enable(2);
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 27c:	80 e6       	ldi	r24, 0x60	; 96
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	28 e1       	ldi	r18, 0x18	; 24
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
    WDTCSR =  (1 << WDE)|(1 << WDIE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 286:	80 e6       	ldi	r24, 0x60	; 96
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2a e4       	ldi	r18, 0x4A	; 74
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
    sei(); // Enable global interrupts
 290:	78 94       	sei
    // SREG |= (1 << I);
// 
}
 292:	00 00       	nop
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
    // uint32 current_time = HAL_GetTick();

    if(WDGM_PovideSuppervisionStatus()==OK  /*&& the WDGM_MainFunction_is_not_STUCK*/){
 2a2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <WDGM_PovideSuppervisionStatus>
       //refresh 
    }else{
        return;
    }
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <WDGM_Init>:
static uint32 start_time;
static uint32 current_time;
uint32 last_execution_time;

void WDGM_Init(void)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>
    led_no_calls = 0;
 2ba:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls>
 2be:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x1>
 2c2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x2>
 2c6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x3>
    //start_time = HAL_GetTick();
    start_time = 0;
 2ca:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <start_time>
 2ce:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <start_time+0x1>
 2d2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <start_time+0x2>
 2d6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <start_time+0x3>
    //last_execution_time = HAL_GetTick(); 

}
 2da:	00 00       	nop
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
    //uint32 current_time = HAL_GetTick(); // get current time value using hal lib in stm32f4xx_hal
    if ((current_time - start_time) <= 100) // check if it's within 100ms
 2f2:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <current_time>
 2f6:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <current_time+0x1>
 2fa:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <current_time+0x2>
 2fe:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <current_time+0x3>
 302:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <start_time>
 306:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <start_time+0x1>
 30a:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <start_time+0x2>
 30e:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <start_time+0x3>
 312:	79 01       	movw	r14, r18
 314:	8a 01       	movw	r16, r20
 316:	e8 1a       	sub	r14, r24
 318:	f9 0a       	sbc	r15, r25
 31a:	0a 0b       	sbc	r16, r26
 31c:	1b 0b       	sbc	r17, r27
 31e:	d8 01       	movw	r26, r16
 320:	c7 01       	movw	r24, r14
 322:	85 36       	cpi	r24, 0x65	; 101
 324:	91 05       	cpc	r25, r1
 326:	a1 05       	cpc	r26, r1
 328:	b1 05       	cpc	r27, r1
 32a:	b0 f5       	brcc	.+108    	; 0x398 <WDGM_MainFunction+0xb6>
    {
        if (led_no_calls >= 8 && led_no_calls <= 12) { // check no. of calls is between 8 and 12 or not
 32c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_no_calls>
 330:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <led_no_calls+0x1>
 334:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <led_no_calls+0x2>
 338:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <led_no_calls+0x3>
 33c:	08 97       	sbiw	r24, 0x08	; 8
 33e:	a1 05       	cpc	r26, r1
 340:	b1 05       	cpc	r27, r1
 342:	78 f0       	brcs	.+30     	; 0x362 <WDGM_MainFunction+0x80>
 344:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_no_calls>
 348:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <led_no_calls+0x1>
 34c:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <led_no_calls+0x2>
 350:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <led_no_calls+0x3>
 354:	0d 97       	sbiw	r24, 0x0d	; 13
 356:	a1 05       	cpc	r26, r1
 358:	b1 05       	cpc	r27, r1
 35a:	18 f4       	brcc	.+6      	; 0x362 <WDGM_MainFunction+0x80>
            status = OK;
 35c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <status>
 360:	03 c0       	rjmp	.+6      	; 0x368 <WDGM_MainFunction+0x86>
        } else {
            status = NOK;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 368:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_no_calls>
 36c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_no_calls+0x1>
 370:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls+0x2>
 374:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x3>
        start_time = current_time; // update start time for the next 100ms period
 378:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <current_time>
 37c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <current_time+0x1>
 380:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <current_time+0x2>
 384:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <current_time+0x3>
 388:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <start_time>
 38c:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <start_time+0x1>
 390:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <start_time+0x2>
 394:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <start_time+0x3>
    }
    last_execution_time = current_time;
 398:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <current_time>
 39c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <current_time+0x1>
 3a0:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <current_time+0x2>
 3a4:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <current_time+0x3>
 3a8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <last_execution_time>
 3ac:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <last_execution_time+0x1>
 3b0:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <last_execution_time+0x2>
 3b4:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <last_execution_time+0x3>
}
 3b8:	00 00       	nop
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	08 95       	ret

000003c8 <WDGM_PovideSuppervisionStatus>:

WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 3d0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <status>
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 3e2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_no_calls>
 3e6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <led_no_calls+0x1>
 3ea:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <led_no_calls+0x2>
 3ee:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <led_no_calls+0x3>
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	a1 1d       	adc	r26, r1
 3f6:	b1 1d       	adc	r27, r1
 3f8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <led_no_calls>
 3fc:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <led_no_calls+0x1>
 400:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <led_no_calls+0x2>
 404:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <led_no_calls+0x3>
}
 408:	00 00       	nop
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	00 d0       	rcall	.+0      	; 0x416 <Nvic_EnableInterrupt+0x6>
 416:	1f 92       	push	r1
 418:	cd b7       	in	r28, 0x3d	; 61
 41a:	de b7       	in	r29, 0x3e	; 62
 41c:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	80 36       	cpi	r24, 0x60	; 96
 422:	c0 f5       	brcc	.+112    	; 0x494 <Nvic_EnableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	82 95       	swap	r24
 428:	86 95       	lsr	r24
 42a:	87 70       	andi	r24, 0x07	; 7
 42c:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	8f 71       	andi	r24, 0x1F	; 31
 432:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	80 50       	subi	r24, 0x00	; 0
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	fc 01       	movw	r30, r24
 444:	80 81       	ld	r24, Z
 446:	91 81       	ldd	r25, Z+1	; 0x01
 448:	fc 01       	movw	r30, r24
 44a:	20 81       	ld	r18, Z
 44c:	31 81       	ldd	r19, Z+1	; 0x01
 44e:	42 81       	ldd	r20, Z+2	; 0x02
 450:	53 81       	ldd	r21, Z+3	; 0x03
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	68 2f       	mov	r22, r24
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <Nvic_EnableInterrupt+0x52>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <Nvic_EnableInterrupt+0x4e>
 466:	09 2e       	mov	r0, r25
 468:	00 0c       	add	r0, r0
 46a:	aa 0b       	sbc	r26, r26
 46c:	bb 0b       	sbc	r27, r27
 46e:	69 81       	ldd	r22, Y+1	; 0x01
 470:	66 2f       	mov	r22, r22
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	60 50       	subi	r22, 0x00	; 0
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	fb 01       	movw	r30, r22
 47e:	60 81       	ld	r22, Z
 480:	71 81       	ldd	r23, Z+1	; 0x01
 482:	82 2b       	or	r24, r18
 484:	93 2b       	or	r25, r19
 486:	a4 2b       	or	r26, r20
 488:	b5 2b       	or	r27, r21
 48a:	fb 01       	movw	r30, r22
 48c:	80 83       	st	Z, r24
 48e:	91 83       	std	Z+1, r25	; 0x01
 490:	a2 83       	std	Z+2, r26	; 0x02
 492:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 494:	00 00       	nop
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <Nvic_DisableInterrupt+0x6>
 4a8:	1f 92       	push	r1
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 4b0:	8b 81       	ldd	r24, Y+3	; 0x03
 4b2:	80 36       	cpi	r24, 0x60	; 96
 4b4:	c0 f5       	brcc	.+112    	; 0x526 <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	82 95       	swap	r24
 4ba:	86 95       	lsr	r24
 4bc:	87 70       	andi	r24, 0x07	; 7
 4be:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	8f 71       	andi	r24, 0x1F	; 31
 4c4:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	88 2f       	mov	r24, r24
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	8a 5f       	subi	r24, 0xFA	; 250
 4d2:	9e 4f       	sbci	r25, 0xFE	; 254
 4d4:	fc 01       	movw	r30, r24
 4d6:	80 81       	ld	r24, Z
 4d8:	91 81       	ldd	r25, Z+1	; 0x01
 4da:	fc 01       	movw	r30, r24
 4dc:	20 81       	ld	r18, Z
 4de:	31 81       	ldd	r19, Z+1	; 0x01
 4e0:	42 81       	ldd	r20, Z+2	; 0x02
 4e2:	53 81       	ldd	r21, Z+3	; 0x03
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	68 2f       	mov	r22, r24
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <Nvic_DisableInterrupt+0x52>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <Nvic_DisableInterrupt+0x4e>
 4f8:	09 2e       	mov	r0, r25
 4fa:	00 0c       	add	r0, r0
 4fc:	aa 0b       	sbc	r26, r26
 4fe:	bb 0b       	sbc	r27, r27
 500:	69 81       	ldd	r22, Y+1	; 0x01
 502:	66 2f       	mov	r22, r22
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	6a 5f       	subi	r22, 0xFA	; 250
 50c:	7e 4f       	sbci	r23, 0xFE	; 254
 50e:	fb 01       	movw	r30, r22
 510:	60 81       	ld	r22, Z
 512:	71 81       	ldd	r23, Z+1	; 0x01
 514:	82 2b       	or	r24, r18
 516:	93 2b       	or	r25, r19
 518:	a4 2b       	or	r26, r20
 51a:	b5 2b       	or	r27, r21
 51c:	fb 01       	movw	r30, r22
 51e:	80 83       	st	Z, r24
 520:	91 83       	std	Z+1, r25	; 0x01
 522:	a2 83       	std	Z+2, r26	; 0x02
 524:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 526:	00 00       	nop
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <LEDM_Init>:

static uint8 led_state;


void LEDM_Init(void)
{
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 53c:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <GPIO_Init>
    led_state = 0;
 540:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_state>
    time_counter = 0;
 544:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <time_counter>
 548:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <time_counter+0x1>
 54c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <time_counter+0x2>
 550:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter+0x3>
}
 554:	00 00       	nop
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <LEDM_Manage>:

void LEDM_Manage(void)
{
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
	time_counter += 10;
 564:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <time_counter>
 568:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <time_counter+0x1>
 56c:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <time_counter+0x2>
 570:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <time_counter+0x3>
 574:	0a 96       	adiw	r24, 0x0a	; 10
 576:	a1 1d       	adc	r26, r1
 578:	b1 1d       	adc	r27, r1
 57a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <time_counter>
 57e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <time_counter+0x1>
 582:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <time_counter+0x2>
 586:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <time_counter+0x3>
	if (time_counter == 500)
 58a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <time_counter>
 58e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <time_counter+0x1>
 592:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <time_counter+0x2>
 596:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <time_counter+0x3>
 59a:	84 3f       	cpi	r24, 0xF4	; 244
 59c:	91 40       	sbci	r25, 0x01	; 1
 59e:	a1 05       	cpc	r26, r1
 5a0:	b1 05       	cpc	r27, r1
 5a2:	99 f4       	brne	.+38     	; 0x5ca <LEDM_Manage+0x6e>
    {
		led_state = ~led_state;
 5a4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <led_state>
 5a8:	80 95       	com	r24
 5aa:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 5ae:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <led_state>
 5b2:	68 2f       	mov	r22, r24
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	0e 94 04 03 	call	0x608	; 0x608 <GPIO_Write>
		time_counter = 0;
 5ba:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <time_counter>
 5be:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <time_counter+0x1>
 5c2:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <time_counter+0x2>
 5c6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter+0x3>
    }
    WDGM_AlivenessIndication(); // to count the number of function calls
 5ca:	0e 94 ed 01 	call	0x3da	; 0x3da <WDGM_AlivenessIndication>
}
 5ce:	00 00       	nop
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <GPIO_Init>:
#include "Gpio_Private.h"

GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	00 d0       	rcall	.+0      	; 0x5dc <GPIO_Init+0x6>
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 5e0:	83 e2       	ldi	r24, 0x23	; 35
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	9a 83       	std	Y+2, r25	; 0x02
 5e6:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->DDR |= (1 << LED_PIN_ID);
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	9a 81       	ldd	r25, Y+2	; 0x02
 5ec:	fc 01       	movw	r30, r24
 5ee:	81 81       	ldd	r24, Z+1	; 0x01
 5f0:	28 2f       	mov	r18, r24
 5f2:	22 60       	ori	r18, 0x02	; 2
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	9a 81       	ldd	r25, Y+2	; 0x02
 5f8:	fc 01       	movw	r30, r24
 5fa:	21 83       	std	Z+1, r18	; 0x01

}
 5fc:	00 00       	nop
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	00 d0       	rcall	.+0      	; 0x60e <GPIO_Write+0x6>
 60e:	00 d0       	rcall	.+0      	; 0x610 <GPIO_Write+0x8>
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
 614:	8b 83       	std	Y+3, r24	; 0x03
 616:	6c 83       	std	Y+4, r22	; 0x04
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 618:	83 e2       	ldi	r24, 0x23	; 35
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	9a 83       	std	Y+2, r25	; 0x02
 61e:	89 83       	std	Y+1, r24	; 0x01
    if (PinData) {
 620:	8c 81       	ldd	r24, Y+4	; 0x04
 622:	88 23       	and	r24, r24
 624:	b1 f0       	breq	.+44     	; 0x652 <GPIO_Write+0x4a>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	9a 81       	ldd	r25, Y+2	; 0x02
 62a:	fc 01       	movw	r30, r24
 62c:	82 81       	ldd	r24, Z+2	; 0x02
 62e:	48 2f       	mov	r20, r24
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	28 2f       	mov	r18, r24
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <GPIO_Write+0x38>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	2a 95       	dec	r18
 642:	e2 f7       	brpl	.-8      	; 0x63c <GPIO_Write+0x34>
 644:	84 2b       	or	r24, r20
 646:	28 2f       	mov	r18, r24
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	9a 81       	ldd	r25, Y+2	; 0x02
 64c:	fc 01       	movw	r30, r24
 64e:	22 83       	std	Z+2, r18	; 0x02
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
    }
}
 650:	16 c0       	rjmp	.+44     	; 0x67e <GPIO_Write+0x76>
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 652:	89 81       	ldd	r24, Y+1	; 0x01
 654:	9a 81       	ldd	r25, Y+2	; 0x02
 656:	fc 01       	movw	r30, r24
 658:	82 81       	ldd	r24, Z+2	; 0x02
 65a:	48 2f       	mov	r20, r24
 65c:	8b 81       	ldd	r24, Y+3	; 0x03
 65e:	28 2f       	mov	r18, r24
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <GPIO_Write+0x64>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	2a 95       	dec	r18
 66e:	e2 f7       	brpl	.-8      	; 0x668 <GPIO_Write+0x60>
 670:	80 95       	com	r24
 672:	84 23       	and	r24, r20
 674:	28 2f       	mov	r18, r24
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	9a 81       	ldd	r25, Y+2	; 0x02
 67a:	fc 01       	movw	r30, r24
 67c:	22 83       	std	Z+2, r18	; 0x02
    }
}
 67e:	00 00       	nop
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	0f 90       	pop	r0
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	08 95       	ret

0000068e <__cmpsf2>:
 68e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_cmp>
 692:	08 f4       	brcc	.+2      	; 0x696 <__cmpsf2+0x8>
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	08 95       	ret

00000698 <__fixunssfsi>:
 698:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_splitA>
 69c:	88 f0       	brcs	.+34     	; 0x6c0 <__fixunssfsi+0x28>
 69e:	9f 57       	subi	r25, 0x7F	; 127
 6a0:	98 f0       	brcs	.+38     	; 0x6c8 <__fixunssfsi+0x30>
 6a2:	b9 2f       	mov	r27, r25
 6a4:	99 27       	eor	r25, r25
 6a6:	b7 51       	subi	r27, 0x17	; 23
 6a8:	b0 f0       	brcs	.+44     	; 0x6d6 <__fixunssfsi+0x3e>
 6aa:	e1 f0       	breq	.+56     	; 0x6e4 <__fixunssfsi+0x4c>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	1a f0       	brmi	.+6      	; 0x6bc <__fixunssfsi+0x24>
 6b6:	ba 95       	dec	r27
 6b8:	c9 f7       	brne	.-14     	; 0x6ac <__fixunssfsi+0x14>
 6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <__fixunssfsi+0x4c>
 6bc:	b1 30       	cpi	r27, 0x01	; 1
 6be:	91 f0       	breq	.+36     	; 0x6e4 <__fixunssfsi+0x4c>
 6c0:	0e 94 c1 03 	call	0x782	; 0x782 <__fp_zero>
 6c4:	b1 e0       	ldi	r27, 0x01	; 1
 6c6:	08 95       	ret
 6c8:	0c 94 c1 03 	jmp	0x782	; 0x782 <__fp_zero>
 6cc:	67 2f       	mov	r22, r23
 6ce:	78 2f       	mov	r23, r24
 6d0:	88 27       	eor	r24, r24
 6d2:	b8 5f       	subi	r27, 0xF8	; 248
 6d4:	39 f0       	breq	.+14     	; 0x6e4 <__fixunssfsi+0x4c>
 6d6:	b9 3f       	cpi	r27, 0xF9	; 249
 6d8:	cc f3       	brlt	.-14     	; 0x6cc <__fixunssfsi+0x34>
 6da:	86 95       	lsr	r24
 6dc:	77 95       	ror	r23
 6de:	67 95       	ror	r22
 6e0:	b3 95       	inc	r27
 6e2:	d9 f7       	brne	.-10     	; 0x6da <__fixunssfsi+0x42>
 6e4:	3e f4       	brtc	.+14     	; 0x6f4 <__fixunssfsi+0x5c>
 6e6:	90 95       	com	r25
 6e8:	80 95       	com	r24
 6ea:	70 95       	com	r23
 6ec:	61 95       	neg	r22
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	8f 4f       	sbci	r24, 0xFF	; 255
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	08 95       	ret

000006f6 <__fp_cmp>:
 6f6:	99 0f       	add	r25, r25
 6f8:	00 08       	sbc	r0, r0
 6fa:	55 0f       	add	r21, r21
 6fc:	aa 0b       	sbc	r26, r26
 6fe:	e0 e8       	ldi	r30, 0x80	; 128
 700:	fe ef       	ldi	r31, 0xFE	; 254
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	e8 07       	cpc	r30, r24
 708:	f9 07       	cpc	r31, r25
 70a:	c0 f0       	brcs	.+48     	; 0x73c <__fp_cmp+0x46>
 70c:	12 16       	cp	r1, r18
 70e:	13 06       	cpc	r1, r19
 710:	e4 07       	cpc	r30, r20
 712:	f5 07       	cpc	r31, r21
 714:	98 f0       	brcs	.+38     	; 0x73c <__fp_cmp+0x46>
 716:	62 1b       	sub	r22, r18
 718:	73 0b       	sbc	r23, r19
 71a:	84 0b       	sbc	r24, r20
 71c:	95 0b       	sbc	r25, r21
 71e:	39 f4       	brne	.+14     	; 0x72e <__fp_cmp+0x38>
 720:	0a 26       	eor	r0, r26
 722:	61 f0       	breq	.+24     	; 0x73c <__fp_cmp+0x46>
 724:	23 2b       	or	r18, r19
 726:	24 2b       	or	r18, r20
 728:	25 2b       	or	r18, r21
 72a:	21 f4       	brne	.+8      	; 0x734 <__fp_cmp+0x3e>
 72c:	08 95       	ret
 72e:	0a 26       	eor	r0, r26
 730:	09 f4       	brne	.+2      	; 0x734 <__fp_cmp+0x3e>
 732:	a1 40       	sbci	r26, 0x01	; 1
 734:	a6 95       	lsr	r26
 736:	8f ef       	ldi	r24, 0xFF	; 255
 738:	81 1d       	adc	r24, r1
 73a:	81 1d       	adc	r24, r1
 73c:	08 95       	ret

0000073e <__fp_split3>:
 73e:	57 fd       	sbrc	r21, 7
 740:	90 58       	subi	r25, 0x80	; 128
 742:	44 0f       	add	r20, r20
 744:	55 1f       	adc	r21, r21
 746:	59 f0       	breq	.+22     	; 0x75e <__fp_splitA+0x10>
 748:	5f 3f       	cpi	r21, 0xFF	; 255
 74a:	71 f0       	breq	.+28     	; 0x768 <__fp_splitA+0x1a>
 74c:	47 95       	ror	r20

0000074e <__fp_splitA>:
 74e:	88 0f       	add	r24, r24
 750:	97 fb       	bst	r25, 7
 752:	99 1f       	adc	r25, r25
 754:	61 f0       	breq	.+24     	; 0x76e <__fp_splitA+0x20>
 756:	9f 3f       	cpi	r25, 0xFF	; 255
 758:	79 f0       	breq	.+30     	; 0x778 <__fp_splitA+0x2a>
 75a:	87 95       	ror	r24
 75c:	08 95       	ret
 75e:	12 16       	cp	r1, r18
 760:	13 06       	cpc	r1, r19
 762:	14 06       	cpc	r1, r20
 764:	55 1f       	adc	r21, r21
 766:	f2 cf       	rjmp	.-28     	; 0x74c <__fp_split3+0xe>
 768:	46 95       	lsr	r20
 76a:	f1 df       	rcall	.-30     	; 0x74e <__fp_splitA>
 76c:	08 c0       	rjmp	.+16     	; 0x77e <__fp_splitA+0x30>
 76e:	16 16       	cp	r1, r22
 770:	17 06       	cpc	r1, r23
 772:	18 06       	cpc	r1, r24
 774:	99 1f       	adc	r25, r25
 776:	f1 cf       	rjmp	.-30     	; 0x75a <__fp_splitA+0xc>
 778:	86 95       	lsr	r24
 77a:	71 05       	cpc	r23, r1
 77c:	61 05       	cpc	r22, r1
 77e:	08 94       	sec
 780:	08 95       	ret

00000782 <__fp_zero>:
 782:	e8 94       	clt

00000784 <__fp_szero>:
 784:	bb 27       	eor	r27, r27
 786:	66 27       	eor	r22, r22
 788:	77 27       	eor	r23, r23
 78a:	cb 01       	movw	r24, r22
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret

00000790 <__gesf2>:
 790:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__fp_cmp>
 794:	08 f4       	brcc	.+2      	; 0x798 <__gesf2+0x8>
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	08 95       	ret

0000079a <__mulsf3>:
 79a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__mulsf3x>
 79e:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_round>
 7a2:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscA>
 7a6:	38 f0       	brcs	.+14     	; 0x7b6 <__mulsf3+0x1c>
 7a8:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_pscB>
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__mulsf3+0x1c>
 7ae:	95 23       	and	r25, r21
 7b0:	11 f0       	breq	.+4      	; 0x7b6 <__mulsf3+0x1c>
 7b2:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 7b6:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_nan>
 7ba:	11 24       	eor	r1, r1
 7bc:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_szero>

000007c0 <__mulsf3x>:
 7c0:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_split3>
 7c4:	70 f3       	brcs	.-36     	; 0x7a2 <__mulsf3+0x8>

000007c6 <__mulsf3_pse>:
 7c6:	95 9f       	mul	r25, r21
 7c8:	c1 f3       	breq	.-16     	; 0x7ba <__mulsf3+0x20>
 7ca:	95 0f       	add	r25, r21
 7cc:	50 e0       	ldi	r21, 0x00	; 0
 7ce:	55 1f       	adc	r21, r21
 7d0:	62 9f       	mul	r22, r18
 7d2:	f0 01       	movw	r30, r0
 7d4:	72 9f       	mul	r23, r18
 7d6:	bb 27       	eor	r27, r27
 7d8:	f0 0d       	add	r31, r0
 7da:	b1 1d       	adc	r27, r1
 7dc:	63 9f       	mul	r22, r19
 7de:	aa 27       	eor	r26, r26
 7e0:	f0 0d       	add	r31, r0
 7e2:	b1 1d       	adc	r27, r1
 7e4:	aa 1f       	adc	r26, r26
 7e6:	64 9f       	mul	r22, r20
 7e8:	66 27       	eor	r22, r22
 7ea:	b0 0d       	add	r27, r0
 7ec:	a1 1d       	adc	r26, r1
 7ee:	66 1f       	adc	r22, r22
 7f0:	82 9f       	mul	r24, r18
 7f2:	22 27       	eor	r18, r18
 7f4:	b0 0d       	add	r27, r0
 7f6:	a1 1d       	adc	r26, r1
 7f8:	62 1f       	adc	r22, r18
 7fa:	73 9f       	mul	r23, r19
 7fc:	b0 0d       	add	r27, r0
 7fe:	a1 1d       	adc	r26, r1
 800:	62 1f       	adc	r22, r18
 802:	83 9f       	mul	r24, r19
 804:	a0 0d       	add	r26, r0
 806:	61 1d       	adc	r22, r1
 808:	22 1f       	adc	r18, r18
 80a:	74 9f       	mul	r23, r20
 80c:	33 27       	eor	r19, r19
 80e:	a0 0d       	add	r26, r0
 810:	61 1d       	adc	r22, r1
 812:	23 1f       	adc	r18, r19
 814:	84 9f       	mul	r24, r20
 816:	60 0d       	add	r22, r0
 818:	21 1d       	adc	r18, r1
 81a:	82 2f       	mov	r24, r18
 81c:	76 2f       	mov	r23, r22
 81e:	6a 2f       	mov	r22, r26
 820:	11 24       	eor	r1, r1
 822:	9f 57       	subi	r25, 0x7F	; 127
 824:	50 40       	sbci	r21, 0x00	; 0
 826:	9a f0       	brmi	.+38     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 828:	f1 f0       	breq	.+60     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 82a:	88 23       	and	r24, r24
 82c:	4a f0       	brmi	.+18     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	bb 1f       	adc	r27, r27
 834:	66 1f       	adc	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	91 50       	subi	r25, 0x01	; 1
 83c:	50 40       	sbci	r21, 0x00	; 0
 83e:	a9 f7       	brne	.-22     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 840:	9e 3f       	cpi	r25, 0xFE	; 254
 842:	51 05       	cpc	r21, r1
 844:	80 f0       	brcs	.+32     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 846:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 84a:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_szero>
 84e:	5f 3f       	cpi	r21, 0xFF	; 255
 850:	e4 f3       	brlt	.-8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 852:	98 3e       	cpi	r25, 0xE8	; 232
 854:	d4 f3       	brlt	.-12     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 856:	86 95       	lsr	r24
 858:	77 95       	ror	r23
 85a:	67 95       	ror	r22
 85c:	b7 95       	ror	r27
 85e:	f7 95       	ror	r31
 860:	e7 95       	ror	r30
 862:	9f 5f       	subi	r25, 0xFF	; 255
 864:	c1 f7       	brne	.-16     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 866:	fe 2b       	or	r31, r30
 868:	88 0f       	add	r24, r24
 86a:	91 1d       	adc	r25, r1
 86c:	96 95       	lsr	r25
 86e:	87 95       	ror	r24
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret

00000874 <__fp_inf>:
 874:	97 f9       	bld	r25, 7
 876:	9f 67       	ori	r25, 0x7F	; 127
 878:	80 e8       	ldi	r24, 0x80	; 128
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	08 95       	ret

00000880 <__fp_nan>:
 880:	9f ef       	ldi	r25, 0xFF	; 255
 882:	80 ec       	ldi	r24, 0xC0	; 192
 884:	08 95       	ret

00000886 <__fp_pscA>:
 886:	00 24       	eor	r0, r0
 888:	0a 94       	dec	r0
 88a:	16 16       	cp	r1, r22
 88c:	17 06       	cpc	r1, r23
 88e:	18 06       	cpc	r1, r24
 890:	09 06       	cpc	r0, r25
 892:	08 95       	ret

00000894 <__fp_pscB>:
 894:	00 24       	eor	r0, r0
 896:	0a 94       	dec	r0
 898:	12 16       	cp	r1, r18
 89a:	13 06       	cpc	r1, r19
 89c:	14 06       	cpc	r1, r20
 89e:	05 06       	cpc	r0, r21
 8a0:	08 95       	ret

000008a2 <__fp_round>:
 8a2:	09 2e       	mov	r0, r25
 8a4:	03 94       	inc	r0
 8a6:	00 0c       	add	r0, r0
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__fp_round+0xc>
 8aa:	88 23       	and	r24, r24
 8ac:	52 f0       	brmi	.+20     	; 0x8c2 <__fp_round+0x20>
 8ae:	bb 0f       	add	r27, r27
 8b0:	40 f4       	brcc	.+16     	; 0x8c2 <__fp_round+0x20>
 8b2:	bf 2b       	or	r27, r31
 8b4:	11 f4       	brne	.+4      	; 0x8ba <__fp_round+0x18>
 8b6:	60 ff       	sbrs	r22, 0
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <__fp_round+0x20>
 8ba:	6f 5f       	subi	r22, 0xFF	; 255
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <_exit>:
 8c4:	f8 94       	cli

000008c6 <__stop_program>:
 8c6:	ff cf       	rjmp	.-2      	; 0x8c6 <__stop_program>
