
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000a14  00000aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800114  00800114  00000abc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eb5  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a63  00000000  00000000  00001b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b5e  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  000030e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008526  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000556  00000000  00000000  0000b92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e65  00000000  00000000  0000bf50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  9e:	0c 94 08 05 	jmp	0xa10	; 0xa10 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay>:
//#include <avr/io.h>
// #include <avr/interrupt.h>
// #include <avr/wdt.h>
#include "WDGDRV.h"

static void delay(uint32 time){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	28 97       	sbiw	r28, 0x08	; 8
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	6d 83       	std	Y+5, r22	; 0x05
  bc:	7e 83       	std	Y+6, r23	; 0x06
  be:	8f 83       	std	Y+7, r24	; 0x07
  c0:	98 87       	std	Y+8, r25	; 0x08
    volatile uint32 i;
    time *= 1000;
  c2:	2d 81       	ldd	r18, Y+5	; 0x05
  c4:	3e 81       	ldd	r19, Y+6	; 0x06
  c6:	4f 81       	ldd	r20, Y+7	; 0x07
  c8:	58 85       	ldd	r21, Y+8	; 0x08
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	dc 01       	movw	r26, r24
  d0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__muluhisi3>
  d4:	dc 01       	movw	r26, r24
  d6:	cb 01       	movw	r24, r22
  d8:	8d 83       	std	Y+5, r24	; 0x05
  da:	9e 83       	std	Y+6, r25	; 0x06
  dc:	af 83       	std	Y+7, r26	; 0x07
  de:	b8 87       	std	Y+8, r27	; 0x08
    for ( i = 0 ; i<time;i++){}
  e0:	19 82       	std	Y+1, r1	; 0x01
  e2:	1a 82       	std	Y+2, r1	; 0x02
  e4:	1b 82       	std	Y+3, r1	; 0x03
  e6:	1c 82       	std	Y+4, r1	; 0x04
  e8:	0b c0       	rjmp	.+22     	; 0x100 <delay+0x5a>
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	ab 81       	ldd	r26, Y+3	; 0x03
  f0:	bc 81       	ldd	r27, Y+4	; 0x04
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	a1 1d       	adc	r26, r1
  f6:	b1 1d       	adc	r27, r1
  f8:	89 83       	std	Y+1, r24	; 0x01
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	ab 83       	std	Y+3, r26	; 0x03
  fe:	bc 83       	std	Y+4, r27	; 0x04
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	ab 81       	ldd	r26, Y+3	; 0x03
 106:	bc 81       	ldd	r27, Y+4	; 0x04
 108:	2d 81       	ldd	r18, Y+5	; 0x05
 10a:	3e 81       	ldd	r19, Y+6	; 0x06
 10c:	4f 81       	ldd	r20, Y+7	; 0x07
 10e:	58 85       	ldd	r21, Y+8	; 0x08
 110:	82 17       	cp	r24, r18
 112:	93 07       	cpc	r25, r19
 114:	a4 07       	cpc	r26, r20
 116:	b5 07       	cpc	r27, r21
 118:	40 f3       	brcs	.-48     	; 0xea <delay+0x44>
}
 11a:	00 00       	nop
 11c:	28 96       	adiw	r28, 0x08	; 8
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <main>:

int main(void) {
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
    // Set PB0 as output for the LED
    DDRB |= (1 << 0);
 136:	87 e3       	ldi	r24, 0x37	; 55
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	20 81       	ld	r18, Z
 13e:	87 e3       	ldi	r24, 0x37	; 55
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	21 60       	ori	r18, 0x01	; 1
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);  // Ensure the LED is initially off
 148:	88 e3       	ldi	r24, 0x38	; 56
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	20 81       	ld	r18, Z
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	2e 7f       	andi	r18, 0xFE	; 254
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
    WDGDrv_Init();
 15a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <WDGDrv_Init>
    // LEDM_Init();
    // WDGM_Init();
    // Main loop
    while (1) {
 15e:	ff cf       	rjmp	.-2      	; 0x15e <main+0x30>

00000160 <__vector_6>:


int x = 0;


ISR(WDT_vect) {
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
    x = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 184:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    PORTB |= (1 << 0); // Set PB0 high
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	20 81       	ld	r18, Z
 190:	85 e2       	ldi	r24, 0x25	; 37
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	21 60       	ori	r18, 0x01	; 1
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
    // for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
    // _delay_ms(1000); 
    // WDTCSR = (1 << WDIE);
}
 19a:	00 00       	nop
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <WDGDrv_Init>:

void WDGDrv_Init(void) {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << 0);
 1bc:	84 e2       	ldi	r24, 0x24	; 36
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 81       	ld	r18, Z
 1c4:	84 e2       	ldi	r24, 0x24	; 36
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	21 60       	ori	r18, 0x01	; 1
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);
 1ce:	85 e2       	ldi	r24, 0x25	; 37
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 81       	ld	r18, Z
 1d6:	85 e2       	ldi	r24, 0x25	; 37
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	2e 7f       	andi	r18, 0xFE	; 254
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
    // Disable global interrupts
    cli();
 1e0:	f8 94       	cli
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	88 70       	andi	r24, 0x08	; 8
 1e8:	99 27       	eor	r25, r25
 1ea:	89 2b       	or	r24, r25
 1ec:	11 f0       	breq	.+4      	; 0x1f2 <WDGDrv_Init+0x3e>
 1ee:	88 e2       	ldi	r24, 0x28	; 40
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <WDGDrv_Init+0x40>
 1f2:	88 e0       	ldi	r24, 0x08	; 8
						_BV(WDE) | (value & 0x07)) )
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	97 70       	andi	r25, 0x07	; 7
 1f8:	89 2b       	or	r24, r25
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 1fa:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 1fc:	88 e1       	ldi	r24, 0x18	; 24
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	a8 95       	wdr
 204:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 208:	0f be       	out	0x3f, r0	; 63
 20a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    // SREG &= ~(1 << I);
    //Interrupt and System Reset Mode
    wdt_enable(2);
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 20e:	80 e6       	ldi	r24, 0x60	; 96
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	28 e1       	ldi	r18, 0x18	; 24
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
    WDTCSR =  (1 << WDE)|(1 << WDIE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 218:	80 e6       	ldi	r24, 0x60	; 96
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	2a e4       	ldi	r18, 0x4A	; 74
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
    sei(); // Enable global interrupts
 222:	78 94       	sei
    // SREG |= (1 << I);
// 
}
 224:	00 00       	nop
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
    // uint32 current_time = HAL_GetTick();

    if(WDGM_PovideSuppervisionStatus()==OK  /*&& the WDGM_MainFunction_is_not_STUCK*/){
 234:	0e 94 ad 01 	call	0x35a	; 0x35a <WDGM_PovideSuppervisionStatus>
       //refresh 
    }else{
        return;
    }
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <WDGM_Init>:
static uint32 start_time;
static uint32 current_time;
uint32 last_execution_time;

void WDGM_Init(void)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
    led_no_calls = 0;
 24c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 250:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 254:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 258:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
    //start_time = HAL_GetTick();
    start_time = 0;
 25c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <start_time>
 260:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <start_time+0x1>
 264:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <start_time+0x2>
 268:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <start_time+0x3>
    //last_execution_time = HAL_GetTick(); 

}
 26c:	00 00       	nop
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
    //uint32 current_time = HAL_GetTick(); // get current time value using hal lib in stm32f4xx_hal
    if ((current_time - start_time) <= 100) // check if it's within 100ms
 284:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <current_time>
 288:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <current_time+0x1>
 28c:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <current_time+0x2>
 290:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <current_time+0x3>
 294:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <start_time>
 298:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <start_time+0x1>
 29c:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <start_time+0x2>
 2a0:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <start_time+0x3>
 2a4:	79 01       	movw	r14, r18
 2a6:	8a 01       	movw	r16, r20
 2a8:	e8 1a       	sub	r14, r24
 2aa:	f9 0a       	sbc	r15, r25
 2ac:	0a 0b       	sbc	r16, r26
 2ae:	1b 0b       	sbc	r17, r27
 2b0:	d8 01       	movw	r26, r16
 2b2:	c7 01       	movw	r24, r14
 2b4:	85 36       	cpi	r24, 0x65	; 101
 2b6:	91 05       	cpc	r25, r1
 2b8:	a1 05       	cpc	r26, r1
 2ba:	b1 05       	cpc	r27, r1
 2bc:	b0 f5       	brcc	.+108    	; 0x32a <WDGM_MainFunction+0xb6>
    {
        if (led_no_calls >= 8 && led_no_calls <= 12) { // check no. of calls is between 8 and 12 or not
 2be:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 2c2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 2c6:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 2ca:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 2ce:	08 97       	sbiw	r24, 0x08	; 8
 2d0:	a1 05       	cpc	r26, r1
 2d2:	b1 05       	cpc	r27, r1
 2d4:	78 f0       	brcs	.+30     	; 0x2f4 <WDGM_MainFunction+0x80>
 2d6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 2da:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 2de:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 2e2:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 2e6:	0d 97       	sbiw	r24, 0x0d	; 13
 2e8:	a1 05       	cpc	r26, r1
 2ea:	b1 05       	cpc	r27, r1
 2ec:	18 f4       	brcc	.+6      	; 0x2f4 <WDGM_MainFunction+0x80>
            status = OK;
 2ee:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <status>
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <WDGM_MainFunction+0x86>
        } else {
            status = NOK;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 2fa:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 2fe:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 302:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 306:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
        start_time = current_time; // update start time for the next 100ms period
 30a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <current_time>
 30e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <current_time+0x1>
 312:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <current_time+0x2>
 316:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <current_time+0x3>
 31a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <start_time>
 31e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <start_time+0x1>
 322:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <start_time+0x2>
 326:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <start_time+0x3>
    }
    last_execution_time = current_time;
 32a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <current_time>
 32e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <current_time+0x1>
 332:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <current_time+0x2>
 336:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <current_time+0x3>
 33a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <last_execution_time>
 33e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <last_execution_time+0x1>
 342:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <last_execution_time+0x2>
 346:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <last_execution_time+0x3>
}
 34a:	00 00       	nop
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	08 95       	ret

0000035a <WDGM_PovideSuppervisionStatus>:

WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 362:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <status>
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void)
{
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 374:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 378:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 37c:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 380:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	a1 1d       	adc	r26, r1
 388:	b1 1d       	adc	r27, r1
 38a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <led_no_calls>
 38e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <led_no_calls+0x1>
 392:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <led_no_calls+0x2>
 396:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <led_no_calls+0x3>
}
 39a:	00 00       	nop
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <Rcc_Init>:

#include "Bit_Operations.h"
#include "Rcc_Private.h"
#include "Std_Types.h"

void Rcc_Init(void) {
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(RCC_CR, 0);
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	98 e3       	ldi	r25, 0x38	; 56
 3ae:	fc 01       	movw	r30, r24
 3b0:	80 81       	ld	r24, Z
 3b2:	91 81       	ldd	r25, Z+1	; 0x01
 3b4:	a2 81       	ldd	r26, Z+2	; 0x02
 3b6:	b3 81       	ldd	r27, Z+3	; 0x03
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	38 e3       	ldi	r19, 0x38	; 56
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	f9 01       	movw	r30, r18
 3c0:	80 83       	st	Z, r24
 3c2:	91 83       	std	Z+1, r25	; 0x01
 3c4:	a2 83       	std	Z+2, r26	; 0x02
 3c6:	b3 83       	std	Z+3, r27	; 0x03
//	RCC_CFGR |= (0x0A << 4); // 8MHz internal
}
 3c8:	00 00       	nop
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <Rcc_Enable>:

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <Rcc_Enable+0x6>
 3d6:	1f 92       	push	r1
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	8b 83       	std	Y+3, r24	; 0x03
  uint8 BusId = PeripheralId / 32;
 3de:	8b 81       	ldd	r24, Y+3	; 0x03
 3e0:	82 95       	swap	r24
 3e2:	86 95       	lsr	r24
 3e4:	87 70       	andi	r24, 0x07	; 7
 3e6:	89 83       	std	Y+1, r24	; 0x01
  uint8 PeripheralBitPosition = PeripheralId % 32;
 3e8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ea:	8f 71       	andi	r24, 0x1F	; 31
 3ec:	8a 83       	std	Y+2, r24	; 0x02
  switch (BusId) {
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	88 2f       	mov	r24, r24
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	91 05       	cpc	r25, r1
 3f8:	79 f1       	breq	.+94     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	91 05       	cpc	r25, r1
 3fe:	1c f4       	brge	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 400:	89 2b       	or	r24, r25
 402:	49 f0       	breq	.+18     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
      break;
    default:
      break;
 404:	8c c0       	rjmp	.+280    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
}

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
  uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	91 05       	cpc	r25, r1
 40a:	09 f4       	brne	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40c:	46 c0       	rjmp	.+140    	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 40e:	03 97       	sbiw	r24, 0x03	; 3
 410:	09 f4       	brne	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	64 c0       	rjmp	.+200    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
      break;
    default:
      break;
 414:	84 c0       	rjmp	.+264    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
  uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
    case RCC_AHB1:
      SET_BIT(RCC_AHB1ENR, PeripheralBitPosition);
 416:	80 e3       	ldi	r24, 0x30	; 48
 418:	98 e3       	ldi	r25, 0x38	; 56
 41a:	fc 01       	movw	r30, r24
 41c:	20 81       	ld	r18, Z
 41e:	31 81       	ldd	r19, Z+1	; 0x01
 420:	42 81       	ldd	r20, Z+2	; 0x02
 422:	53 81       	ldd	r21, Z+3	; 0x03
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	68 2f       	mov	r22, r24
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	09 2e       	mov	r0, r25
 43a:	00 0c       	add	r0, r0
 43c:	aa 0b       	sbc	r26, r26
 43e:	bb 0b       	sbc	r27, r27
 440:	60 e3       	ldi	r22, 0x30	; 48
 442:	78 e3       	ldi	r23, 0x38	; 56
 444:	82 2b       	or	r24, r18
 446:	93 2b       	or	r25, r19
 448:	a4 2b       	or	r26, r20
 44a:	b5 2b       	or	r27, r21
 44c:	fb 01       	movw	r30, r22
 44e:	80 83       	st	Z, r24
 450:	91 83       	std	Z+1, r25	; 0x01
 452:	a2 83       	std	Z+2, r26	; 0x02
 454:	b3 83       	std	Z+3, r27	; 0x03
      break;
 456:	63 c0       	rjmp	.+198    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2ENR, PeripheralBitPosition);
 458:	84 e3       	ldi	r24, 0x34	; 52
 45a:	98 e3       	ldi	r25, 0x38	; 56
 45c:	fc 01       	movw	r30, r24
 45e:	20 81       	ld	r18, Z
 460:	31 81       	ldd	r19, Z+1	; 0x01
 462:	42 81       	ldd	r20, Z+2	; 0x02
 464:	53 81       	ldd	r21, Z+3	; 0x03
 466:	8a 81       	ldd	r24, Y+2	; 0x02
 468:	68 2f       	mov	r22, r24
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 47a:	09 2e       	mov	r0, r25
 47c:	00 0c       	add	r0, r0
 47e:	aa 0b       	sbc	r26, r26
 480:	bb 0b       	sbc	r27, r27
 482:	64 e3       	ldi	r22, 0x34	; 52
 484:	78 e3       	ldi	r23, 0x38	; 56
 486:	82 2b       	or	r24, r18
 488:	93 2b       	or	r25, r19
 48a:	a4 2b       	or	r26, r20
 48c:	b5 2b       	or	r27, r21
 48e:	fb 01       	movw	r30, r22
 490:	80 83       	st	Z, r24
 492:	91 83       	std	Z+1, r25	; 0x01
 494:	a2 83       	std	Z+2, r26	; 0x02
 496:	b3 83       	std	Z+3, r27	; 0x03
      break;
 498:	42 c0       	rjmp	.+132    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
    case RCC_APB1:
      SET_BIT(RCC_APB1ENR, PeripheralBitPosition);
 49a:	80 e4       	ldi	r24, 0x40	; 64
 49c:	98 e3       	ldi	r25, 0x38	; 56
 49e:	fc 01       	movw	r30, r24
 4a0:	20 81       	ld	r18, Z
 4a2:	31 81       	ldd	r19, Z+1	; 0x01
 4a4:	42 81       	ldd	r20, Z+2	; 0x02
 4a6:	53 81       	ldd	r21, Z+3	; 0x03
 4a8:	8a 81       	ldd	r24, Y+2	; 0x02
 4aa:	68 2f       	mov	r22, r24
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	09 2e       	mov	r0, r25
 4be:	00 0c       	add	r0, r0
 4c0:	aa 0b       	sbc	r26, r26
 4c2:	bb 0b       	sbc	r27, r27
 4c4:	60 e4       	ldi	r22, 0x40	; 64
 4c6:	78 e3       	ldi	r23, 0x38	; 56
 4c8:	82 2b       	or	r24, r18
 4ca:	93 2b       	or	r25, r19
 4cc:	a4 2b       	or	r26, r20
 4ce:	b5 2b       	or	r27, r21
 4d0:	fb 01       	movw	r30, r22
 4d2:	80 83       	st	Z, r24
 4d4:	91 83       	std	Z+1, r25	; 0x01
 4d6:	a2 83       	std	Z+2, r26	; 0x02
 4d8:	b3 83       	std	Z+3, r27	; 0x03
      break;
 4da:	21 c0       	rjmp	.+66     	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
 4dc:	84 e4       	ldi	r24, 0x44	; 68
 4de:	98 e3       	ldi	r25, 0x38	; 56
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 81       	ld	r18, Z
 4e4:	31 81       	ldd	r19, Z+1	; 0x01
 4e6:	42 81       	ldd	r20, Z+2	; 0x02
 4e8:	53 81       	ldd	r21, Z+3	; 0x03
 4ea:	8a 81       	ldd	r24, Y+2	; 0x02
 4ec:	68 2f       	mov	r22, r24
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4fe:	09 2e       	mov	r0, r25
 500:	00 0c       	add	r0, r0
 502:	aa 0b       	sbc	r26, r26
 504:	bb 0b       	sbc	r27, r27
 506:	64 e4       	ldi	r22, 0x44	; 68
 508:	78 e3       	ldi	r23, 0x38	; 56
 50a:	82 2b       	or	r24, r18
 50c:	93 2b       	or	r25, r19
 50e:	a4 2b       	or	r26, r20
 510:	b5 2b       	or	r27, r21
 512:	fb 01       	movw	r30, r22
 514:	80 83       	st	Z, r24
 516:	91 83       	std	Z+1, r25	; 0x01
 518:	a2 83       	std	Z+2, r26	; 0x02
 51a:	b3 83       	std	Z+3, r27	; 0x03
      break;
 51c:	00 00       	nop
    default:
      break;
  }
}
 51e:	00 00       	nop
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <Rcc_Disable>:

void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	00 d0       	rcall	.+0      	; 0x532 <Rcc_Disable+0x6>
 532:	1f 92       	push	r1
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	8b 83       	std	Y+3, r24	; 0x03
     uint8 BusId = PeripheralId / 32;
 53a:	8b 81       	ldd	r24, Y+3	; 0x03
 53c:	82 95       	swap	r24
 53e:	86 95       	lsr	r24
 540:	87 70       	andi	r24, 0x07	; 7
 542:	89 83       	std	Y+1, r24	; 0x01
  uint8 PeripheralBitPosition = PeripheralId % 32;
 544:	8b 81       	ldd	r24, Y+3	; 0x03
 546:	8f 71       	andi	r24, 0x1F	; 31
 548:	8a 83       	std	Y+2, r24	; 0x02
  switch (BusId) {
 54a:	89 81       	ldd	r24, Y+1	; 0x01
 54c:	88 2f       	mov	r24, r24
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	91 05       	cpc	r25, r1
 554:	79 f1       	breq	.+94     	; 0x5b4 <Rcc_Disable+0x88>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	91 05       	cpc	r25, r1
 55a:	1c f4       	brge	.+6      	; 0x562 <Rcc_Disable+0x36>
 55c:	89 2b       	or	r24, r25
 55e:	49 f0       	breq	.+18     	; 0x572 <Rcc_Disable+0x46>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
      break;
    default:
      break;
 560:	8c c0       	rjmp	.+280    	; 0x67a <Rcc_Disable+0x14e>
}

void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
     uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
 562:	82 30       	cpi	r24, 0x02	; 2
 564:	91 05       	cpc	r25, r1
 566:	09 f4       	brne	.+2      	; 0x56a <Rcc_Disable+0x3e>
 568:	46 c0       	rjmp	.+140    	; 0x5f6 <Rcc_Disable+0xca>
 56a:	03 97       	sbiw	r24, 0x03	; 3
 56c:	09 f4       	brne	.+2      	; 0x570 <Rcc_Disable+0x44>
 56e:	64 c0       	rjmp	.+200    	; 0x638 <Rcc_Disable+0x10c>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
      break;
    default:
      break;
 570:	84 c0       	rjmp	.+264    	; 0x67a <Rcc_Disable+0x14e>
void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
     uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
    case RCC_AHB1:
      SET_BIT(RCC_AHB1RSTR, PeripheralBitPosition);
 572:	80 e1       	ldi	r24, 0x10	; 16
 574:	98 e3       	ldi	r25, 0x38	; 56
 576:	fc 01       	movw	r30, r24
 578:	20 81       	ld	r18, Z
 57a:	31 81       	ldd	r19, Z+1	; 0x01
 57c:	42 81       	ldd	r20, Z+2	; 0x02
 57e:	53 81       	ldd	r21, Z+3	; 0x03
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	68 2f       	mov	r22, r24
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <Rcc_Disable+0x64>
 58c:	88 0f       	add	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <Rcc_Disable+0x60>
 594:	09 2e       	mov	r0, r25
 596:	00 0c       	add	r0, r0
 598:	aa 0b       	sbc	r26, r26
 59a:	bb 0b       	sbc	r27, r27
 59c:	60 e1       	ldi	r22, 0x10	; 16
 59e:	78 e3       	ldi	r23, 0x38	; 56
 5a0:	82 2b       	or	r24, r18
 5a2:	93 2b       	or	r25, r19
 5a4:	a4 2b       	or	r26, r20
 5a6:	b5 2b       	or	r27, r21
 5a8:	fb 01       	movw	r30, r22
 5aa:	80 83       	st	Z, r24
 5ac:	91 83       	std	Z+1, r25	; 0x01
 5ae:	a2 83       	std	Z+2, r26	; 0x02
 5b0:	b3 83       	std	Z+3, r27	; 0x03
      break;
 5b2:	63 c0       	rjmp	.+198    	; 0x67a <Rcc_Disable+0x14e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2RSTR, PeripheralBitPosition);
 5b4:	84 e1       	ldi	r24, 0x14	; 20
 5b6:	98 e3       	ldi	r25, 0x38	; 56
 5b8:	fc 01       	movw	r30, r24
 5ba:	20 81       	ld	r18, Z
 5bc:	31 81       	ldd	r19, Z+1	; 0x01
 5be:	42 81       	ldd	r20, Z+2	; 0x02
 5c0:	53 81       	ldd	r21, Z+3	; 0x03
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	68 2f       	mov	r22, r24
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <Rcc_Disable+0xa6>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <Rcc_Disable+0xa2>
 5d6:	09 2e       	mov	r0, r25
 5d8:	00 0c       	add	r0, r0
 5da:	aa 0b       	sbc	r26, r26
 5dc:	bb 0b       	sbc	r27, r27
 5de:	64 e1       	ldi	r22, 0x14	; 20
 5e0:	78 e3       	ldi	r23, 0x38	; 56
 5e2:	82 2b       	or	r24, r18
 5e4:	93 2b       	or	r25, r19
 5e6:	a4 2b       	or	r26, r20
 5e8:	b5 2b       	or	r27, r21
 5ea:	fb 01       	movw	r30, r22
 5ec:	80 83       	st	Z, r24
 5ee:	91 83       	std	Z+1, r25	; 0x01
 5f0:	a2 83       	std	Z+2, r26	; 0x02
 5f2:	b3 83       	std	Z+3, r27	; 0x03
      break;
 5f4:	42 c0       	rjmp	.+132    	; 0x67a <Rcc_Disable+0x14e>
    case RCC_APB1:
      SET_BIT(RCC_APB1RSTR, PeripheralBitPosition);
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	98 e3       	ldi	r25, 0x38	; 56
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 81       	ld	r18, Z
 5fe:	31 81       	ldd	r19, Z+1	; 0x01
 600:	42 81       	ldd	r20, Z+2	; 0x02
 602:	53 81       	ldd	r21, Z+3	; 0x03
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	68 2f       	mov	r22, r24
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <Rcc_Disable+0xe8>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	6a 95       	dec	r22
 616:	e2 f7       	brpl	.-8      	; 0x610 <Rcc_Disable+0xe4>
 618:	09 2e       	mov	r0, r25
 61a:	00 0c       	add	r0, r0
 61c:	aa 0b       	sbc	r26, r26
 61e:	bb 0b       	sbc	r27, r27
 620:	60 e2       	ldi	r22, 0x20	; 32
 622:	78 e3       	ldi	r23, 0x38	; 56
 624:	82 2b       	or	r24, r18
 626:	93 2b       	or	r25, r19
 628:	a4 2b       	or	r26, r20
 62a:	b5 2b       	or	r27, r21
 62c:	fb 01       	movw	r30, r22
 62e:	80 83       	st	Z, r24
 630:	91 83       	std	Z+1, r25	; 0x01
 632:	a2 83       	std	Z+2, r26	; 0x02
 634:	b3 83       	std	Z+3, r27	; 0x03
      break;
 636:	21 c0       	rjmp	.+66     	; 0x67a <Rcc_Disable+0x14e>
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
 638:	84 e2       	ldi	r24, 0x24	; 36
 63a:	98 e3       	ldi	r25, 0x38	; 56
 63c:	fc 01       	movw	r30, r24
 63e:	20 81       	ld	r18, Z
 640:	31 81       	ldd	r19, Z+1	; 0x01
 642:	42 81       	ldd	r20, Z+2	; 0x02
 644:	53 81       	ldd	r21, Z+3	; 0x03
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	68 2f       	mov	r22, r24
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <Rcc_Disable+0x12a>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <Rcc_Disable+0x126>
 65a:	09 2e       	mov	r0, r25
 65c:	00 0c       	add	r0, r0
 65e:	aa 0b       	sbc	r26, r26
 660:	bb 0b       	sbc	r27, r27
 662:	64 e2       	ldi	r22, 0x24	; 36
 664:	78 e3       	ldi	r23, 0x38	; 56
 666:	82 2b       	or	r24, r18
 668:	93 2b       	or	r25, r19
 66a:	a4 2b       	or	r26, r20
 66c:	b5 2b       	or	r27, r21
 66e:	fb 01       	movw	r30, r22
 670:	80 83       	st	Z, r24
 672:	91 83       	std	Z+1, r25	; 0x01
 674:	a2 83       	std	Z+2, r26	; 0x02
 676:	b3 83       	std	Z+3, r27	; 0x03
      break;
 678:	00 00       	nop
    default:
      break;
  }
}
 67a:	00 00       	nop
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	08 95       	ret

00000688 <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	00 d0       	rcall	.+0      	; 0x68e <Nvic_EnableInterrupt+0x6>
 68e:	1f 92       	push	r1
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
 694:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	80 36       	cpi	r24, 0x60	; 96
 69a:	c0 f5       	brcc	.+112    	; 0x70c <Nvic_EnableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 69c:	8b 81       	ldd	r24, Y+3	; 0x03
 69e:	82 95       	swap	r24
 6a0:	86 95       	lsr	r24
 6a2:	87 70       	andi	r24, 0x07	; 7
 6a4:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 6a6:	8b 81       	ldd	r24, Y+3	; 0x03
 6a8:	8f 71       	andi	r24, 0x1F	; 31
 6aa:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 6ac:	89 81       	ldd	r24, Y+1	; 0x01
 6ae:	88 2f       	mov	r24, r24
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	80 50       	subi	r24, 0x00	; 0
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	fc 01       	movw	r30, r24
 6bc:	80 81       	ld	r24, Z
 6be:	91 81       	ldd	r25, Z+1	; 0x01
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 81       	ld	r18, Z
 6c4:	31 81       	ldd	r19, Z+1	; 0x01
 6c6:	42 81       	ldd	r20, Z+2	; 0x02
 6c8:	53 81       	ldd	r21, Z+3	; 0x03
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	68 2f       	mov	r22, r24
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <Nvic_EnableInterrupt+0x52>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	6a 95       	dec	r22
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <Nvic_EnableInterrupt+0x4e>
 6de:	09 2e       	mov	r0, r25
 6e0:	00 0c       	add	r0, r0
 6e2:	aa 0b       	sbc	r26, r26
 6e4:	bb 0b       	sbc	r27, r27
 6e6:	69 81       	ldd	r22, Y+1	; 0x01
 6e8:	66 2f       	mov	r22, r22
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	66 0f       	add	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	60 50       	subi	r22, 0x00	; 0
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	fb 01       	movw	r30, r22
 6f6:	60 81       	ld	r22, Z
 6f8:	71 81       	ldd	r23, Z+1	; 0x01
 6fa:	82 2b       	or	r24, r18
 6fc:	93 2b       	or	r25, r19
 6fe:	a4 2b       	or	r26, r20
 700:	b5 2b       	or	r27, r21
 702:	fb 01       	movw	r30, r22
 704:	80 83       	st	Z, r24
 706:	91 83       	std	Z+1, r25	; 0x01
 708:	a2 83       	std	Z+2, r26	; 0x02
 70a:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 70c:	00 00       	nop
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	08 95       	ret

0000071a <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	00 d0       	rcall	.+0      	; 0x720 <Nvic_DisableInterrupt+0x6>
 720:	1f 92       	push	r1
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 728:	8b 81       	ldd	r24, Y+3	; 0x03
 72a:	80 36       	cpi	r24, 0x60	; 96
 72c:	c0 f5       	brcc	.+112    	; 0x79e <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 72e:	8b 81       	ldd	r24, Y+3	; 0x03
 730:	82 95       	swap	r24
 732:	86 95       	lsr	r24
 734:	87 70       	andi	r24, 0x07	; 7
 736:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	8f 71       	andi	r24, 0x1F	; 31
 73c:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	88 2f       	mov	r24, r24
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	8a 5f       	subi	r24, 0xFA	; 250
 74a:	9e 4f       	sbci	r25, 0xFE	; 254
 74c:	fc 01       	movw	r30, r24
 74e:	80 81       	ld	r24, Z
 750:	91 81       	ldd	r25, Z+1	; 0x01
 752:	fc 01       	movw	r30, r24
 754:	20 81       	ld	r18, Z
 756:	31 81       	ldd	r19, Z+1	; 0x01
 758:	42 81       	ldd	r20, Z+2	; 0x02
 75a:	53 81       	ldd	r21, Z+3	; 0x03
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	68 2f       	mov	r22, r24
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <Nvic_DisableInterrupt+0x52>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <Nvic_DisableInterrupt+0x4e>
 770:	09 2e       	mov	r0, r25
 772:	00 0c       	add	r0, r0
 774:	aa 0b       	sbc	r26, r26
 776:	bb 0b       	sbc	r27, r27
 778:	69 81       	ldd	r22, Y+1	; 0x01
 77a:	66 2f       	mov	r22, r22
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	66 0f       	add	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	6a 5f       	subi	r22, 0xFA	; 250
 784:	7e 4f       	sbci	r23, 0xFE	; 254
 786:	fb 01       	movw	r30, r22
 788:	60 81       	ld	r22, Z
 78a:	71 81       	ldd	r23, Z+1	; 0x01
 78c:	82 2b       	or	r24, r18
 78e:	93 2b       	or	r25, r19
 790:	a4 2b       	or	r26, r20
 792:	b5 2b       	or	r27, r21
 794:	fb 01       	movw	r30, r22
 796:	80 83       	st	Z, r24
 798:	91 83       	std	Z+1, r25	; 0x01
 79a:	a2 83       	std	Z+2, r26	; 0x02
 79c:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 79e:	00 00       	nop
 7a0:	0f 90       	pop	r0
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	08 95       	ret

000007ac <delay>:
#include "WDGM.h"
#include "WDGDrv.h"

static uint8 led_state;

static void delay(uint32 time){
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	28 97       	sbiw	r28, 0x08	; 8
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	f8 94       	cli
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	cd bf       	out	0x3d, r28	; 61
 7c0:	6d 83       	std	Y+5, r22	; 0x05
 7c2:	7e 83       	std	Y+6, r23	; 0x06
 7c4:	8f 83       	std	Y+7, r24	; 0x07
 7c6:	98 87       	std	Y+8, r25	; 0x08
    volatile uint32 i;
    time *= 1000;
 7c8:	2d 81       	ldd	r18, Y+5	; 0x05
 7ca:	3e 81       	ldd	r19, Y+6	; 0x06
 7cc:	4f 81       	ldd	r20, Y+7	; 0x07
 7ce:	58 85       	ldd	r21, Y+8	; 0x08
 7d0:	88 ee       	ldi	r24, 0xE8	; 232
 7d2:	93 e0       	ldi	r25, 0x03	; 3
 7d4:	dc 01       	movw	r26, r24
 7d6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__muluhisi3>
 7da:	dc 01       	movw	r26, r24
 7dc:	cb 01       	movw	r24, r22
 7de:	8d 83       	std	Y+5, r24	; 0x05
 7e0:	9e 83       	std	Y+6, r25	; 0x06
 7e2:	af 83       	std	Y+7, r26	; 0x07
 7e4:	b8 87       	std	Y+8, r27	; 0x08
    //  watchdog_refresh();
    for ( i = 0 ; i<time;i++){
 7e6:	19 82       	std	Y+1, r1	; 0x01
 7e8:	1a 82       	std	Y+2, r1	; 0x02
 7ea:	1b 82       	std	Y+3, r1	; 0x03
 7ec:	1c 82       	std	Y+4, r1	; 0x04
 7ee:	0b c0       	rjmp	.+22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f0:	89 81       	ldd	r24, Y+1	; 0x01
 7f2:	9a 81       	ldd	r25, Y+2	; 0x02
 7f4:	ab 81       	ldd	r26, Y+3	; 0x03
 7f6:	bc 81       	ldd	r27, Y+4	; 0x04
 7f8:	01 96       	adiw	r24, 0x01	; 1
 7fa:	a1 1d       	adc	r26, r1
 7fc:	b1 1d       	adc	r27, r1
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	9a 83       	std	Y+2, r25	; 0x02
 802:	ab 83       	std	Y+3, r26	; 0x03
 804:	bc 83       	std	Y+4, r27	; 0x04
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	9a 81       	ldd	r25, Y+2	; 0x02
 80a:	ab 81       	ldd	r26, Y+3	; 0x03
 80c:	bc 81       	ldd	r27, Y+4	; 0x04
 80e:	2d 81       	ldd	r18, Y+5	; 0x05
 810:	3e 81       	ldd	r19, Y+6	; 0x06
 812:	4f 81       	ldd	r20, Y+7	; 0x07
 814:	58 85       	ldd	r21, Y+8	; 0x08
 816:	82 17       	cp	r24, r18
 818:	93 07       	cpc	r25, r19
 81a:	a4 07       	cpc	r26, r20
 81c:	b5 07       	cpc	r27, r21
 81e:	40 f3       	brcs	.-48     	; 0x7f0 <delay+0x44>
    // WDG->CR |= 0xFF; //0111 1111
    //  watchdog_refresh();
    }
}
 820:	00 00       	nop
 822:	28 96       	adiw	r28, 0x08	; 8
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	f8 94       	cli
 828:	de bf       	out	0x3e, r29	; 62
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	cd bf       	out	0x3d, r28	; 61
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <LEDM_Init>:


void LEDM_Init(void)
{
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	cd b7       	in	r28, 0x3d	; 61
 83a:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 83c:	0e 94 41 04 	call	0x882	; 0x882 <GPIO_Init>
    led_state = 0;
 840:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <led_state>
}
 844:	00 00       	nop
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	08 95       	ret

0000084c <LEDM_Manage>:

void LEDM_Manage(void)
{
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	cd b7       	in	r28, 0x3d	; 61
 852:	de b7       	in	r29, 0x3e	; 62

    // HAL_Delay(500);
	delay(500);
 854:	64 ef       	ldi	r22, 0xF4	; 244
 856:	71 e0       	ldi	r23, 0x01	; 1
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <delay>
    led_state = ~led_state;
 860:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_state>
 864:	80 95       	com	r24
 866:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <led_state>
    GPIO_Write(LED_PIN_ID, led_state);
 86a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_state>
 86e:	68 2f       	mov	r22, r24
 870:	83 e0       	ldi	r24, 0x03	; 3
 872:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_Write>
    WDGM_AlivenessIndication(); // to count the number of function calls
 876:	0e 94 b6 01 	call	0x36c	; 0x36c <WDGM_AlivenessIndication>
}
 87a:	00 00       	nop
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <GPIO_Init>:
#include "Rcc.h"

uint32 GPIO_Addresses[2] = { 0x40020000, 0x40020400}; // for port A and B only

void GPIO_Init(void)
{
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	00 d0       	rcall	.+0      	; 0x888 <GPIO_Init+0x6>
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
    GpioType * gpioReg =  GPIO_Addresses[LED_PORT_ID];
 88c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <GPIO_Addresses+0x4>
 890:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <GPIO_Addresses+0x5>
 894:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <GPIO_Addresses+0x6>
 898:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <GPIO_Addresses+0x7>
 89c:	9a 83       	std	Y+2, r25	; 0x02
 89e:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->GPIO_MODER &= ~(0x3 << (2 * LED_PIN_ID));
 8a0:	89 81       	ldd	r24, Y+1	; 0x01
 8a2:	9a 81       	ldd	r25, Y+2	; 0x02
 8a4:	fc 01       	movw	r30, r24
 8a6:	80 81       	ld	r24, Z
 8a8:	91 81       	ldd	r25, Z+1	; 0x01
 8aa:	a2 81       	ldd	r26, Z+2	; 0x02
 8ac:	b3 81       	ldd	r27, Z+3	; 0x03
 8ae:	8f 73       	andi	r24, 0x3F	; 63
 8b0:	29 81       	ldd	r18, Y+1	; 0x01
 8b2:	3a 81       	ldd	r19, Y+2	; 0x02
 8b4:	f9 01       	movw	r30, r18
 8b6:	80 83       	st	Z, r24
 8b8:	91 83       	std	Z+1, r25	; 0x01
 8ba:	a2 83       	std	Z+2, r26	; 0x02
 8bc:	b3 83       	std	Z+3, r27	; 0x03
	gpioReg->GPIO_MODER |= (0x01 << (2 * LED_PIN_ID));
 8be:	89 81       	ldd	r24, Y+1	; 0x01
 8c0:	9a 81       	ldd	r25, Y+2	; 0x02
 8c2:	fc 01       	movw	r30, r24
 8c4:	80 81       	ld	r24, Z
 8c6:	91 81       	ldd	r25, Z+1	; 0x01
 8c8:	a2 81       	ldd	r26, Z+2	; 0x02
 8ca:	b3 81       	ldd	r27, Z+3	; 0x03
 8cc:	80 64       	ori	r24, 0x40	; 64
 8ce:	29 81       	ldd	r18, Y+1	; 0x01
 8d0:	3a 81       	ldd	r19, Y+2	; 0x02
 8d2:	f9 01       	movw	r30, r18
 8d4:	80 83       	st	Z, r24
 8d6:	91 83       	std	Z+1, r25	; 0x01
 8d8:	a2 83       	std	Z+2, r26	; 0x02
 8da:	b3 83       	std	Z+3, r27	; 0x03
	gpioReg->GPIO_OTYPER  &= ~(0x01 << LED_PIN_ID);
 8dc:	89 81       	ldd	r24, Y+1	; 0x01
 8de:	9a 81       	ldd	r25, Y+2	; 0x02
 8e0:	fc 01       	movw	r30, r24
 8e2:	84 81       	ldd	r24, Z+4	; 0x04
 8e4:	95 81       	ldd	r25, Z+5	; 0x05
 8e6:	a6 81       	ldd	r26, Z+6	; 0x06
 8e8:	b7 81       	ldd	r27, Z+7	; 0x07
 8ea:	87 7f       	andi	r24, 0xF7	; 247
 8ec:	29 81       	ldd	r18, Y+1	; 0x01
 8ee:	3a 81       	ldd	r19, Y+2	; 0x02
 8f0:	f9 01       	movw	r30, r18
 8f2:	84 83       	std	Z+4, r24	; 0x04
 8f4:	95 83       	std	Z+5, r25	; 0x05
 8f6:	a6 83       	std	Z+6, r26	; 0x06
 8f8:	b7 83       	std	Z+7, r27	; 0x07
	gpioReg->GPIO_OTYPER |= (0x00 << LED_PIN_ID);
 8fa:	89 81       	ldd	r24, Y+1	; 0x01
 8fc:	9a 81       	ldd	r25, Y+2	; 0x02
 8fe:	fc 01       	movw	r30, r24
 900:	84 81       	ldd	r24, Z+4	; 0x04
 902:	95 81       	ldd	r25, Z+5	; 0x05
 904:	a6 81       	ldd	r26, Z+6	; 0x06
 906:	b7 81       	ldd	r27, Z+7	; 0x07
 908:	29 81       	ldd	r18, Y+1	; 0x01
 90a:	3a 81       	ldd	r19, Y+2	; 0x02
 90c:	f9 01       	movw	r30, r18
 90e:	84 83       	std	Z+4, r24	; 0x04
 910:	95 83       	std	Z+5, r25	; 0x05
 912:	a6 83       	std	Z+6, r26	; 0x06
 914:	b7 83       	std	Z+7, r27	; 0x07
	// gpioReg->GPIO_PUPDR &= ~(0x3 << (2 * LED_PIN_ID));
}
 916:	00 00       	nop
 918:	0f 90       	pop	r0
 91a:	0f 90       	pop	r0
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	00 d0       	rcall	.+0      	; 0x928 <GPIO_Write+0x6>
 928:	00 d0       	rcall	.+0      	; 0x92a <GPIO_Write+0x8>
 92a:	cd b7       	in	r28, 0x3d	; 61
 92c:	de b7       	in	r29, 0x3e	; 62
 92e:	8b 83       	std	Y+3, r24	; 0x03
 930:	6c 83       	std	Y+4, r22	; 0x04
	GpioType * gpioReg =  GPIO_Addresses[LED_PORT_ID];
 932:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <GPIO_Addresses+0x4>
 936:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <GPIO_Addresses+0x5>
 93a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <GPIO_Addresses+0x6>
 93e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <GPIO_Addresses+0x7>
 942:	9a 83       	std	Y+2, r25	; 0x02
 944:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->GPIO_ODR &= ~(0x01 << PinId);
 946:	89 81       	ldd	r24, Y+1	; 0x01
 948:	9a 81       	ldd	r25, Y+2	; 0x02
 94a:	fc 01       	movw	r30, r24
 94c:	24 89       	ldd	r18, Z+20	; 0x14
 94e:	35 89       	ldd	r19, Z+21	; 0x15
 950:	46 89       	ldd	r20, Z+22	; 0x16
 952:	57 89       	ldd	r21, Z+23	; 0x17
 954:	8b 81       	ldd	r24, Y+3	; 0x03
 956:	68 2f       	mov	r22, r24
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <GPIO_Write+0x42>
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	6a 95       	dec	r22
 966:	e2 f7       	brpl	.-8      	; 0x960 <GPIO_Write+0x3e>
 968:	80 95       	com	r24
 96a:	90 95       	com	r25
 96c:	09 2e       	mov	r0, r25
 96e:	00 0c       	add	r0, r0
 970:	aa 0b       	sbc	r26, r26
 972:	bb 0b       	sbc	r27, r27
 974:	82 23       	and	r24, r18
 976:	93 23       	and	r25, r19
 978:	a4 23       	and	r26, r20
 97a:	b5 23       	and	r27, r21
 97c:	29 81       	ldd	r18, Y+1	; 0x01
 97e:	3a 81       	ldd	r19, Y+2	; 0x02
 980:	f9 01       	movw	r30, r18
 982:	84 8b       	std	Z+20, r24	; 0x14
 984:	95 8b       	std	Z+21, r25	; 0x15
 986:	a6 8b       	std	Z+22, r26	; 0x16
 988:	b7 8b       	std	Z+23, r27	; 0x17
	gpioReg->GPIO_ODR |= (PinData << PinId);
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	9a 81       	ldd	r25, Y+2	; 0x02
 98e:	fc 01       	movw	r30, r24
 990:	24 89       	ldd	r18, Z+20	; 0x14
 992:	35 89       	ldd	r19, Z+21	; 0x15
 994:	46 89       	ldd	r20, Z+22	; 0x16
 996:	57 89       	ldd	r21, Z+23	; 0x17
 998:	8c 81       	ldd	r24, Y+4	; 0x04
 99a:	88 2f       	mov	r24, r24
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	6b 81       	ldd	r22, Y+3	; 0x03
 9a0:	66 2f       	mov	r22, r22
 9a2:	70 e0       	ldi	r23, 0x00	; 0
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <GPIO_Write+0x88>
 9a6:	88 0f       	add	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	6a 95       	dec	r22
 9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <GPIO_Write+0x84>
 9ae:	09 2e       	mov	r0, r25
 9b0:	00 0c       	add	r0, r0
 9b2:	aa 0b       	sbc	r26, r26
 9b4:	bb 0b       	sbc	r27, r27
 9b6:	82 2b       	or	r24, r18
 9b8:	93 2b       	or	r25, r19
 9ba:	a4 2b       	or	r26, r20
 9bc:	b5 2b       	or	r27, r21
 9be:	29 81       	ldd	r18, Y+1	; 0x01
 9c0:	3a 81       	ldd	r19, Y+2	; 0x02
 9c2:	f9 01       	movw	r30, r18
 9c4:	84 8b       	std	Z+20, r24	; 0x14
 9c6:	95 8b       	std	Z+21, r25	; 0x15
 9c8:	a6 8b       	std	Z+22, r26	; 0x16
 9ca:	b7 8b       	std	Z+23, r27	; 0x17
}
 9cc:	00 00       	nop
 9ce:	0f 90       	pop	r0
 9d0:	0f 90       	pop	r0
 9d2:	0f 90       	pop	r0
 9d4:	0f 90       	pop	r0
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	08 95       	ret

000009dc <__muluhisi3>:
 9dc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__umulhisi3>
 9e0:	a5 9f       	mul	r26, r21
 9e2:	90 0d       	add	r25, r0
 9e4:	b4 9f       	mul	r27, r20
 9e6:	90 0d       	add	r25, r0
 9e8:	a4 9f       	mul	r26, r20
 9ea:	80 0d       	add	r24, r0
 9ec:	91 1d       	adc	r25, r1
 9ee:	11 24       	eor	r1, r1
 9f0:	08 95       	ret

000009f2 <__umulhisi3>:
 9f2:	a2 9f       	mul	r26, r18
 9f4:	b0 01       	movw	r22, r0
 9f6:	b3 9f       	mul	r27, r19
 9f8:	c0 01       	movw	r24, r0
 9fa:	a3 9f       	mul	r26, r19
 9fc:	70 0d       	add	r23, r0
 9fe:	81 1d       	adc	r24, r1
 a00:	11 24       	eor	r1, r1
 a02:	91 1d       	adc	r25, r1
 a04:	b2 9f       	mul	r27, r18
 a06:	70 0d       	add	r23, r0
 a08:	81 1d       	adc	r24, r1
 a0a:	11 24       	eor	r1, r1
 a0c:	91 1d       	adc	r25, r1
 a0e:	08 95       	ret

00000a10 <_exit>:
 a10:	f8 94       	cli

00000a12 <__stop_program>:
 a12:	ff cf       	rjmp	.-2      	; 0xa12 <__stop_program>
