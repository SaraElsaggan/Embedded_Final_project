
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000470  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800112  00800112  00000516  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5e  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1c  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e06  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007e49  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  0000af09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b12f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000030f0  00000000  00000000  0000b1d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  9e:	0c 94 36 02 	jmp	0x46c	; 0x46c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SysInit>:

uint32 call_count_100_ms = 0;
uint32 call_count_50_ms = 0;

int SysInit(void) {
    DDRB |= (1 << 0);  //reset
  a6:	20 9a       	sbi	0x04, 0	; 4
    DDRB |= (1 << 2);  // ledmange
  a8:	22 9a       	sbi	0x04, 2	; 4
    DDRB |= (1 << 3);  //WDG_main
  aa:	23 9a       	sbi	0x04, 3	; 4
    DDRB |= (1 << 4);  //refresh
  ac:	24 9a       	sbi	0x04, 4	; 4
    DDRB |= (1 << 5);  // timer
  ae:	25 9a       	sbi	0x04, 5	; 4
    DDRB |= (1 << 6);  // evey100ms
  b0:	26 9a       	sbi	0x04, 6	; 4
    DDRB |= (1 << 7);  // evey100ms
  b2:	27 9a       	sbi	0x04, 7	; 4
    PORTB &= ~(1 << 0);
  b4:	28 98       	cbi	0x05, 0	; 5
    GPIO_Init();
  b6:	0e 94 22 02 	call	0x444	; 0x444 <GPIO_Init>
    LEDM_Init();
  ba:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LEDM_Init>
    WDGM_Init();
  be:	0e 94 2c 01 	call	0x258	; 0x258 <WDGM_Init>
    WDGDrv_Init();
  c2:	0e 94 a1 00 	call	0x142	; 0x142 <WDGDrv_Init>
    
}
  c6:	08 95       	ret

000000c8 <main>:

static uint8 isFirstIteration = 1;
int main(void) {    
    SysInit();
  c8:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
    PORTB |= (1 <<0);
  cc:	28 9a       	sbi	0x05, 0	; 5
    static uint8 WDGCounter = 0;
    // Main loop
    while (1) {
        LEDM_Manage();          
  ce:	0e 94 ed 01 	call	0x3da	; 0x3da <LEDM_Manage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	83 ec       	ldi	r24, 0xC3	; 195
  d4:	99 e0       	ldi	r25, 0x09	; 9
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x14>
  dc:	00 00       	nop
        _delay_ms(10); // wait for 10ms to call LEDM_Manage again 
        // _delay_ms(5); // wait for 5ms to call LEDM_Manage again 
        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        // WDGCounter += 5; // Increment by the delay amount (5ms)
        WDGCounter += 10; // Increment by the delay amount (10ms)
  de:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  e2:	86 5f       	subi	r24, 0xF6	; 246
  e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
  e8:	84 31       	cpi	r24, 0x14	; 20
  ea:	88 f3       	brcs	.-30     	; 0xce <main+0x6>
            WDGM_MainFunction();  // Call watchdog management every 20ms
  ec:	0e 94 3f 01 	call	0x27e	; 0x27e <WDGM_MainFunction>
            call_count_100_ms +=20;
  f0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count_100_ms>
  f4:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <call_count_100_ms+0x1>
  f8:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <call_count_100_ms+0x2>
  fc:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <call_count_100_ms+0x3>
 100:	44 96       	adiw	r24, 0x14	; 20
 102:	a1 1d       	adc	r26, r1
 104:	b1 1d       	adc	r27, r1
 106:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <call_count_100_ms>
 10a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <call_count_100_ms+0x1>
 10e:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <call_count_100_ms+0x2>
 112:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <call_count_100_ms+0x3>
            call_count_50_ms ++;
 116:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count_50_ms>
 11a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count_50_ms+0x1>
 11e:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <call_count_50_ms+0x2>
 122:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <call_count_50_ms+0x3>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	a1 1d       	adc	r26, r1
 12a:	b1 1d       	adc	r27, r1
 12c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <call_count_50_ms>
 130:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <call_count_50_ms+0x1>
 134:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <call_count_50_ms+0x2>
 138:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <call_count_50_ms+0x3>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 13c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 140:	c6 cf       	rjmp	.-116    	; 0xce <main+0x6>

00000142 <WDGDrv_Init>:

void WDGDrv_Init(void)
{
    // cli();                             // Enable global interrupts
    // configure the timer
    TCCR1B |= (1 << WGM12);
 142:	e1 e8       	ldi	r30, 0x81	; 129
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 83       	st	Z, r24
    OCR1A = 781;
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	93 e0       	ldi	r25, 0x03	; 3
 150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
 158:	80 81       	ld	r24, Z
 15a:	83 60       	ori	r24, 0x03	; 3
 15c:	80 83       	st	Z, r24
    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 15e:	ef e6       	ldi	r30, 0x6F	; 111
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	82 60       	ori	r24, 0x02	; 2
 166:	80 83       	st	Z, r24

    // wdt_reset();
    // MCUSR &= ~(1<<3);
    // WDTCSR = 0x00;
    WDTCSR = (1 << WDCE) | (1 << WDE); // Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 168:	e0 e6       	ldi	r30, 0x60	; 96
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	88 e1       	ldi	r24, 0x18	; 24
 16e:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP1)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	80 83       	st	Z, r24
    // WDTCSR = (1 << WDIE) ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
    // sei();                             // Enable global interrupts
        // WDTCSR = (1 << WDE) | (1 << WDP2) | (1 << WDP1); // Set the watchdog to approximately 0.5 seconds
    SREG |= (1 << I);
 174:	8f b7       	in	r24, 0x3f	; 63
 176:	80 68       	ori	r24, 0x80	; 128
 178:	8f bf       	out	0x3f, r24	; 63
}
 17a:	08 95       	ret

0000017c <WDGDrv_IsrNotification>:

void WDGDrv_IsrNotification(void)
{

        // check call_count(times WDGM_MainFunction is called) is 2 or more
        if (call_count_50_ms >= 2)
 17c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count_50_ms>
 180:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count_50_ms+0x1>
 184:	02 97       	sbiw	r24, 0x02	; 2
 186:	c4 f0       	brlt	.+48     	; 0x1b8 <WDGDrv_IsrNotification+0x3c>
        {
            stuck = 0;            // The function is not stuck
 188:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x1>
 18c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck>
            call_count_50_ms = 0; // Reset for the next 50ms period
 190:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <call_count_50_ms+0x1>
 194:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <call_count_50_ms>
        }
        else
        {
            stuck = 1; // The function might be stuck
        }
        if (WDGM_PovideSuppervisionStatus() == OK && (!stuck))
 198:	0e 94 79 01 	call	0x2f2	; 0x2f2 <WDGM_PovideSuppervisionStatus>
 19c:	81 11       	cpse	r24, r1
 19e:	13 c0       	rjmp	.+38     	; 0x1c6 <WDGDrv_IsrNotification+0x4a>
 1a0:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <stuck>
 1a4:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <stuck+0x1>
 1a8:	89 2b       	or	r24, r25
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <WDGDrv_IsrNotification+0x4a>
        {
            wdt_reset();
 1ac:	a8 95       	wdr
            PORTB ^= (1 << 4); // to indicate the perodicity refreshment of the wdt
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	90 e1       	ldi	r25, 0x10	; 16
 1b2:	89 27       	eor	r24, r25
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	08 95       	ret
            stuck = 0;            // The function is not stuck
            call_count_50_ms = 0; // Reset for the next 50ms period
        }
        else
        {
            stuck = 1; // The function might be stuck
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <stuck+0x1>
 1c0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <stuck>
 1c4:	e9 cf       	rjmp	.-46     	; 0x198 <WDGDrv_IsrNotification+0x1c>
            wdt_reset();
            PORTB ^= (1 << 4); // to indicate the perodicity refreshment of the wdt
        }
        else
        {
            is_reset ++;
 1c6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <is_reset>
 1ca:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <is_reset+0x1>
 1ce:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <is_reset+0x2>
 1d2:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <is_reset+0x3>
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	a1 1d       	adc	r26, r1
 1da:	b1 1d       	adc	r27, r1
 1dc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <is_reset>
 1e0:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <is_reset+0x1>
 1e4:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <is_reset+0x2>
 1e8:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <is_reset+0x3>
            // leave the wdt to reset 
                // MCUSR = (1 << 3)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
            PORTB ^= (1  << 7);  // evey100ms
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	80 58       	subi	r24, 0x80	; 128
 1f0:	85 b9       	out	0x05, r24	; 5
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 1f2:	88 e1       	ldi	r24, 0x18	; 24
 1f4:	98 e0       	ldi	r25, 0x08	; 8
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	a8 95       	wdr
 1fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 200:	0f be       	out	0x3f, r0	; 63
 202:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
            wdt_enable(WDTO_15MS);

            return;
        }
 206:	08 95       	ret

00000208 <__vector_11>:
extern stuck;
extern call_count_50_ms;
uint32 is_reset = 0;

ISR(TIMER1_COMPA_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
    WDGDrv_IsrNotification();
 22a:	0e 94 be 00 	call	0x17c	; 0x17c <WDGDrv_IsrNotification>
    PORTB ^= (1 <<5);
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	90 e2       	ldi	r25, 0x20	; 32
 232:	89 27       	eor	r24, r25
 234:	85 b9       	out	0x05, r24	; 5

}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <WDGM_Init>:
extern call_count_100_ms;
static volatile uint32 led_no_calls;
uint32 stuck;
void WDGM_Init(void)
{
    status = OK;
 258:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <status>
    led_no_calls = 0;
 25c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 260:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 264:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 268:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
    stuck = 0;
 26c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck>
 270:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x1>
 274:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stuck+0x2>
 278:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <stuck+0x3>
}
 27c:	08 95       	ret

0000027e <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    PORTB ^= (1 << 3); // to indicate the perodicity of the function
 27e:	85 b1       	in	r24, 0x05	; 5
 280:	98 e0       	ldi	r25, 0x08	; 8
 282:	89 27       	eor	r24, r25
 284:	85 b9       	out	0x05, r24	; 5
    if(call_count_100_ms == 100)
 286:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <call_count_100_ms>
 28a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <call_count_100_ms+0x1>
 28e:	84 36       	cpi	r24, 0x64	; 100
 290:	91 05       	cpc	r25, r1
 292:	51 f5       	brne	.+84     	; 0x2e8 <WDGM_MainFunction+0x6a>
    {
        PORTB ^= (1 << 6); // to indicate the perodicity of the function
 294:	85 b1       	in	r24, 0x05	; 5
 296:	90 e4       	ldi	r25, 0x40	; 64
 298:	89 27       	eor	r24, r25
 29a:	85 b9       	out	0x05, r24	; 5
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 29c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 2a0:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 2a4:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 2a8:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 2ac:	08 97       	sbiw	r24, 0x08	; 8
 2ae:	a1 05       	cpc	r26, r1
 2b0:	b1 05       	cpc	r27, r1
 2b2:	d8 f0       	brcs	.+54     	; 0x2ea <WDGM_MainFunction+0x6c>
 2b4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 2b8:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 2bc:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 2c0:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 2c4:	0d 97       	sbiw	r24, 0x0d	; 13
 2c6:	a1 05       	cpc	r26, r1
 2c8:	b1 05       	cpc	r27, r1
 2ca:	78 f4       	brcc	.+30     	; 0x2ea <WDGM_MainFunction+0x6c>
        {
            status = OK;
 2cc:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <status>
        }
        else
        {
            status = NOK;
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 2d0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls>
 2d4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x1>
 2d8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x2>
 2dc:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <led_no_calls+0x3>
        call_count_100_ms = 0;   // return the call count for the next 100ms period
 2e0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <call_count_100_ms+0x1>
 2e4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <call_count_100_ms>
    }
    
}
 2e8:	08 95       	ret
        {
            status = OK;
        }
        else
        {
            status = NOK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <status>
 2f0:	ef cf       	rjmp	.-34     	; 0x2d0 <WDGM_MainFunction+0x52>

000002f2 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 2f2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <status>
 2f6:	08 95       	ret

000002f8 <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 2f8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_no_calls>
 2fc:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <led_no_calls+0x1>
 300:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <led_no_calls+0x2>
 304:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <led_no_calls+0x3>
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	a1 1d       	adc	r26, r1
 30c:	b1 1d       	adc	r27, r1
 30e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <led_no_calls>
 312:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <led_no_calls+0x1>
 316:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <led_no_calls+0x2>
 31a:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <led_no_calls+0x3>
 31e:	08 95       	ret

00000320 <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 320:	80 36       	cpi	r24, 0x60	; 96
 322:	28 f5       	brcc	.+74     	; 0x36e <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 324:	e8 2f       	mov	r30, r24
 326:	e2 95       	swap	r30
 328:	e6 95       	lsr	r30
 32a:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	ea 5f       	subi	r30, 0xFA	; 250
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	01 90       	ld	r0, Z+
 338:	f0 81       	ld	r31, Z
 33a:	e0 2d       	mov	r30, r0
 33c:	40 81       	ld	r20, Z
 33e:	51 81       	ldd	r21, Z+1	; 0x01
 340:	62 81       	ldd	r22, Z+2	; 0x02
 342:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 344:	98 2f       	mov	r25, r24
 346:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <Nvic_EnableInterrupt+0x32>
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	9a 95       	dec	r25
 354:	e2 f7       	brpl	.-8      	; 0x34e <Nvic_EnableInterrupt+0x2e>
 356:	c9 01       	movw	r24, r18
 358:	33 0f       	add	r19, r19
 35a:	aa 0b       	sbc	r26, r26
 35c:	bb 0b       	sbc	r27, r27
 35e:	84 2b       	or	r24, r20
 360:	95 2b       	or	r25, r21
 362:	a6 2b       	or	r26, r22
 364:	b7 2b       	or	r27, r23
 366:	80 83       	st	Z, r24
 368:	91 83       	std	Z+1, r25	; 0x01
 36a:	a2 83       	std	Z+2, r26	; 0x02
 36c:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 36e:	08 95       	ret

00000370 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 370:	80 36       	cpi	r24, 0x60	; 96
 372:	28 f5       	brcc	.+74     	; 0x3be <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 374:	e8 2f       	mov	r30, r24
 376:	e2 95       	swap	r30
 378:	e6 95       	lsr	r30
 37a:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	e0 50       	subi	r30, 0x00	; 0
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	01 90       	ld	r0, Z+
 388:	f0 81       	ld	r31, Z
 38a:	e0 2d       	mov	r30, r0
 38c:	40 81       	ld	r20, Z
 38e:	51 81       	ldd	r21, Z+1	; 0x01
 390:	62 81       	ldd	r22, Z+2	; 0x02
 392:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 394:	98 2f       	mov	r25, r24
 396:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <Nvic_DisableInterrupt+0x32>
 39e:	22 0f       	add	r18, r18
 3a0:	33 1f       	adc	r19, r19
 3a2:	9a 95       	dec	r25
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <Nvic_DisableInterrupt+0x2e>
 3a6:	c9 01       	movw	r24, r18
 3a8:	33 0f       	add	r19, r19
 3aa:	aa 0b       	sbc	r26, r26
 3ac:	bb 0b       	sbc	r27, r27
 3ae:	84 2b       	or	r24, r20
 3b0:	95 2b       	or	r25, r21
 3b2:	a6 2b       	or	r26, r22
 3b4:	b7 2b       	or	r27, r23
 3b6:	80 83       	st	Z, r24
 3b8:	91 83       	std	Z+1, r25	; 0x01
 3ba:	a2 83       	std	Z+2, r26	; 0x02
 3bc:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 3be:	08 95       	ret

000003c0 <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 3c0:	0e 94 22 02 	call	0x444	; 0x444 <GPIO_Init>
    led_state = 0;
 3c4:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <led_state>
    time_counter = 0;
 3c8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter>
 3cc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x1>
 3d0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x2>
 3d4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_counter+0x3>
}
 3d8:	08 95       	ret

000003da <LEDM_Manage>:

void LEDM_Manage(void)
{   
    PORTB ^= (1 << 2); // to indicate the perodicity of the function
 3da:	85 b1       	in	r24, 0x05	; 5
 3dc:	94 e0       	ldi	r25, 0x04	; 4
 3de:	89 27       	eor	r24, r25
 3e0:	85 b9       	out	0x05, r24	; 5
    
	if (time_counter == 500)
 3e2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <time_counter>
 3e6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <time_counter+0x1>
 3ea:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <time_counter+0x2>
 3ee:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <time_counter+0x3>
 3f2:	84 3f       	cpi	r24, 0xF4	; 244
 3f4:	91 40       	sbci	r25, 0x01	; 1
 3f6:	a1 05       	cpc	r26, r1
 3f8:	b1 05       	cpc	r27, r1
 3fa:	81 f4       	brne	.+32     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
    {
		led_state = ~led_state;
 3fc:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <led_state>
 400:	60 95       	com	r22
 402:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 24 02 	call	0x448	; 0x448 <GPIO_Write>
		time_counter = 0;
 40c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter>
 410:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x1>
 414:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x2>
 418:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_counter+0x3>
    }
	// time_counter += 5;
	time_counter += 10;
 41c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <time_counter>
 420:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <time_counter+0x1>
 424:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <time_counter+0x2>
 428:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <time_counter+0x3>
 42c:	0a 96       	adiw	r24, 0x0a	; 10
 42e:	a1 1d       	adc	r26, r1
 430:	b1 1d       	adc	r27, r1
 432:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <time_counter>
 436:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <time_counter+0x1>
 43a:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <time_counter+0x2>
 43e:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <time_counter+0x3>
    // WDGM_AlivenessIndication(); // to count the number of function calls
 442:	08 95       	ret

00000444 <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 444:	21 9a       	sbi	0x04, 1	; 4

}
 446:	08 95       	ret

00000448 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 448:	45 b1       	in	r20, 0x05	; 5
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	f9 01       	movw	r30, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <GPIO_Write+0xe>
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	8a 95       	dec	r24
 458:	e2 f7       	brpl	.-8      	; 0x452 <GPIO_Write+0xa>
 45a:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 45c:	66 23       	and	r22, r22
 45e:	19 f0       	breq	.+6      	; 0x466 <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 460:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 462:	85 b9       	out	0x05, r24	; 5
    }
}
 464:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 466:	80 95       	com	r24
 468:	84 23       	and	r24, r20
 46a:	fb cf       	rjmp	.-10     	; 0x462 <GPIO_Write+0x1a>

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
