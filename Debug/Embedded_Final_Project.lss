
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000086a  000008fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800112  00800112  00000910  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de0  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2d  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dab  00000000  00000000  0000228d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003038  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d67  00000000  00000000  00003290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d5  00000000  00000000  0000aff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000b3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e27  00000000  00000000  0000b46c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 33 04 	jmp	0x866	; 0x866 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <GPIO.h>
#include <LEDM.h>
#include <WDGM.h>


int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2e 97       	sbiw	r28, 0x0e	; 14
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    // Set PB0 as output for the LED
    DDRB |= (1 << 0);
  ba:	87 e3       	ldi	r24, 0x37	; 55
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	20 81       	ld	r18, Z
  c2:	87 e3       	ldi	r24, 0x37	; 55
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	21 60       	ori	r18, 0x01	; 1
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);  // Ensure the LED is initially off
  cc:	88 e3       	ldi	r24, 0x38	; 56
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	20 81       	ld	r18, Z
  d4:	88 e3       	ldi	r24, 0x38	; 56
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2e 7f       	andi	r18, 0xFE	; 254
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
    // WDGDrv_Init();
    LEDM_Init();
  de:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <LEDM_Init>
    WDGM_Init();
  e2:	0e 94 67 01 	call	0x2ce	; 0x2ce <WDGM_Init>

    // Call WDGM_MainFunction for the first time
    WDGM_MainFunction();
  e6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <WDGM_MainFunction>
    static uint8 WDGCounter = 0;
    // Main loop
    while (1) {
        LEDM_Manage();
  ea:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LEDM_Manage>
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	a0 e2       	ldi	r26, 0x20	; 32
  f4:	b1 e4       	ldi	r27, 0x41	; 65
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	ab 83       	std	Y+3, r26	; 0x03
  fc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	4a e7       	ldi	r20, 0x7A	; 122
 104:	53 e4       	ldi	r21, 0x43	; 67
 106:	69 81       	ldd	r22, Y+1	; 0x01
 108:	7a 81       	ldd	r23, Y+2	; 0x02
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	9c 81       	ldd	r25, Y+4	; 0x04
 10e:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
 112:	dc 01       	movw	r26, r24
 114:	cb 01       	movw	r24, r22
 116:	8d 83       	std	Y+5, r24	; 0x05
 118:	9e 83       	std	Y+6, r25	; 0x06
 11a:	af 83       	std	Y+7, r26	; 0x07
 11c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 e8       	ldi	r20, 0x80	; 128
 124:	5f e3       	ldi	r21, 0x3F	; 63
 126:	6d 81       	ldd	r22, Y+5	; 0x05
 128:	7e 81       	ldd	r23, Y+6	; 0x06
 12a:	8f 81       	ldd	r24, Y+7	; 0x07
 12c:	98 85       	ldd	r25, Y+8	; 0x08
 12e:	0e 94 18 03 	call	0x630	; 0x630 <__cmpsf2>
 132:	88 23       	and	r24, r24
 134:	2c f4       	brge	.+10     	; 0x140 <main+0x9a>
		__ticks = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	9a 87       	std	Y+10, r25	; 0x0a
 13c:	89 87       	std	Y+9, r24	; 0x09
 13e:	3f c0       	rjmp	.+126    	; 0x1be <main+0x118>
	else if (__tmp > 65535)
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	3f ef       	ldi	r19, 0xFF	; 255
 144:	4f e7       	ldi	r20, 0x7F	; 127
 146:	57 e4       	ldi	r21, 0x47	; 71
 148:	6d 81       	ldd	r22, Y+5	; 0x05
 14a:	7e 81       	ldd	r23, Y+6	; 0x06
 14c:	8f 81       	ldd	r24, Y+7	; 0x07
 14e:	98 85       	ldd	r25, Y+8	; 0x08
 150:	0e 94 99 03 	call	0x732	; 0x732 <__gesf2>
 154:	18 16       	cp	r1, r24
 156:	4c f5       	brge	.+82     	; 0x1aa <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e2       	ldi	r20, 0x20	; 32
 15e:	51 e4       	ldi	r21, 0x41	; 65
 160:	69 81       	ldd	r22, Y+1	; 0x01
 162:	7a 81       	ldd	r23, Y+2	; 0x02
 164:	8b 81       	ldd	r24, Y+3	; 0x03
 166:	9c 81       	ldd	r25, Y+4	; 0x04
 168:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	0e 94 1d 03 	call	0x63a	; 0x63a <__fixunssfsi>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	9a 87       	std	Y+10, r25	; 0x0a
 17e:	89 87       	std	Y+9, r24	; 0x09
 180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xfa>
 182:	89 e1       	ldi	r24, 0x19	; 25
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	9c 87       	std	Y+12, r25	; 0x0c
 188:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18a:	8b 85       	ldd	r24, Y+11	; 0x0b
 18c:	9c 85       	ldd	r25, Y+12	; 0x0c
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0xe8>
 192:	9c 87       	std	Y+12, r25	; 0x0c
 194:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 196:	89 85       	ldd	r24, Y+9	; 0x09
 198:	9a 85       	ldd	r25, Y+10	; 0x0a
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	9a 87       	std	Y+10, r25	; 0x0a
 19e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a0:	89 85       	ldd	r24, Y+9	; 0x09
 1a2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a4:	89 2b       	or	r24, r25
 1a6:	69 f7       	brne	.-38     	; 0x182 <main+0xdc>
 1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1aa:	6d 81       	ldd	r22, Y+5	; 0x05
 1ac:	7e 81       	ldd	r23, Y+6	; 0x06
 1ae:	8f 81       	ldd	r24, Y+7	; 0x07
 1b0:	98 85       	ldd	r25, Y+8	; 0x08
 1b2:	0e 94 1d 03 	call	0x63a	; 0x63a <__fixunssfsi>
 1b6:	dc 01       	movw	r26, r24
 1b8:	cb 01       	movw	r24, r22
 1ba:	9a 87       	std	Y+10, r25	; 0x0a
 1bc:	89 87       	std	Y+9, r24	; 0x09
 1be:	89 85       	ldd	r24, Y+9	; 0x09
 1c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c2:	9e 87       	std	Y+14, r25	; 0x0e
 1c4:	8d 87       	std	Y+13, r24	; 0x0d
 1c6:	8d 85       	ldd	r24, Y+13	; 0x0d
 1c8:	9e 85       	ldd	r25, Y+14	; 0x0e
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x124>
 1ce:	9e 87       	std	Y+14, r25	; 0x0e
 1d0:	8d 87       	std	Y+13, r24	; 0x0d
        _delay_ms(10); // wait for 10ms to call LEDM_Manage again 

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        WDGCounter += 10; // Increment by the delay amount (10ms)
 1d2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1d6:	86 5f       	subi	r24, 0xF6	; 246
 1d8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
 1dc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1e0:	84 31       	cpi	r24, 0x14	; 20
 1e2:	08 f4       	brcc	.+2      	; 0x1e6 <main+0x140>
 1e4:	82 cf       	rjmp	.-252    	; 0xea <main+0x44>
            WDGM_MainFunction();  // Call watchdog management every 20ms
 1e6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <WDGM_MainFunction>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 1ea:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
    // Call WDGM_MainFunction for the first time
    WDGM_MainFunction();
    static uint8 WDGCounter = 0;
    // Main loop
    while (1) {
        LEDM_Manage();
 1ee:	7d cf       	rjmp	.-262    	; 0xea <main+0x44>

000001f0 <__vector_6>:


int x = 0;


ISR(WDT_vect) {
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
    x = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <x+0x1>
 214:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <x>
    PORTB |= (1 << 0); // Set PB0 high
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	20 81       	ld	r18, Z
 220:	85 e2       	ldi	r24, 0x25	; 37
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	21 60       	ori	r18, 0x01	; 1
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
    // for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
    // _delay_ms(1000); 
    // WDTCSR = (1 << WDIE);
}
 22a:	00 00       	nop
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <WDGDrv_Init>:

void WDGDrv_Init(void) {
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << 0);
 24c:	84 e2       	ldi	r24, 0x24	; 36
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	fc 01       	movw	r30, r24
 252:	20 81       	ld	r18, Z
 254:	84 e2       	ldi	r24, 0x24	; 36
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	21 60       	ori	r18, 0x01	; 1
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);
 25e:	85 e2       	ldi	r24, 0x25	; 37
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	fc 01       	movw	r30, r24
 264:	20 81       	ld	r18, Z
 266:	85 e2       	ldi	r24, 0x25	; 37
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2e 7f       	andi	r18, 0xFE	; 254
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
    // Disable global interrupts
    cli();
 270:	f8 94       	cli
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	88 70       	andi	r24, 0x08	; 8
 278:	99 27       	eor	r25, r25
 27a:	89 2b       	or	r24, r25
 27c:	11 f0       	breq	.+4      	; 0x282 <WDGDrv_Init+0x3e>
 27e:	88 e2       	ldi	r24, 0x28	; 40
 280:	01 c0       	rjmp	.+2      	; 0x284 <WDGDrv_Init+0x40>
 282:	88 e0       	ldi	r24, 0x08	; 8
						_BV(WDE) | (value & 0x07)) )
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	97 70       	andi	r25, 0x07	; 7
 288:	89 2b       	or	r24, r25
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 28a:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 28c:	88 e1       	ldi	r24, 0x18	; 24
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	a8 95       	wdr
 294:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 298:	0f be       	out	0x3f, r0	; 63
 29a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    // SREG &= ~(1 << I);
    //Interrupt and System Reset Mode
    wdt_enable(2);
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 29e:	80 e6       	ldi	r24, 0x60	; 96
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	28 e1       	ldi	r18, 0x18	; 24
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
    WDTCSR =  (1 << WDE)|(1 << WDIE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 2a8:	80 e6       	ldi	r24, 0x60	; 96
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	2a e4       	ldi	r18, 0x4A	; 74
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
    sei(); // Enable global interrupts
 2b2:	78 94       	sei
    // SREG |= (1 << I);
// 
}
 2b4:	00 00       	nop
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
    // uint32 current_time = HAL_GetTick();

    if(WDGM_PovideSuppervisionStatus()==OK  /*&& the WDGM_MainFunction_is_not_STUCK*/){
 2c4:	0e 94 b5 01 	call	0x36a	; 0x36a <WDGM_PovideSuppervisionStatus>
       //refresh 
    }else{
        return;
    }
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <WDGM_Init>:
static uint32 led_no_calls;
static uint32 check_time ;
// uint32 last_execution_time;

void WDGM_Init(void)
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
    led_no_calls = 0;
 2dc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 2e0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 2e4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 2e8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
    call_count = 0;
 2ec:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <call_count>
    //last_execution_time = currenttime;
}
 2f0:	00 00       	nop
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
    call_count ++;
 300:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <call_count>
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <call_count>
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms)
    if (call_count <= 6) {
 30a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <call_count>
 30e:	87 30       	cpi	r24, 0x07	; 7
 310:	40 f5       	brcc	.+80     	; 0x362 <WDGM_MainFunction+0x6a>
        call_count = 0; // Reset count for next period
 312:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <call_count>
        // Check number of LEDM calls in last 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 316:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 31a:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 31e:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 322:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 326:	08 97       	sbiw	r24, 0x08	; 8
 328:	a1 05       	cpc	r26, r1
 32a:	b1 05       	cpc	r27, r1
 32c:	78 f0       	brcs	.+30     	; 0x34c <WDGM_MainFunction+0x54>
 32e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 332:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 336:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 33a:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 33e:	0d 97       	sbiw	r24, 0x0d	; 13
 340:	a1 05       	cpc	r26, r1
 342:	b1 05       	cpc	r27, r1
 344:	18 f4       	brcc	.+6      	; 0x34c <WDGM_MainFunction+0x54>
        { 
            status = OK;
 346:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <status>
 34a:	03 c0       	rjmp	.+6      	; 0x352 <WDGM_MainFunction+0x5a>
        } else {
            status = NOK;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 352:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 356:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 35a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 35e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
    }
    
    // last_execution_time = current_time;
}
 362:	00 00       	nop
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <WDGM_PovideSuppervisionStatus>:




WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 372:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <status>
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <WDGM_AlivenessIndication>:




void WDGM_AlivenessIndication(void)
{
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 384:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 388:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 38c:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 390:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	a1 1d       	adc	r26, r1
 398:	b1 1d       	adc	r27, r1
 39a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <led_no_calls>
 39e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <led_no_calls+0x1>
 3a2:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <led_no_calls+0x2>
 3a6:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <led_no_calls+0x3>
}
 3aa:	00 00       	nop
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <Nvic_EnableInterrupt+0x6>
 3b8:	1f 92       	push	r1
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 3c0:	8b 81       	ldd	r24, Y+3	; 0x03
 3c2:	80 36       	cpi	r24, 0x60	; 96
 3c4:	c0 f5       	brcc	.+112    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 3c6:	8b 81       	ldd	r24, Y+3	; 0x03
 3c8:	82 95       	swap	r24
 3ca:	86 95       	lsr	r24
 3cc:	87 70       	andi	r24, 0x07	; 7
 3ce:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	8f 71       	andi	r24, 0x1F	; 31
 3d4:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	88 2f       	mov	r24, r24
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	80 50       	subi	r24, 0x00	; 0
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	fc 01       	movw	r30, r24
 3e6:	80 81       	ld	r24, Z
 3e8:	91 81       	ldd	r25, Z+1	; 0x01
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 81       	ld	r18, Z
 3ee:	31 81       	ldd	r19, Z+1	; 0x01
 3f0:	42 81       	ldd	r20, Z+2	; 0x02
 3f2:	53 81       	ldd	r21, Z+3	; 0x03
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	68 2f       	mov	r22, r24
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	09 2e       	mov	r0, r25
 40a:	00 0c       	add	r0, r0
 40c:	aa 0b       	sbc	r26, r26
 40e:	bb 0b       	sbc	r27, r27
 410:	69 81       	ldd	r22, Y+1	; 0x01
 412:	66 2f       	mov	r22, r22
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	60 50       	subi	r22, 0x00	; 0
 41c:	7f 4f       	sbci	r23, 0xFF	; 255
 41e:	fb 01       	movw	r30, r22
 420:	60 81       	ld	r22, Z
 422:	71 81       	ldd	r23, Z+1	; 0x01
 424:	82 2b       	or	r24, r18
 426:	93 2b       	or	r25, r19
 428:	a4 2b       	or	r26, r20
 42a:	b5 2b       	or	r27, r21
 42c:	fb 01       	movw	r30, r22
 42e:	80 83       	st	Z, r24
 430:	91 83       	std	Z+1, r25	; 0x01
 432:	a2 83       	std	Z+2, r26	; 0x02
 434:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 436:	00 00       	nop
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	00 d0       	rcall	.+0      	; 0x44a <Nvic_DisableInterrupt+0x6>
 44a:	1f 92       	push	r1
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 452:	8b 81       	ldd	r24, Y+3	; 0x03
 454:	80 36       	cpi	r24, 0x60	; 96
 456:	c0 f5       	brcc	.+112    	; 0x4c8 <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	82 95       	swap	r24
 45c:	86 95       	lsr	r24
 45e:	87 70       	andi	r24, 0x07	; 7
 460:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	8f 71       	andi	r24, 0x1F	; 31
 466:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	88 2f       	mov	r24, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	8a 5f       	subi	r24, 0xFA	; 250
 474:	9e 4f       	sbci	r25, 0xFE	; 254
 476:	fc 01       	movw	r30, r24
 478:	80 81       	ld	r24, Z
 47a:	91 81       	ldd	r25, Z+1	; 0x01
 47c:	fc 01       	movw	r30, r24
 47e:	20 81       	ld	r18, Z
 480:	31 81       	ldd	r19, Z+1	; 0x01
 482:	42 81       	ldd	r20, Z+2	; 0x02
 484:	53 81       	ldd	r21, Z+3	; 0x03
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	68 2f       	mov	r22, r24
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <Nvic_DisableInterrupt+0x52>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <Nvic_DisableInterrupt+0x4e>
 49a:	09 2e       	mov	r0, r25
 49c:	00 0c       	add	r0, r0
 49e:	aa 0b       	sbc	r26, r26
 4a0:	bb 0b       	sbc	r27, r27
 4a2:	69 81       	ldd	r22, Y+1	; 0x01
 4a4:	66 2f       	mov	r22, r22
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	66 0f       	add	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	6a 5f       	subi	r22, 0xFA	; 250
 4ae:	7e 4f       	sbci	r23, 0xFE	; 254
 4b0:	fb 01       	movw	r30, r22
 4b2:	60 81       	ld	r22, Z
 4b4:	71 81       	ldd	r23, Z+1	; 0x01
 4b6:	82 2b       	or	r24, r18
 4b8:	93 2b       	or	r25, r19
 4ba:	a4 2b       	or	r26, r20
 4bc:	b5 2b       	or	r27, r21
 4be:	fb 01       	movw	r30, r22
 4c0:	80 83       	st	Z, r24
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	a2 83       	std	Z+2, r26	; 0x02
 4c6:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 4c8:	00 00       	nop
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <LEDM_Init>:

static uint8 led_state;


void LEDM_Init(void)
{
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 4de:	0e 94 bc 02 	call	0x578	; 0x578 <GPIO_Init>
    led_state = 0;
 4e2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_state>
    time_counter = 0;
 4e6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter>
 4ea:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x1>
 4ee:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x2>
 4f2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x3>
}
 4f6:	00 00       	nop
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <LEDM_Manage>:

void LEDM_Manage(void)
{
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
	if (time_counter == 500)
 506:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_counter>
 50a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_counter+0x1>
 50e:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <time_counter+0x2>
 512:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <time_counter+0x3>
 516:	84 3f       	cpi	r24, 0xF4	; 244
 518:	91 40       	sbci	r25, 0x01	; 1
 51a:	a1 05       	cpc	r26, r1
 51c:	b1 05       	cpc	r27, r1
 51e:	99 f4       	brne	.+38     	; 0x546 <LEDM_Manage+0x48>
    {
		led_state = ~led_state;
 520:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_state>
 524:	80 95       	com	r24
 526:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 52a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <led_state>
 52e:	68 2f       	mov	r22, r24
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 d5 02 	call	0x5aa	; 0x5aa <GPIO_Write>
		time_counter = 0;
 536:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_counter>
 53a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter+0x1>
 53e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x2>
 542:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x3>
    }
	time_counter += 10;
 546:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_counter>
 54a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_counter+0x1>
 54e:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <time_counter+0x2>
 552:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <time_counter+0x3>
 556:	0a 96       	adiw	r24, 0x0a	; 10
 558:	a1 1d       	adc	r26, r1
 55a:	b1 1d       	adc	r27, r1
 55c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <time_counter>
 560:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <time_counter+0x1>
 564:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <time_counter+0x2>
 568:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 56c:	0e 94 be 01 	call	0x37c	; 0x37c <WDGM_AlivenessIndication>
 570:	00 00       	nop
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <GPIO_Init>:
#include "Gpio_Private.h"

GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	00 d0       	rcall	.+0      	; 0x57e <GPIO_Init+0x6>
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 582:	83 e2       	ldi	r24, 0x23	; 35
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	9a 83       	std	Y+2, r25	; 0x02
 588:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->DDR |= (1 << LED_PIN_ID);
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	9a 81       	ldd	r25, Y+2	; 0x02
 58e:	fc 01       	movw	r30, r24
 590:	81 81       	ldd	r24, Z+1	; 0x01
 592:	28 2f       	mov	r18, r24
 594:	22 60       	ori	r18, 0x02	; 2
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	9a 81       	ldd	r25, Y+2	; 0x02
 59a:	fc 01       	movw	r30, r24
 59c:	21 83       	std	Z+1, r18	; 0x01

}
 59e:	00 00       	nop
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	00 d0       	rcall	.+0      	; 0x5b0 <GPIO_Write+0x6>
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <GPIO_Write+0x8>
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	8b 83       	std	Y+3, r24	; 0x03
 5b8:	6c 83       	std	Y+4, r22	; 0x04
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
 5ba:	83 e2       	ldi	r24, 0x23	; 35
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	9a 83       	std	Y+2, r25	; 0x02
 5c0:	89 83       	std	Y+1, r24	; 0x01
    if (PinData) {
 5c2:	8c 81       	ldd	r24, Y+4	; 0x04
 5c4:	88 23       	and	r24, r24
 5c6:	b1 f0       	breq	.+44     	; 0x5f4 <GPIO_Write+0x4a>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	9a 81       	ldd	r25, Y+2	; 0x02
 5cc:	fc 01       	movw	r30, r24
 5ce:	82 81       	ldd	r24, Z+2	; 0x02
 5d0:	48 2f       	mov	r20, r24
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <GPIO_Write+0x38>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	2a 95       	dec	r18
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <GPIO_Write+0x34>
 5e6:	84 2b       	or	r24, r20
 5e8:	28 2f       	mov	r18, r24
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	9a 81       	ldd	r25, Y+2	; 0x02
 5ee:	fc 01       	movw	r30, r24
 5f0:	22 83       	std	Z+2, r18	; 0x02
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
    }
}
 5f2:	16 c0       	rjmp	.+44     	; 0x620 <GPIO_Write+0x76>
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 5f4:	89 81       	ldd	r24, Y+1	; 0x01
 5f6:	9a 81       	ldd	r25, Y+2	; 0x02
 5f8:	fc 01       	movw	r30, r24
 5fa:	82 81       	ldd	r24, Z+2	; 0x02
 5fc:	48 2f       	mov	r20, r24
 5fe:	8b 81       	ldd	r24, Y+3	; 0x03
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <GPIO_Write+0x64>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	2a 95       	dec	r18
 610:	e2 f7       	brpl	.-8      	; 0x60a <GPIO_Write+0x60>
 612:	80 95       	com	r24
 614:	84 23       	and	r24, r20
 616:	28 2f       	mov	r18, r24
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	9a 81       	ldd	r25, Y+2	; 0x02
 61c:	fc 01       	movw	r30, r24
 61e:	22 83       	std	Z+2, r18	; 0x02
    }
}
 620:	00 00       	nop
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <__cmpsf2>:
 630:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_cmp>
 634:	08 f4       	brcc	.+2      	; 0x638 <__cmpsf2+0x8>
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	08 95       	ret

0000063a <__fixunssfsi>:
 63a:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fp_splitA>
 63e:	88 f0       	brcs	.+34     	; 0x662 <__fixunssfsi+0x28>
 640:	9f 57       	subi	r25, 0x7F	; 127
 642:	98 f0       	brcs	.+38     	; 0x66a <__fixunssfsi+0x30>
 644:	b9 2f       	mov	r27, r25
 646:	99 27       	eor	r25, r25
 648:	b7 51       	subi	r27, 0x17	; 23
 64a:	b0 f0       	brcs	.+44     	; 0x678 <__fixunssfsi+0x3e>
 64c:	e1 f0       	breq	.+56     	; 0x686 <__fixunssfsi+0x4c>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	88 1f       	adc	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	1a f0       	brmi	.+6      	; 0x65e <__fixunssfsi+0x24>
 658:	ba 95       	dec	r27
 65a:	c9 f7       	brne	.-14     	; 0x64e <__fixunssfsi+0x14>
 65c:	14 c0       	rjmp	.+40     	; 0x686 <__fixunssfsi+0x4c>
 65e:	b1 30       	cpi	r27, 0x01	; 1
 660:	91 f0       	breq	.+36     	; 0x686 <__fixunssfsi+0x4c>
 662:	0e 94 92 03 	call	0x724	; 0x724 <__fp_zero>
 666:	b1 e0       	ldi	r27, 0x01	; 1
 668:	08 95       	ret
 66a:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_zero>
 66e:	67 2f       	mov	r22, r23
 670:	78 2f       	mov	r23, r24
 672:	88 27       	eor	r24, r24
 674:	b8 5f       	subi	r27, 0xF8	; 248
 676:	39 f0       	breq	.+14     	; 0x686 <__fixunssfsi+0x4c>
 678:	b9 3f       	cpi	r27, 0xF9	; 249
 67a:	cc f3       	brlt	.-14     	; 0x66e <__fixunssfsi+0x34>
 67c:	86 95       	lsr	r24
 67e:	77 95       	ror	r23
 680:	67 95       	ror	r22
 682:	b3 95       	inc	r27
 684:	d9 f7       	brne	.-10     	; 0x67c <__fixunssfsi+0x42>
 686:	3e f4       	brtc	.+14     	; 0x696 <__fixunssfsi+0x5c>
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	08 95       	ret

00000698 <__fp_cmp>:
 698:	99 0f       	add	r25, r25
 69a:	00 08       	sbc	r0, r0
 69c:	55 0f       	add	r21, r21
 69e:	aa 0b       	sbc	r26, r26
 6a0:	e0 e8       	ldi	r30, 0x80	; 128
 6a2:	fe ef       	ldi	r31, 0xFE	; 254
 6a4:	16 16       	cp	r1, r22
 6a6:	17 06       	cpc	r1, r23
 6a8:	e8 07       	cpc	r30, r24
 6aa:	f9 07       	cpc	r31, r25
 6ac:	c0 f0       	brcs	.+48     	; 0x6de <__fp_cmp+0x46>
 6ae:	12 16       	cp	r1, r18
 6b0:	13 06       	cpc	r1, r19
 6b2:	e4 07       	cpc	r30, r20
 6b4:	f5 07       	cpc	r31, r21
 6b6:	98 f0       	brcs	.+38     	; 0x6de <__fp_cmp+0x46>
 6b8:	62 1b       	sub	r22, r18
 6ba:	73 0b       	sbc	r23, r19
 6bc:	84 0b       	sbc	r24, r20
 6be:	95 0b       	sbc	r25, r21
 6c0:	39 f4       	brne	.+14     	; 0x6d0 <__fp_cmp+0x38>
 6c2:	0a 26       	eor	r0, r26
 6c4:	61 f0       	breq	.+24     	; 0x6de <__fp_cmp+0x46>
 6c6:	23 2b       	or	r18, r19
 6c8:	24 2b       	or	r18, r20
 6ca:	25 2b       	or	r18, r21
 6cc:	21 f4       	brne	.+8      	; 0x6d6 <__fp_cmp+0x3e>
 6ce:	08 95       	ret
 6d0:	0a 26       	eor	r0, r26
 6d2:	09 f4       	brne	.+2      	; 0x6d6 <__fp_cmp+0x3e>
 6d4:	a1 40       	sbci	r26, 0x01	; 1
 6d6:	a6 95       	lsr	r26
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	81 1d       	adc	r24, r1
 6dc:	81 1d       	adc	r24, r1
 6de:	08 95       	ret

000006e0 <__fp_split3>:
 6e0:	57 fd       	sbrc	r21, 7
 6e2:	90 58       	subi	r25, 0x80	; 128
 6e4:	44 0f       	add	r20, r20
 6e6:	55 1f       	adc	r21, r21
 6e8:	59 f0       	breq	.+22     	; 0x700 <__fp_splitA+0x10>
 6ea:	5f 3f       	cpi	r21, 0xFF	; 255
 6ec:	71 f0       	breq	.+28     	; 0x70a <__fp_splitA+0x1a>
 6ee:	47 95       	ror	r20

000006f0 <__fp_splitA>:
 6f0:	88 0f       	add	r24, r24
 6f2:	97 fb       	bst	r25, 7
 6f4:	99 1f       	adc	r25, r25
 6f6:	61 f0       	breq	.+24     	; 0x710 <__fp_splitA+0x20>
 6f8:	9f 3f       	cpi	r25, 0xFF	; 255
 6fa:	79 f0       	breq	.+30     	; 0x71a <__fp_splitA+0x2a>
 6fc:	87 95       	ror	r24
 6fe:	08 95       	ret
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	14 06       	cpc	r1, r20
 706:	55 1f       	adc	r21, r21
 708:	f2 cf       	rjmp	.-28     	; 0x6ee <__fp_split3+0xe>
 70a:	46 95       	lsr	r20
 70c:	f1 df       	rcall	.-30     	; 0x6f0 <__fp_splitA>
 70e:	08 c0       	rjmp	.+16     	; 0x720 <__fp_splitA+0x30>
 710:	16 16       	cp	r1, r22
 712:	17 06       	cpc	r1, r23
 714:	18 06       	cpc	r1, r24
 716:	99 1f       	adc	r25, r25
 718:	f1 cf       	rjmp	.-30     	; 0x6fc <__fp_splitA+0xc>
 71a:	86 95       	lsr	r24
 71c:	71 05       	cpc	r23, r1
 71e:	61 05       	cpc	r22, r1
 720:	08 94       	sec
 722:	08 95       	ret

00000724 <__fp_zero>:
 724:	e8 94       	clt

00000726 <__fp_szero>:
 726:	bb 27       	eor	r27, r27
 728:	66 27       	eor	r22, r22
 72a:	77 27       	eor	r23, r23
 72c:	cb 01       	movw	r24, r22
 72e:	97 f9       	bld	r25, 7
 730:	08 95       	ret

00000732 <__gesf2>:
 732:	0e 94 4c 03 	call	0x698	; 0x698 <__fp_cmp>
 736:	08 f4       	brcc	.+2      	; 0x73a <__gesf2+0x8>
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	08 95       	ret

0000073c <__mulsf3>:
 73c:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3x>
 740:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_round>
 744:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscA>
 748:	38 f0       	brcs	.+14     	; 0x758 <__mulsf3+0x1c>
 74a:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_pscB>
 74e:	20 f0       	brcs	.+8      	; 0x758 <__mulsf3+0x1c>
 750:	95 23       	and	r25, r21
 752:	11 f0       	breq	.+4      	; 0x758 <__mulsf3+0x1c>
 754:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>
 758:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_nan>
 75c:	11 24       	eor	r1, r1
 75e:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>

00000762 <__mulsf3x>:
 762:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__fp_split3>
 766:	70 f3       	brcs	.-36     	; 0x744 <__mulsf3+0x8>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	c1 f3       	breq	.-16     	; 0x75c <__mulsf3+0x20>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	9a f0       	brmi	.+38     	; 0x7f0 <__mulsf3_pse+0x88>
 7ca:	f1 f0       	breq	.+60     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	80 f0       	brcs	.+32     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e8:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>
 7ec:	0c 94 93 03 	jmp	0x726	; 0x726 <__fp_szero>
 7f0:	5f 3f       	cpi	r21, 0xFF	; 255
 7f2:	e4 f3       	brlt	.-8      	; 0x7ec <__mulsf3_pse+0x84>
 7f4:	98 3e       	cpi	r25, 0xE8	; 232
 7f6:	d4 f3       	brlt	.-12     	; 0x7ec <__mulsf3_pse+0x84>
 7f8:	86 95       	lsr	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	e7 95       	ror	r30
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	c1 f7       	brne	.-16     	; 0x7f8 <__mulsf3_pse+0x90>
 808:	fe 2b       	or	r31, r30
 80a:	88 0f       	add	r24, r24
 80c:	91 1d       	adc	r25, r1
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <__fp_inf>:
 816:	97 f9       	bld	r25, 7
 818:	9f 67       	ori	r25, 0x7F	; 127
 81a:	80 e8       	ldi	r24, 0x80	; 128
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	08 95       	ret

00000822 <__fp_nan>:
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	80 ec       	ldi	r24, 0xC0	; 192
 826:	08 95       	ret

00000828 <__fp_pscA>:
 828:	00 24       	eor	r0, r0
 82a:	0a 94       	dec	r0
 82c:	16 16       	cp	r1, r22
 82e:	17 06       	cpc	r1, r23
 830:	18 06       	cpc	r1, r24
 832:	09 06       	cpc	r0, r25
 834:	08 95       	ret

00000836 <__fp_pscB>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	12 16       	cp	r1, r18
 83c:	13 06       	cpc	r1, r19
 83e:	14 06       	cpc	r1, r20
 840:	05 06       	cpc	r0, r21
 842:	08 95       	ret

00000844 <__fp_round>:
 844:	09 2e       	mov	r0, r25
 846:	03 94       	inc	r0
 848:	00 0c       	add	r0, r0
 84a:	11 f4       	brne	.+4      	; 0x850 <__fp_round+0xc>
 84c:	88 23       	and	r24, r24
 84e:	52 f0       	brmi	.+20     	; 0x864 <__fp_round+0x20>
 850:	bb 0f       	add	r27, r27
 852:	40 f4       	brcc	.+16     	; 0x864 <__fp_round+0x20>
 854:	bf 2b       	or	r27, r31
 856:	11 f4       	brne	.+4      	; 0x85c <__fp_round+0x18>
 858:	60 ff       	sbrs	r22, 0
 85a:	04 c0       	rjmp	.+8      	; 0x864 <__fp_round+0x20>
 85c:	6f 5f       	subi	r22, 0xFF	; 255
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	08 95       	ret

00000866 <_exit>:
 866:	f8 94       	cli

00000868 <__stop_program>:
 868:	ff cf       	rjmp	.-2      	; 0x868 <__stop_program>
