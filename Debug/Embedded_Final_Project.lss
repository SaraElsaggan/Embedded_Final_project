
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000097a  00000a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800114  00800114  00000a22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e31  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c0a  00000000  00000000  000023eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00002ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008529  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d4  00000000  00000000  0000b801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000bcd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002f8d  00000000  00000000  0000bd95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bb 04 	jmp	0x976	; 0x976 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
// #include <avr/wdt.h>
#include "WDGDRV.h"



int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    // Set PB0 as output for the LED
    DDRB |= (1 << PB0);
  ae:	87 e3       	ldi	r24, 0x37	; 55
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	20 81       	ld	r18, Z
  b6:	87 e3       	ldi	r24, 0x37	; 55
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	21 60       	ori	r18, 0x01	; 1
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
    PORTB &= ~(1 << PB0);  // Ensure the LED is initially off
  c0:	88 e3       	ldi	r24, 0x38	; 56
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	20 81       	ld	r18, Z
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2e 7f       	andi	r18, 0xFE	; 254
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
    WDGDrv_Init();
  d2:	0e 94 96 00 	call	0x12c	; 0x12c <WDGDrv_Init>

    // Main loop
    while (1) {
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_6>:


int x = 0;


ISR(WDT_vect) {
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
    x = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
  fc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    PORTB |= (1 << 0); // Set PB0 high
 100:	85 e2       	ldi	r24, 0x25	; 37
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	20 81       	ld	r18, Z
 108:	85 e2       	ldi	r24, 0x25	; 37
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	21 60       	ori	r18, 0x01	; 1
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
    // for ( volatile uint32 i = 0; i < 10000000000; i++) {/* Delay loop*/}
    // _delay_ms(1000); 
    // WDTCSR = (1 << WDIE);
}
 112:	00 00       	nop
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <WDGDrv_Init>:

void WDGDrv_Init(void) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1 << 0);
 134:	84 e2       	ldi	r24, 0x24	; 36
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	20 81       	ld	r18, Z
 13c:	84 e2       	ldi	r24, 0x24	; 36
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	21 60       	ori	r18, 0x01	; 1
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
    PORTB &= ~(1 << 0);
 146:	85 e2       	ldi	r24, 0x25	; 37
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	85 e2       	ldi	r24, 0x25	; 37
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	2e 7f       	andi	r18, 0xFE	; 254
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
    // Disable global interrupts
    cli();
 158:	f8 94       	cli
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	88 70       	andi	r24, 0x08	; 8
 160:	99 27       	eor	r25, r25
 162:	89 2b       	or	r24, r25
 164:	11 f0       	breq	.+4      	; 0x16a <WDGDrv_Init+0x3e>
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	01 c0       	rjmp	.+2      	; 0x16c <WDGDrv_Init+0x40>
 16a:	88 e0       	ldi	r24, 0x08	; 8
						_BV(WDE) | (value & 0x07)) )
 16c:	97 e0       	ldi	r25, 0x07	; 7
 16e:	97 70       	andi	r25, 0x07	; 7
 170:	89 2b       	or	r24, r25
				"out __SREG__,__tmp_reg__" "\n\t"
				"sts %0, %2" "\n \t"
				: /* no outputs */
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 172:	98 2f       	mov	r25, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	a8 95       	wdr
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 180:	0f be       	out	0x3f, r0	; 63
 182:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    // SREG &= ~(1 << I);
    //Interrupt and System Reset Mode
    wdt_enable(7);
    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 186:	80 e6       	ldi	r24, 0x60	; 96
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	28 e1       	ldi	r18, 0x18	; 24
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
    WDTCSR =  (1 << WDE)|(1 << WDIE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 190:	80 e6       	ldi	r24, 0x60	; 96
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	2a e4       	ldi	r18, 0x4A	; 74
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
    sei(); // Enable global interrupts
 19a:	78 94       	sei
    // SREG |= (1 << I);
// 
}
 19c:	00 00       	nop
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <WDGM_Init>:
static uint32 start_time;
static uint32 current_time;
uint32 last_execution_time;

void WDGM_Init(void)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
    status = NOK ;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
    led_no_calls = 0;
 1b2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 1b6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 1ba:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 1be:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
    //start_time = HAL_GetTick();
    start_time = 0;
 1c2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <start_time>
 1c6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <start_time+0x1>
 1ca:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <start_time+0x2>
 1ce:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <start_time+0x3>
    //last_execution_time = HAL_GetTick(); 

}
 1d2:	00 00       	nop
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
    //uint32 current_time = HAL_GetTick(); // get current time value using hal lib in stm32f4xx_hal
    if ((current_time - start_time) <= 100) // check if it's within 100ms
 1ea:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <current_time>
 1ee:	30 91 20 01 	lds	r19, 0x0120	; 0x800120 <current_time+0x1>
 1f2:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <current_time+0x2>
 1f6:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <current_time+0x3>
 1fa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <start_time>
 1fe:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <start_time+0x1>
 202:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <start_time+0x2>
 206:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <start_time+0x3>
 20a:	79 01       	movw	r14, r18
 20c:	8a 01       	movw	r16, r20
 20e:	e8 1a       	sub	r14, r24
 210:	f9 0a       	sbc	r15, r25
 212:	0a 0b       	sbc	r16, r26
 214:	1b 0b       	sbc	r17, r27
 216:	d8 01       	movw	r26, r16
 218:	c7 01       	movw	r24, r14
 21a:	85 36       	cpi	r24, 0x65	; 101
 21c:	91 05       	cpc	r25, r1
 21e:	a1 05       	cpc	r26, r1
 220:	b1 05       	cpc	r27, r1
 222:	b0 f5       	brcc	.+108    	; 0x290 <WDGM_MainFunction+0xb6>
    {
        if (led_no_calls >= 8 && led_no_calls <= 12) { // check no. of calls is between 8 and 12 or not
 224:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 228:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 22c:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 230:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 234:	08 97       	sbiw	r24, 0x08	; 8
 236:	a1 05       	cpc	r26, r1
 238:	b1 05       	cpc	r27, r1
 23a:	78 f0       	brcs	.+30     	; 0x25a <WDGM_MainFunction+0x80>
 23c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 240:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 244:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 248:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 24c:	0d 97       	sbiw	r24, 0x0d	; 13
 24e:	a1 05       	cpc	r26, r1
 250:	b1 05       	cpc	r27, r1
 252:	18 f4       	brcc	.+6      	; 0x25a <WDGM_MainFunction+0x80>
            status = OK;
 254:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <status>
 258:	03 c0       	rjmp	.+6      	; 0x260 <WDGM_MainFunction+0x86>
        } else {
            status = NOK;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
        }
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 260:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 264:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 268:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 26c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
        start_time = current_time; // update start time for the next 100ms period
 270:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <current_time>
 274:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <current_time+0x1>
 278:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <current_time+0x2>
 27c:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <current_time+0x3>
 280:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <start_time>
 284:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <start_time+0x1>
 288:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <start_time+0x2>
 28c:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <start_time+0x3>
    }
    last_execution_time = current_time;
 290:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <current_time>
 294:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <current_time+0x1>
 298:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <current_time+0x2>
 29c:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <current_time+0x3>
 2a0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <last_execution_time>
 2a4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <last_execution_time+0x1>
 2a8:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <last_execution_time+0x2>
 2ac:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <last_execution_time+0x3>
}
 2b0:	00 00       	nop
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	08 95       	ret

000002c0 <WDGM_PovideSuppervisionStatus>:

WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
    return status; // The WDGM state
 2c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <status>
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void)
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 2da:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 2de:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 2e2:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 2e6:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	a1 1d       	adc	r26, r1
 2ee:	b1 1d       	adc	r27, r1
 2f0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <led_no_calls>
 2f4:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <led_no_calls+0x1>
 2f8:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <led_no_calls+0x2>
 2fc:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <led_no_calls+0x3>
}
 300:	00 00       	nop
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <Rcc_Init>:

#include "Bit_Operations.h"
#include "Rcc_Private.h"
#include "Std_Types.h"

void Rcc_Init(void) {
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(RCC_CR, 0);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	98 e3       	ldi	r25, 0x38	; 56
 314:	fc 01       	movw	r30, r24
 316:	80 81       	ld	r24, Z
 318:	91 81       	ldd	r25, Z+1	; 0x01
 31a:	a2 81       	ldd	r26, Z+2	; 0x02
 31c:	b3 81       	ldd	r27, Z+3	; 0x03
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	38 e3       	ldi	r19, 0x38	; 56
 322:	81 60       	ori	r24, 0x01	; 1
 324:	f9 01       	movw	r30, r18
 326:	80 83       	st	Z, r24
 328:	91 83       	std	Z+1, r25	; 0x01
 32a:	a2 83       	std	Z+2, r26	; 0x02
 32c:	b3 83       	std	Z+3, r27	; 0x03
//	RCC_CFGR |= (0x0A << 4); // 8MHz internal
}
 32e:	00 00       	nop
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <Rcc_Enable>:

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	00 d0       	rcall	.+0      	; 0x33c <Rcc_Enable+0x6>
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	8b 83       	std	Y+3, r24	; 0x03
  uint8 BusId = PeripheralId / 32;
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	82 95       	swap	r24
 348:	86 95       	lsr	r24
 34a:	87 70       	andi	r24, 0x07	; 7
 34c:	89 83       	std	Y+1, r24	; 0x01
  uint8 PeripheralBitPosition = PeripheralId % 32;
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	8f 71       	andi	r24, 0x1F	; 31
 352:	8a 83       	std	Y+2, r24	; 0x02
  switch (BusId) {
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	88 2f       	mov	r24, r24
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	91 05       	cpc	r25, r1
 35e:	79 f1       	breq	.+94     	; 0x3be <Rcc_Enable+0x88>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	91 05       	cpc	r25, r1
 364:	1c f4       	brge	.+6      	; 0x36c <Rcc_Enable+0x36>
 366:	89 2b       	or	r24, r25
 368:	49 f0       	breq	.+18     	; 0x37c <Rcc_Enable+0x46>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
      break;
    default:
      break;
 36a:	8c c0       	rjmp	.+280    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
}

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
  uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
 36c:	82 30       	cpi	r24, 0x02	; 2
 36e:	91 05       	cpc	r25, r1
 370:	09 f4       	brne	.+2      	; 0x374 <Rcc_Enable+0x3e>
 372:	46 c0       	rjmp	.+140    	; 0x400 <__EEPROM_REGION_LENGTH__>
 374:	03 97       	sbiw	r24, 0x03	; 3
 376:	09 f4       	brne	.+2      	; 0x37a <Rcc_Enable+0x44>
 378:	64 c0       	rjmp	.+200    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
      break;
    default:
      break;
 37a:	84 c0       	rjmp	.+264    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
  uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
    case RCC_AHB1:
      SET_BIT(RCC_AHB1ENR, PeripheralBitPosition);
 37c:	80 e3       	ldi	r24, 0x30	; 48
 37e:	98 e3       	ldi	r25, 0x38	; 56
 380:	fc 01       	movw	r30, r24
 382:	20 81       	ld	r18, Z
 384:	31 81       	ldd	r19, Z+1	; 0x01
 386:	42 81       	ldd	r20, Z+2	; 0x02
 388:	53 81       	ldd	r21, Z+3	; 0x03
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	68 2f       	mov	r22, r24
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <Rcc_Enable+0x64>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <Rcc_Enable+0x60>
 39e:	09 2e       	mov	r0, r25
 3a0:	00 0c       	add	r0, r0
 3a2:	aa 0b       	sbc	r26, r26
 3a4:	bb 0b       	sbc	r27, r27
 3a6:	60 e3       	ldi	r22, 0x30	; 48
 3a8:	78 e3       	ldi	r23, 0x38	; 56
 3aa:	82 2b       	or	r24, r18
 3ac:	93 2b       	or	r25, r19
 3ae:	a4 2b       	or	r26, r20
 3b0:	b5 2b       	or	r27, r21
 3b2:	fb 01       	movw	r30, r22
 3b4:	80 83       	st	Z, r24
 3b6:	91 83       	std	Z+1, r25	; 0x01
 3b8:	a2 83       	std	Z+2, r26	; 0x02
 3ba:	b3 83       	std	Z+3, r27	; 0x03
      break;
 3bc:	63 c0       	rjmp	.+198    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2ENR, PeripheralBitPosition);
 3be:	84 e3       	ldi	r24, 0x34	; 52
 3c0:	98 e3       	ldi	r25, 0x38	; 56
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 81       	ld	r18, Z
 3c6:	31 81       	ldd	r19, Z+1	; 0x01
 3c8:	42 81       	ldd	r20, Z+2	; 0x02
 3ca:	53 81       	ldd	r21, Z+3	; 0x03
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	68 2f       	mov	r22, r24
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <Rcc_Enable+0xa6>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <Rcc_Enable+0xa2>
 3e0:	09 2e       	mov	r0, r25
 3e2:	00 0c       	add	r0, r0
 3e4:	aa 0b       	sbc	r26, r26
 3e6:	bb 0b       	sbc	r27, r27
 3e8:	64 e3       	ldi	r22, 0x34	; 52
 3ea:	78 e3       	ldi	r23, 0x38	; 56
 3ec:	82 2b       	or	r24, r18
 3ee:	93 2b       	or	r25, r19
 3f0:	a4 2b       	or	r26, r20
 3f2:	b5 2b       	or	r27, r21
 3f4:	fb 01       	movw	r30, r22
 3f6:	80 83       	st	Z, r24
 3f8:	91 83       	std	Z+1, r25	; 0x01
 3fa:	a2 83       	std	Z+2, r26	; 0x02
 3fc:	b3 83       	std	Z+3, r27	; 0x03
      break;
 3fe:	42 c0       	rjmp	.+132    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
    case RCC_APB1:
      SET_BIT(RCC_APB1ENR, PeripheralBitPosition);
 400:	80 e4       	ldi	r24, 0x40	; 64
 402:	98 e3       	ldi	r25, 0x38	; 56
 404:	fc 01       	movw	r30, r24
 406:	20 81       	ld	r18, Z
 408:	31 81       	ldd	r19, Z+1	; 0x01
 40a:	42 81       	ldd	r20, Z+2	; 0x02
 40c:	53 81       	ldd	r21, Z+3	; 0x03
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	68 2f       	mov	r22, r24
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 422:	09 2e       	mov	r0, r25
 424:	00 0c       	add	r0, r0
 426:	aa 0b       	sbc	r26, r26
 428:	bb 0b       	sbc	r27, r27
 42a:	60 e4       	ldi	r22, 0x40	; 64
 42c:	78 e3       	ldi	r23, 0x38	; 56
 42e:	82 2b       	or	r24, r18
 430:	93 2b       	or	r25, r19
 432:	a4 2b       	or	r26, r20
 434:	b5 2b       	or	r27, r21
 436:	fb 01       	movw	r30, r22
 438:	80 83       	st	Z, r24
 43a:	91 83       	std	Z+1, r25	; 0x01
 43c:	a2 83       	std	Z+2, r26	; 0x02
 43e:	b3 83       	std	Z+3, r27	; 0x03
      break;
 440:	21 c0       	rjmp	.+66     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
 442:	84 e4       	ldi	r24, 0x44	; 68
 444:	98 e3       	ldi	r25, 0x38	; 56
 446:	fc 01       	movw	r30, r24
 448:	20 81       	ld	r18, Z
 44a:	31 81       	ldd	r19, Z+1	; 0x01
 44c:	42 81       	ldd	r20, Z+2	; 0x02
 44e:	53 81       	ldd	r21, Z+3	; 0x03
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	68 2f       	mov	r22, r24
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	09 2e       	mov	r0, r25
 466:	00 0c       	add	r0, r0
 468:	aa 0b       	sbc	r26, r26
 46a:	bb 0b       	sbc	r27, r27
 46c:	64 e4       	ldi	r22, 0x44	; 68
 46e:	78 e3       	ldi	r23, 0x38	; 56
 470:	82 2b       	or	r24, r18
 472:	93 2b       	or	r25, r19
 474:	a4 2b       	or	r26, r20
 476:	b5 2b       	or	r27, r21
 478:	fb 01       	movw	r30, r22
 47a:	80 83       	st	Z, r24
 47c:	91 83       	std	Z+1, r25	; 0x01
 47e:	a2 83       	std	Z+2, r26	; 0x02
 480:	b3 83       	std	Z+3, r27	; 0x03
      break;
 482:	00 00       	nop
    default:
      break;
  }
}
 484:	00 00       	nop
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <Rcc_Disable>:

void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	00 d0       	rcall	.+0      	; 0x498 <Rcc_Disable+0x6>
 498:	1f 92       	push	r1
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	8b 83       	std	Y+3, r24	; 0x03
     uint8 BusId = PeripheralId / 32;
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	82 95       	swap	r24
 4a4:	86 95       	lsr	r24
 4a6:	87 70       	andi	r24, 0x07	; 7
 4a8:	89 83       	std	Y+1, r24	; 0x01
  uint8 PeripheralBitPosition = PeripheralId % 32;
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	8f 71       	andi	r24, 0x1F	; 31
 4ae:	8a 83       	std	Y+2, r24	; 0x02
  switch (BusId) {
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	88 2f       	mov	r24, r24
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	91 05       	cpc	r25, r1
 4ba:	79 f1       	breq	.+94     	; 0x51a <Rcc_Disable+0x88>
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	91 05       	cpc	r25, r1
 4c0:	1c f4       	brge	.+6      	; 0x4c8 <Rcc_Disable+0x36>
 4c2:	89 2b       	or	r24, r25
 4c4:	49 f0       	breq	.+18     	; 0x4d8 <Rcc_Disable+0x46>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
      break;
    default:
      break;
 4c6:	8c c0       	rjmp	.+280    	; 0x5e0 <Rcc_Disable+0x14e>
}

void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
     uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	91 05       	cpc	r25, r1
 4cc:	09 f4       	brne	.+2      	; 0x4d0 <Rcc_Disable+0x3e>
 4ce:	46 c0       	rjmp	.+140    	; 0x55c <Rcc_Disable+0xca>
 4d0:	03 97       	sbiw	r24, 0x03	; 3
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <Rcc_Disable+0x44>
 4d4:	64 c0       	rjmp	.+200    	; 0x59e <Rcc_Disable+0x10c>
      break;
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
      break;
    default:
      break;
 4d6:	84 c0       	rjmp	.+264    	; 0x5e0 <Rcc_Disable+0x14e>
void Rcc_Disable(Rcc_PeripheralIdType PeripheralId) {
     uint8 BusId = PeripheralId / 32;
  uint8 PeripheralBitPosition = PeripheralId % 32;
  switch (BusId) {
    case RCC_AHB1:
      SET_BIT(RCC_AHB1RSTR, PeripheralBitPosition);
 4d8:	80 e1       	ldi	r24, 0x10	; 16
 4da:	98 e3       	ldi	r25, 0x38	; 56
 4dc:	fc 01       	movw	r30, r24
 4de:	20 81       	ld	r18, Z
 4e0:	31 81       	ldd	r19, Z+1	; 0x01
 4e2:	42 81       	ldd	r20, Z+2	; 0x02
 4e4:	53 81       	ldd	r21, Z+3	; 0x03
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	68 2f       	mov	r22, r24
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <Rcc_Disable+0x64>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <Rcc_Disable+0x60>
 4fa:	09 2e       	mov	r0, r25
 4fc:	00 0c       	add	r0, r0
 4fe:	aa 0b       	sbc	r26, r26
 500:	bb 0b       	sbc	r27, r27
 502:	60 e1       	ldi	r22, 0x10	; 16
 504:	78 e3       	ldi	r23, 0x38	; 56
 506:	82 2b       	or	r24, r18
 508:	93 2b       	or	r25, r19
 50a:	a4 2b       	or	r26, r20
 50c:	b5 2b       	or	r27, r21
 50e:	fb 01       	movw	r30, r22
 510:	80 83       	st	Z, r24
 512:	91 83       	std	Z+1, r25	; 0x01
 514:	a2 83       	std	Z+2, r26	; 0x02
 516:	b3 83       	std	Z+3, r27	; 0x03
      break;
 518:	63 c0       	rjmp	.+198    	; 0x5e0 <Rcc_Disable+0x14e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2RSTR, PeripheralBitPosition);
 51a:	84 e1       	ldi	r24, 0x14	; 20
 51c:	98 e3       	ldi	r25, 0x38	; 56
 51e:	fc 01       	movw	r30, r24
 520:	20 81       	ld	r18, Z
 522:	31 81       	ldd	r19, Z+1	; 0x01
 524:	42 81       	ldd	r20, Z+2	; 0x02
 526:	53 81       	ldd	r21, Z+3	; 0x03
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	68 2f       	mov	r22, r24
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 c0       	rjmp	.+4      	; 0x538 <Rcc_Disable+0xa6>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	6a 95       	dec	r22
 53a:	e2 f7       	brpl	.-8      	; 0x534 <Rcc_Disable+0xa2>
 53c:	09 2e       	mov	r0, r25
 53e:	00 0c       	add	r0, r0
 540:	aa 0b       	sbc	r26, r26
 542:	bb 0b       	sbc	r27, r27
 544:	64 e1       	ldi	r22, 0x14	; 20
 546:	78 e3       	ldi	r23, 0x38	; 56
 548:	82 2b       	or	r24, r18
 54a:	93 2b       	or	r25, r19
 54c:	a4 2b       	or	r26, r20
 54e:	b5 2b       	or	r27, r21
 550:	fb 01       	movw	r30, r22
 552:	80 83       	st	Z, r24
 554:	91 83       	std	Z+1, r25	; 0x01
 556:	a2 83       	std	Z+2, r26	; 0x02
 558:	b3 83       	std	Z+3, r27	; 0x03
      break;
 55a:	42 c0       	rjmp	.+132    	; 0x5e0 <Rcc_Disable+0x14e>
    case RCC_APB1:
      SET_BIT(RCC_APB1RSTR, PeripheralBitPosition);
 55c:	80 e2       	ldi	r24, 0x20	; 32
 55e:	98 e3       	ldi	r25, 0x38	; 56
 560:	fc 01       	movw	r30, r24
 562:	20 81       	ld	r18, Z
 564:	31 81       	ldd	r19, Z+1	; 0x01
 566:	42 81       	ldd	r20, Z+2	; 0x02
 568:	53 81       	ldd	r21, Z+3	; 0x03
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	68 2f       	mov	r22, r24
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <Rcc_Disable+0xe8>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <Rcc_Disable+0xe4>
 57e:	09 2e       	mov	r0, r25
 580:	00 0c       	add	r0, r0
 582:	aa 0b       	sbc	r26, r26
 584:	bb 0b       	sbc	r27, r27
 586:	60 e2       	ldi	r22, 0x20	; 32
 588:	78 e3       	ldi	r23, 0x38	; 56
 58a:	82 2b       	or	r24, r18
 58c:	93 2b       	or	r25, r19
 58e:	a4 2b       	or	r26, r20
 590:	b5 2b       	or	r27, r21
 592:	fb 01       	movw	r30, r22
 594:	80 83       	st	Z, r24
 596:	91 83       	std	Z+1, r25	; 0x01
 598:	a2 83       	std	Z+2, r26	; 0x02
 59a:	b3 83       	std	Z+3, r27	; 0x03
      break;
 59c:	21 c0       	rjmp	.+66     	; 0x5e0 <Rcc_Disable+0x14e>
    case RCC_APB2:
      SET_BIT(RCC_APB2RSTR, PeripheralBitPosition);
 59e:	84 e2       	ldi	r24, 0x24	; 36
 5a0:	98 e3       	ldi	r25, 0x38	; 56
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 81       	ld	r18, Z
 5a6:	31 81       	ldd	r19, Z+1	; 0x01
 5a8:	42 81       	ldd	r20, Z+2	; 0x02
 5aa:	53 81       	ldd	r21, Z+3	; 0x03
 5ac:	8a 81       	ldd	r24, Y+2	; 0x02
 5ae:	68 2f       	mov	r22, r24
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <Rcc_Disable+0x12a>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <Rcc_Disable+0x126>
 5c0:	09 2e       	mov	r0, r25
 5c2:	00 0c       	add	r0, r0
 5c4:	aa 0b       	sbc	r26, r26
 5c6:	bb 0b       	sbc	r27, r27
 5c8:	64 e2       	ldi	r22, 0x24	; 36
 5ca:	78 e3       	ldi	r23, 0x38	; 56
 5cc:	82 2b       	or	r24, r18
 5ce:	93 2b       	or	r25, r19
 5d0:	a4 2b       	or	r26, r20
 5d2:	b5 2b       	or	r27, r21
 5d4:	fb 01       	movw	r30, r22
 5d6:	80 83       	st	Z, r24
 5d8:	91 83       	std	Z+1, r25	; 0x01
 5da:	a2 83       	std	Z+2, r26	; 0x02
 5dc:	b3 83       	std	Z+3, r27	; 0x03
      break;
 5de:	00 00       	nop
    default:
      break;
  }
}
 5e0:	00 00       	nop
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <Nvic_EnableInterrupt>:

volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <Nvic_EnableInterrupt+0x6>
 5f4:	1f 92       	push	r1
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 5fc:	8b 81       	ldd	r24, Y+3	; 0x03
 5fe:	80 36       	cpi	r24, 0x60	; 96
 600:	c0 f5       	brcc	.+112    	; 0x672 <Nvic_EnableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	82 95       	swap	r24
 606:	86 95       	lsr	r24
 608:	87 70       	andi	r24, 0x07	; 7
 60a:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	8f 71       	andi	r24, 0x1F	; 31
 610:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ISER[index], bit);
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	88 2f       	mov	r24, r24
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	80 50       	subi	r24, 0x00	; 0
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	fc 01       	movw	r30, r24
 622:	80 81       	ld	r24, Z
 624:	91 81       	ldd	r25, Z+1	; 0x01
 626:	fc 01       	movw	r30, r24
 628:	20 81       	ld	r18, Z
 62a:	31 81       	ldd	r19, Z+1	; 0x01
 62c:	42 81       	ldd	r20, Z+2	; 0x02
 62e:	53 81       	ldd	r21, Z+3	; 0x03
 630:	8a 81       	ldd	r24, Y+2	; 0x02
 632:	68 2f       	mov	r22, r24
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <Nvic_EnableInterrupt+0x52>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <Nvic_EnableInterrupt+0x4e>
 644:	09 2e       	mov	r0, r25
 646:	00 0c       	add	r0, r0
 648:	aa 0b       	sbc	r26, r26
 64a:	bb 0b       	sbc	r27, r27
 64c:	69 81       	ldd	r22, Y+1	; 0x01
 64e:	66 2f       	mov	r22, r22
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	60 50       	subi	r22, 0x00	; 0
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	fb 01       	movw	r30, r22
 65c:	60 81       	ld	r22, Z
 65e:	71 81       	ldd	r23, Z+1	; 0x01
 660:	82 2b       	or	r24, r18
 662:	93 2b       	or	r25, r19
 664:	a4 2b       	or	r26, r20
 666:	b5 2b       	or	r27, r21
 668:	fb 01       	movw	r30, r22
 66a:	80 83       	st	Z, r24
 66c:	91 83       	std	Z+1, r25	; 0x01
 66e:	a2 83       	std	Z+2, r26	; 0x02
 670:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 672:	00 00       	nop
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	00 d0       	rcall	.+0      	; 0x686 <Nvic_DisableInterrupt+0x6>
 686:	1f 92       	push	r1
 688:	cd b7       	in	r28, 0x3d	; 61
 68a:	de b7       	in	r29, 0x3e	; 62
 68c:	8b 83       	std	Y+3, r24	; 0x03
  if (IRQn < 96)
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	80 36       	cpi	r24, 0x60	; 96
 692:	c0 f5       	brcc	.+112    	; 0x704 <Nvic_DisableInterrupt+0x84>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	82 95       	swap	r24
 698:	86 95       	lsr	r24
 69a:	87 70       	andi	r24, 0x07	; 7
 69c:	89 83       	std	Y+1, r24	; 0x01
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	8f 71       	andi	r24, 0x1F	; 31
 6a2:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(*NVIC_ICER[index], bit);
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	88 2f       	mov	r24, r24
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	8a 5f       	subi	r24, 0xFA	; 250
 6b0:	9e 4f       	sbci	r25, 0xFE	; 254
 6b2:	fc 01       	movw	r30, r24
 6b4:	80 81       	ld	r24, Z
 6b6:	91 81       	ldd	r25, Z+1	; 0x01
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 81       	ld	r18, Z
 6bc:	31 81       	ldd	r19, Z+1	; 0x01
 6be:	42 81       	ldd	r20, Z+2	; 0x02
 6c0:	53 81       	ldd	r21, Z+3	; 0x03
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	68 2f       	mov	r22, r24
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <Nvic_DisableInterrupt+0x52>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <Nvic_DisableInterrupt+0x4e>
 6d6:	09 2e       	mov	r0, r25
 6d8:	00 0c       	add	r0, r0
 6da:	aa 0b       	sbc	r26, r26
 6dc:	bb 0b       	sbc	r27, r27
 6de:	69 81       	ldd	r22, Y+1	; 0x01
 6e0:	66 2f       	mov	r22, r22
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	6a 5f       	subi	r22, 0xFA	; 250
 6ea:	7e 4f       	sbci	r23, 0xFE	; 254
 6ec:	fb 01       	movw	r30, r22
 6ee:	60 81       	ld	r22, Z
 6f0:	71 81       	ldd	r23, Z+1	; 0x01
 6f2:	82 2b       	or	r24, r18
 6f4:	93 2b       	or	r25, r19
 6f6:	a4 2b       	or	r26, r20
 6f8:	b5 2b       	or	r27, r21
 6fa:	fb 01       	movw	r30, r22
 6fc:	80 83       	st	Z, r24
 6fe:	91 83       	std	Z+1, r25	; 0x01
 700:	a2 83       	std	Z+2, r26	; 0x02
 702:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 704:	00 00       	nop
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <delay>:
#include "WDGM.h"
#include "WDGDrv.h"

static uint8 led_state;

static void delay(uint32 time){
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	28 97       	sbiw	r28, 0x08	; 8
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	f8 94       	cli
 720:	de bf       	out	0x3e, r29	; 62
 722:	0f be       	out	0x3f, r0	; 63
 724:	cd bf       	out	0x3d, r28	; 61
 726:	6d 83       	std	Y+5, r22	; 0x05
 728:	7e 83       	std	Y+6, r23	; 0x06
 72a:	8f 83       	std	Y+7, r24	; 0x07
 72c:	98 87       	std	Y+8, r25	; 0x08
    volatile uint32 i;
    time *= 1000;
 72e:	2d 81       	ldd	r18, Y+5	; 0x05
 730:	3e 81       	ldd	r19, Y+6	; 0x06
 732:	4f 81       	ldd	r20, Y+7	; 0x07
 734:	58 85       	ldd	r21, Y+8	; 0x08
 736:	88 ee       	ldi	r24, 0xE8	; 232
 738:	93 e0       	ldi	r25, 0x03	; 3
 73a:	dc 01       	movw	r26, r24
 73c:	0e 94 a1 04 	call	0x942	; 0x942 <__muluhisi3>
 740:	dc 01       	movw	r26, r24
 742:	cb 01       	movw	r24, r22
 744:	8d 83       	std	Y+5, r24	; 0x05
 746:	9e 83       	std	Y+6, r25	; 0x06
 748:	af 83       	std	Y+7, r26	; 0x07
 74a:	b8 87       	std	Y+8, r27	; 0x08
    //  watchdog_refresh();
    for ( i = 0 ; i<time;i++){
 74c:	19 82       	std	Y+1, r1	; 0x01
 74e:	1a 82       	std	Y+2, r1	; 0x02
 750:	1b 82       	std	Y+3, r1	; 0x03
 752:	1c 82       	std	Y+4, r1	; 0x04
 754:	0b c0       	rjmp	.+22     	; 0x76c <delay+0x5a>
 756:	89 81       	ldd	r24, Y+1	; 0x01
 758:	9a 81       	ldd	r25, Y+2	; 0x02
 75a:	ab 81       	ldd	r26, Y+3	; 0x03
 75c:	bc 81       	ldd	r27, Y+4	; 0x04
 75e:	01 96       	adiw	r24, 0x01	; 1
 760:	a1 1d       	adc	r26, r1
 762:	b1 1d       	adc	r27, r1
 764:	89 83       	std	Y+1, r24	; 0x01
 766:	9a 83       	std	Y+2, r25	; 0x02
 768:	ab 83       	std	Y+3, r26	; 0x03
 76a:	bc 83       	std	Y+4, r27	; 0x04
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	9a 81       	ldd	r25, Y+2	; 0x02
 770:	ab 81       	ldd	r26, Y+3	; 0x03
 772:	bc 81       	ldd	r27, Y+4	; 0x04
 774:	2d 81       	ldd	r18, Y+5	; 0x05
 776:	3e 81       	ldd	r19, Y+6	; 0x06
 778:	4f 81       	ldd	r20, Y+7	; 0x07
 77a:	58 85       	ldd	r21, Y+8	; 0x08
 77c:	82 17       	cp	r24, r18
 77e:	93 07       	cpc	r25, r19
 780:	a4 07       	cpc	r26, r20
 782:	b5 07       	cpc	r27, r21
 784:	40 f3       	brcs	.-48     	; 0x756 <delay+0x44>
    // WDG->CR |= 0xFF; //0111 1111
    //  watchdog_refresh();
    }
}
 786:	00 00       	nop
 788:	28 96       	adiw	r28, 0x08	; 8
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	de bf       	out	0x3e, r29	; 62
 790:	0f be       	out	0x3f, r0	; 63
 792:	cd bf       	out	0x3d, r28	; 61
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	08 95       	ret

0000079a <LEDM_Init>:


void LEDM_Init(void)
{
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
    GPIO_Init();
 7a2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <GPIO_Init>
    led_state = 0;
 7a6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <led_state>
}
 7aa:	00 00       	nop
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <LEDM_Manage>:

void LEDM_Manage(void)
{
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62

    // HAL_Delay(500);
	delay(500);
 7ba:	64 ef       	ldi	r22, 0xF4	; 244
 7bc:	71 e0       	ldi	r23, 0x01	; 1
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 89 03 	call	0x712	; 0x712 <delay>
    led_state = ~led_state;
 7c6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_state>
 7ca:	80 95       	com	r24
 7cc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <led_state>
    GPIO_Write(LED_PIN_ID, led_state);
 7d0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <led_state>
 7d4:	68 2f       	mov	r22, r24
 7d6:	83 e0       	ldi	r24, 0x03	; 3
 7d8:	0e 94 44 04 	call	0x888	; 0x888 <GPIO_Write>
    WDGM_AlivenessIndication(); // to count the number of function calls
 7dc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <WDGM_AlivenessIndication>
}
 7e0:	00 00       	nop
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <GPIO_Init>:
#include "Rcc.h"

uint32 GPIO_Addresses[2] = { 0x40020000, 0x40020400}; // for port A and B only

void GPIO_Init(void)
{
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	00 d0       	rcall	.+0      	; 0x7ee <GPIO_Init+0x6>
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
    GpioType * gpioReg =  GPIO_Addresses[LED_PORT_ID];
 7f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <GPIO_Addresses+0x4>
 7f6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <GPIO_Addresses+0x5>
 7fa:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <GPIO_Addresses+0x6>
 7fe:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <GPIO_Addresses+0x7>
 802:	9a 83       	std	Y+2, r25	; 0x02
 804:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->GPIO_MODER &= ~(0x3 << (2 * LED_PIN_ID));
 806:	89 81       	ldd	r24, Y+1	; 0x01
 808:	9a 81       	ldd	r25, Y+2	; 0x02
 80a:	fc 01       	movw	r30, r24
 80c:	80 81       	ld	r24, Z
 80e:	91 81       	ldd	r25, Z+1	; 0x01
 810:	a2 81       	ldd	r26, Z+2	; 0x02
 812:	b3 81       	ldd	r27, Z+3	; 0x03
 814:	8f 73       	andi	r24, 0x3F	; 63
 816:	29 81       	ldd	r18, Y+1	; 0x01
 818:	3a 81       	ldd	r19, Y+2	; 0x02
 81a:	f9 01       	movw	r30, r18
 81c:	80 83       	st	Z, r24
 81e:	91 83       	std	Z+1, r25	; 0x01
 820:	a2 83       	std	Z+2, r26	; 0x02
 822:	b3 83       	std	Z+3, r27	; 0x03
	gpioReg->GPIO_MODER |= (0x01 << (2 * LED_PIN_ID));
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	9a 81       	ldd	r25, Y+2	; 0x02
 828:	fc 01       	movw	r30, r24
 82a:	80 81       	ld	r24, Z
 82c:	91 81       	ldd	r25, Z+1	; 0x01
 82e:	a2 81       	ldd	r26, Z+2	; 0x02
 830:	b3 81       	ldd	r27, Z+3	; 0x03
 832:	80 64       	ori	r24, 0x40	; 64
 834:	29 81       	ldd	r18, Y+1	; 0x01
 836:	3a 81       	ldd	r19, Y+2	; 0x02
 838:	f9 01       	movw	r30, r18
 83a:	80 83       	st	Z, r24
 83c:	91 83       	std	Z+1, r25	; 0x01
 83e:	a2 83       	std	Z+2, r26	; 0x02
 840:	b3 83       	std	Z+3, r27	; 0x03
	gpioReg->GPIO_OTYPER  &= ~(0x01 << LED_PIN_ID);
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	9a 81       	ldd	r25, Y+2	; 0x02
 846:	fc 01       	movw	r30, r24
 848:	84 81       	ldd	r24, Z+4	; 0x04
 84a:	95 81       	ldd	r25, Z+5	; 0x05
 84c:	a6 81       	ldd	r26, Z+6	; 0x06
 84e:	b7 81       	ldd	r27, Z+7	; 0x07
 850:	87 7f       	andi	r24, 0xF7	; 247
 852:	29 81       	ldd	r18, Y+1	; 0x01
 854:	3a 81       	ldd	r19, Y+2	; 0x02
 856:	f9 01       	movw	r30, r18
 858:	84 83       	std	Z+4, r24	; 0x04
 85a:	95 83       	std	Z+5, r25	; 0x05
 85c:	a6 83       	std	Z+6, r26	; 0x06
 85e:	b7 83       	std	Z+7, r27	; 0x07
	gpioReg->GPIO_OTYPER |= (0x00 << LED_PIN_ID);
 860:	89 81       	ldd	r24, Y+1	; 0x01
 862:	9a 81       	ldd	r25, Y+2	; 0x02
 864:	fc 01       	movw	r30, r24
 866:	84 81       	ldd	r24, Z+4	; 0x04
 868:	95 81       	ldd	r25, Z+5	; 0x05
 86a:	a6 81       	ldd	r26, Z+6	; 0x06
 86c:	b7 81       	ldd	r27, Z+7	; 0x07
 86e:	29 81       	ldd	r18, Y+1	; 0x01
 870:	3a 81       	ldd	r19, Y+2	; 0x02
 872:	f9 01       	movw	r30, r18
 874:	84 83       	std	Z+4, r24	; 0x04
 876:	95 83       	std	Z+5, r25	; 0x05
 878:	a6 83       	std	Z+6, r26	; 0x06
 87a:	b7 83       	std	Z+7, r27	; 0x07
	// gpioReg->GPIO_PUPDR &= ~(0x3 << (2 * LED_PIN_ID));
}
 87c:	00 00       	nop
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	00 d0       	rcall	.+0      	; 0x88e <GPIO_Write+0x6>
 88e:	00 d0       	rcall	.+0      	; 0x890 <GPIO_Write+0x8>
 890:	cd b7       	in	r28, 0x3d	; 61
 892:	de b7       	in	r29, 0x3e	; 62
 894:	8b 83       	std	Y+3, r24	; 0x03
 896:	6c 83       	std	Y+4, r22	; 0x04
	GpioType * gpioReg =  GPIO_Addresses[LED_PORT_ID];
 898:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <GPIO_Addresses+0x4>
 89c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <GPIO_Addresses+0x5>
 8a0:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <GPIO_Addresses+0x6>
 8a4:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <GPIO_Addresses+0x7>
 8a8:	9a 83       	std	Y+2, r25	; 0x02
 8aa:	89 83       	std	Y+1, r24	; 0x01
	gpioReg->GPIO_ODR &= ~(0x01 << PinId);
 8ac:	89 81       	ldd	r24, Y+1	; 0x01
 8ae:	9a 81       	ldd	r25, Y+2	; 0x02
 8b0:	fc 01       	movw	r30, r24
 8b2:	24 89       	ldd	r18, Z+20	; 0x14
 8b4:	35 89       	ldd	r19, Z+21	; 0x15
 8b6:	46 89       	ldd	r20, Z+22	; 0x16
 8b8:	57 89       	ldd	r21, Z+23	; 0x17
 8ba:	8b 81       	ldd	r24, Y+3	; 0x03
 8bc:	68 2f       	mov	r22, r24
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <GPIO_Write+0x42>
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	6a 95       	dec	r22
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <GPIO_Write+0x3e>
 8ce:	80 95       	com	r24
 8d0:	90 95       	com	r25
 8d2:	09 2e       	mov	r0, r25
 8d4:	00 0c       	add	r0, r0
 8d6:	aa 0b       	sbc	r26, r26
 8d8:	bb 0b       	sbc	r27, r27
 8da:	82 23       	and	r24, r18
 8dc:	93 23       	and	r25, r19
 8de:	a4 23       	and	r26, r20
 8e0:	b5 23       	and	r27, r21
 8e2:	29 81       	ldd	r18, Y+1	; 0x01
 8e4:	3a 81       	ldd	r19, Y+2	; 0x02
 8e6:	f9 01       	movw	r30, r18
 8e8:	84 8b       	std	Z+20, r24	; 0x14
 8ea:	95 8b       	std	Z+21, r25	; 0x15
 8ec:	a6 8b       	std	Z+22, r26	; 0x16
 8ee:	b7 8b       	std	Z+23, r27	; 0x17
	gpioReg->GPIO_ODR |= (PinData << PinId);
 8f0:	89 81       	ldd	r24, Y+1	; 0x01
 8f2:	9a 81       	ldd	r25, Y+2	; 0x02
 8f4:	fc 01       	movw	r30, r24
 8f6:	24 89       	ldd	r18, Z+20	; 0x14
 8f8:	35 89       	ldd	r19, Z+21	; 0x15
 8fa:	46 89       	ldd	r20, Z+22	; 0x16
 8fc:	57 89       	ldd	r21, Z+23	; 0x17
 8fe:	8c 81       	ldd	r24, Y+4	; 0x04
 900:	88 2f       	mov	r24, r24
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	6b 81       	ldd	r22, Y+3	; 0x03
 906:	66 2f       	mov	r22, r22
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	6a 95       	dec	r22
 912:	e2 f7       	brpl	.-8      	; 0x90c <__stack+0xd>
 914:	09 2e       	mov	r0, r25
 916:	00 0c       	add	r0, r0
 918:	aa 0b       	sbc	r26, r26
 91a:	bb 0b       	sbc	r27, r27
 91c:	82 2b       	or	r24, r18
 91e:	93 2b       	or	r25, r19
 920:	a4 2b       	or	r26, r20
 922:	b5 2b       	or	r27, r21
 924:	29 81       	ldd	r18, Y+1	; 0x01
 926:	3a 81       	ldd	r19, Y+2	; 0x02
 928:	f9 01       	movw	r30, r18
 92a:	84 8b       	std	Z+20, r24	; 0x14
 92c:	95 8b       	std	Z+21, r25	; 0x15
 92e:	a6 8b       	std	Z+22, r26	; 0x16
 930:	b7 8b       	std	Z+23, r27	; 0x17
}
 932:	00 00       	nop
 934:	0f 90       	pop	r0
 936:	0f 90       	pop	r0
 938:	0f 90       	pop	r0
 93a:	0f 90       	pop	r0
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	08 95       	ret

00000942 <__muluhisi3>:
 942:	0e 94 ac 04 	call	0x958	; 0x958 <__umulhisi3>
 946:	a5 9f       	mul	r26, r21
 948:	90 0d       	add	r25, r0
 94a:	b4 9f       	mul	r27, r20
 94c:	90 0d       	add	r25, r0
 94e:	a4 9f       	mul	r26, r20
 950:	80 0d       	add	r24, r0
 952:	91 1d       	adc	r25, r1
 954:	11 24       	eor	r1, r1
 956:	08 95       	ret

00000958 <__umulhisi3>:
 958:	a2 9f       	mul	r26, r18
 95a:	b0 01       	movw	r22, r0
 95c:	b3 9f       	mul	r27, r19
 95e:	c0 01       	movw	r24, r0
 960:	a3 9f       	mul	r26, r19
 962:	70 0d       	add	r23, r0
 964:	81 1d       	adc	r24, r1
 966:	11 24       	eor	r1, r1
 968:	91 1d       	adc	r25, r1
 96a:	b2 9f       	mul	r27, r18
 96c:	70 0d       	add	r23, r0
 96e:	81 1d       	adc	r24, r1
 970:	11 24       	eor	r1, r1
 972:	91 1d       	adc	r25, r1
 974:	08 95       	ret

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
