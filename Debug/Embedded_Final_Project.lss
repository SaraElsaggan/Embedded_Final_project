
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003d4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800106  00800106  0000046e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e18  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac3  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d32  00000000  00000000  00001e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007cea  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000184  00000000  00000000  0000aa36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000abba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000030b9  00000000  00000000  0000ac4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 57 00 	call	0xae	; 0xae <main>
  9e:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SysInit>:


void SysInit(void)
{    
    // PORTB &= ~(1 << 0);
    LEDM_Init();
  a6:	0e 94 90 01 	call	0x320	; 0x320 <LEDM_Init>
    WDGM_Init();
  aa:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <WDGM_Init>

000000ae <main>:
}



int main(void) {    
     DDRB |= (1 << 0); // reset
  ae:	20 9a       	sbi	0x04, 0	; 4

    PORTB |= (1 << 0); // to monitor the system reset
  b0:	28 9a       	sbi	0x05, 0	; 5
    SysInit();
  b2:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	83 ec       	ldi	r24, 0xC3	; 195
  b8:	99 e0       	ldi	r25, 0x09	; 9
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x12>
  c0:	00 00       	nop

    // Main loop
    while (1) {
        _delay_ms(10);
        // _delay_ms(5);
        LEDM_Manage();          // wait for 10ms to call LEDM_Manage again 
  c2:	0e 94 a2 01 	call	0x344	; 0x344 <LEDM_Manage>

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        // WDGCounter += 5; // Increment by the delay amount (5ms)
        WDGCounter += 10; // Increment by the delay amount (10ms)
  c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  ca:	86 5f       	subi	r24, 0xF6	; 246
  cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
        if (WDGCounter >= 20) {
  d0:	84 31       	cpi	r24, 0x14	; 20
  d2:	88 f3       	brcs	.-30     	; 0xb6 <main+0x8>
            WDGM_MainFunction();  // Call watchdog management every 20ms
  d4:	0e 94 0f 01 	call	0x21e	; 0x21e <WDGM_MainFunction>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
  d8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
  dc:	ec cf       	rjmp	.-40     	; 0xb6 <main+0x8>

000000de <WDGDrv_Init>:
    PORTB ^= (1 << 5); // to indicate the timer => 50ms
}

void WDGDrv_Init(void)
{
	SREG &= ~(1 << I); //Disable global interrupts
  de:	8f b7       	in	r24, 0x3f	; 63
  e0:	8f 77       	andi	r24, 0x7F	; 127
  e2:	8f bf       	out	0x3f, r24	; 63
    WDTCSR |= (1 << WDCE) | (1 << WDE); // Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
  e4:	e0 e6       	ldi	r30, 0x60	; 96
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 61       	ori	r24, 0x18	; 24
  ec:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP1)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	80 83       	st	Z, r24

    // CONFIG THE TIMER :
    TCCR1B |= (1 << WGM12); //CTC mode
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24

	// to achieve 50 ms timer => f_OCnA = f_clk_I/O / (2 * N * (1 +Â OCRnA)) 
	
	OCR1A = 815; // realize it from proteus
  fc:	8f e2       	ldi	r24, 0x2F	; 47
  fe:	93 e0       	ldi	r25, 0x03	; 3
 100:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 104:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	// OCR1A = 780; //datasheet

	TIMSK1 |= (1 << OCIE1A); // Enable Timer Compare Interrupt
 108:	af e6       	ldi	r26, 0x6F	; 111
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	8c 91       	ld	r24, X
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS11) | (1 << CS10); // Set the prescaler to 64
 112:	80 81       	ld	r24, Z
 114:	83 60       	ori	r24, 0x03	; 3
 116:	80 83       	st	Z, r24
    SREG |= (1 << I); //enable global interrupts 
 118:	8f b7       	in	r24, 0x3f	; 63
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8f bf       	out	0x3f, r24	; 63
}
 11e:	08 95       	ret

00000120 <WDGDrv_IsrNotification>:

void WDGDrv_IsrNotification(void)
{

		WDGM_StatusType current_state = WDGM_PovideSuppervisionStatus();
 120:	0e 94 79 01 	call	0x2f2	; 0x2f2 <WDGM_PovideSuppervisionStatus>
		uint8 check  = ((!current_state) && (!stuck));
 124:	81 11       	cpse	r24, r1
 126:	12 c0       	rjmp	.+36     	; 0x14c <WDGDrv_IsrNotification+0x2c>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <stuck>
 130:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <stuck+0x1>
 134:	23 2b       	or	r18, r19
 136:	11 f0       	breq	.+4      	; 0x13c <WDGDrv_IsrNotification+0x1c>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0

        if (check)
 13c:	89 2b       	or	r24, r25
 13e:	31 f0       	breq	.+12     	; 0x14c <WDGDrv_IsrNotification+0x2c>
        {
            wdt_reset();
 140:	a8 95       	wdr
            PORTB ^= (1 <<1); // to indicate the perodicity refreshment of the wdt
 142:	85 b1       	in	r24, 0x05	; 5
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	89 27       	eor	r24, r25
        }
        else{
			// leave it to reset
			is_reset++;
            wdt_enable(WDTO_15MS);
            PORTB ^= (1 <<7); // to indicate the perodicity reset of the wdt
 148:	85 b9       	out	0x05, r24	; 5
        }


}
 14a:	08 95       	ret
            wdt_reset();
            PORTB ^= (1 <<1); // to indicate the perodicity refreshment of the wdt
        }
        else{
			// leave it to reset
			is_reset++;
 14c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <is_reset>
 150:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <is_reset+0x1>
 154:	a0 91 09 01 	lds	r26, 0x0109	; 0x800109 <is_reset+0x2>
 158:	b0 91 0a 01 	lds	r27, 0x010A	; 0x80010a <is_reset+0x3>
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	a1 1d       	adc	r26, r1
 160:	b1 1d       	adc	r27, r1
 162:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <is_reset>
 166:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <is_reset+0x1>
 16a:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <is_reset+0x2>
 16e:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <is_reset+0x3>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	98 e0       	ldi	r25, 0x08	; 8
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	a8 95       	wdr
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 180:	0f be       	out	0x3f, r0	; 63
 182:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
            wdt_enable(WDTO_15MS);
            PORTB ^= (1 <<7); // to indicate the perodicity reset of the wdt
 186:	85 b1       	in	r24, 0x05	; 5
 188:	80 58       	subi	r24, 0x80	; 128
 18a:	de cf       	rjmp	.-68     	; 0x148 <WDGDrv_IsrNotification+0x28>

0000018c <__vector_11>:

extern stuck;
uint32 is_reset = 0;

ISR(TIMER1_COMPA_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
    WDGDrv_IsrNotification();
 1ae:	0e 94 90 00 	call	0x120	; 0x120 <WDGDrv_IsrNotification>
    PORTB ^= (1 << 5); // to indicate the timer => 50ms
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	90 e2       	ldi	r25, 0x20	; 32
 1b6:	89 27       	eor	r24, r25
 1b8:	85 b9       	out	0x05, r24	; 5
}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <WDGM_Init>:
static volatile uint32 led_no_calls;
uint32 stuck;

void WDGM_Init(void)
{
    WDGDrv_Init();
 1dc:	0e 94 6f 00 	call	0xde	; 0xde <WDGDrv_Init>
    status = OK;
 1e0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <status>
    led_no_calls = 0;
 1e4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <led_no_calls>
 1e8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <led_no_calls+0x1>
 1ec:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <led_no_calls+0x2>
 1f0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <led_no_calls+0x3>
    stuck = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	a0 e0       	ldi	r26, 0x00	; 0
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <stuck>
 200:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <stuck+0x1>
 204:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <stuck+0x2>
 208:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <stuck+0x3>
    wdg_call_count_within_100_ms = 0;
 20c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <wdg_call_count_within_100_ms>
 210:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <wdg_call_count_within_100_ms+0x1>
 214:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <wdg_call_count_within_100_ms+0x2>
 218:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <wdg_call_count_within_100_ms+0x3>
}
 21c:	08 95       	ret

0000021e <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    stuck = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <stuck>
 22a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <stuck+0x1>
 22e:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <stuck+0x2>
 232:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <stuck+0x3>
    wdg_call_count_within_100_ms++;
 236:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <wdg_call_count_within_100_ms>
 23a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <wdg_call_count_within_100_ms+0x1>
 23e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <wdg_call_count_within_100_ms+0x2>
 242:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <wdg_call_count_within_100_ms+0x3>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	a1 1d       	adc	r26, r1
 24a:	b1 1d       	adc	r27, r1
 24c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <wdg_call_count_within_100_ms>
 250:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <wdg_call_count_within_100_ms+0x1>
 254:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <wdg_call_count_within_100_ms+0x2>
 258:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <wdg_call_count_within_100_ms+0x3>
    PORTB ^= (1 << 3);  // to indicate the perodicity of the function (20ms)
 25c:	85 b1       	in	r24, 0x05	; 5
 25e:	98 e0       	ldi	r25, 0x08	; 8
 260:	89 27       	eor	r24, r25
 262:	85 b9       	out	0x05, r24	; 5
    if(wdg_call_count_within_100_ms >= 5) // 5 * 20 == 100 ms
 264:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <wdg_call_count_within_100_ms>
 268:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <wdg_call_count_within_100_ms+0x1>
 26c:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <wdg_call_count_within_100_ms+0x2>
 270:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <wdg_call_count_within_100_ms+0x3>
 274:	05 97       	sbiw	r24, 0x05	; 5
 276:	a1 05       	cpc	r26, r1
 278:	b1 05       	cpc	r27, r1
 27a:	70 f1       	brcs	.+92     	; 0x2d8 <WDGM_MainFunction+0xba>
    {
        PORTB ^= (1 << 6); // to indicate the perodicity of the function(within 100ms)
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	90 e4       	ldi	r25, 0x40	; 64
 280:	89 27       	eor	r24, r25
 282:	85 b9       	out	0x05, r24	; 5
        if (((led_no_calls >= 8) && (led_no_calls <= 12))) // check no. of calls is between 8 and 12 or not
 284:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <led_no_calls>
 288:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <led_no_calls+0x1>
 28c:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <led_no_calls+0x2>
 290:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <led_no_calls+0x3>
 294:	08 97       	sbiw	r24, 0x08	; 8
 296:	a1 05       	cpc	r26, r1
 298:	b1 05       	cpc	r27, r1
 29a:	38 f1       	brcs	.+78     	; 0x2ea <WDGM_MainFunction+0xcc>
 29c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <led_no_calls>
 2a0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <led_no_calls+0x1>
 2a4:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <led_no_calls+0x2>
 2a8:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <led_no_calls+0x3>
 2ac:	0d 97       	sbiw	r24, 0x0d	; 13
 2ae:	a1 05       	cpc	r26, r1
 2b0:	b1 05       	cpc	r27, r1
 2b2:	d8 f4       	brcc	.+54     	; 0x2ea <WDGM_MainFunction+0xcc>
        {
            status = OK;
 2b4:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <status>
        }
        else
        {
            status = NOK;
        }
        led_no_calls = 0; // Reset the led_no_calls for the next 100ms period
 2b8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <led_no_calls>
 2bc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <led_no_calls+0x1>
 2c0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <led_no_calls+0x2>
 2c4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <led_no_calls+0x3>
        wdg_call_count_within_100_ms = 0;   // return the wdg_call_count_within_100_ms for the next 100ms period
 2c8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <wdg_call_count_within_100_ms>
 2cc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <wdg_call_count_within_100_ms+0x1>
 2d0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <wdg_call_count_within_100_ms+0x2>
 2d4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <wdg_call_count_within_100_ms+0x3>
    }
    
    stuck = 0;
 2d8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <stuck>
 2dc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <stuck+0x1>
 2e0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <stuck+0x2>
 2e4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <stuck+0x3>

}
 2e8:	08 95       	ret
        {
            status = OK;
        }
        else
        {
            status = NOK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <status>
 2f0:	e3 cf       	rjmp	.-58     	; 0x2b8 <WDGM_MainFunction+0x9a>

000002f2 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 2f2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <status>
 2f6:	08 95       	ret

000002f8 <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 2f8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <led_no_calls>
 2fc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <led_no_calls+0x1>
 300:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <led_no_calls+0x2>
 304:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <led_no_calls+0x3>
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	a1 1d       	adc	r26, r1
 30c:	b1 1d       	adc	r27, r1
 30e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <led_no_calls>
 312:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <led_no_calls+0x1>
 316:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <led_no_calls+0x2>
 31a:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <led_no_calls+0x3>
}
 31e:	08 95       	ret

00000320 <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 320:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <GPIO_Init>
    led_state = 1;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <led_state>
	GPIO_Write(LED_PIN_ID, led_state);
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GPIO_Write>
    time_counter = 0;
 332:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <time_counter>
 336:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <time_counter+0x1>
 33a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <time_counter+0x2>
 33e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <time_counter+0x3>
}
 342:	08 95       	ret

00000344 <LEDM_Manage>:

void LEDM_Manage(void)
{   
    PORTB ^= (1 << 2); // to indicate the perodicity of the function (10ms)
 344:	85 b1       	in	r24, 0x05	; 5
 346:	94 e0       	ldi	r25, 0x04	; 4
 348:	89 27       	eor	r24, r25
 34a:	85 b9       	out	0x05, r24	; 5
	time_counter += 10;
 34c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <time_counter>
 350:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <time_counter+0x1>
 354:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <time_counter+0x2>
 358:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <time_counter+0x3>
 35c:	0a 96       	adiw	r24, 0x0a	; 10
 35e:	a1 1d       	adc	r26, r1
 360:	b1 1d       	adc	r27, r1
 362:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <time_counter>
 366:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <time_counter+0x1>
 36a:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <time_counter+0x2>
 36e:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <time_counter+0x3>
//	 time_counter += 5;
	if (time_counter >= 500)
 372:	84 3f       	cpi	r24, 0xF4	; 244
 374:	91 40       	sbci	r25, 0x01	; 1
 376:	a1 05       	cpc	r26, r1
 378:	b1 05       	cpc	r27, r1
 37a:	98 f0       	brcs	.+38     	; 0x3a2 <LEDM_Manage+0x5e>
    {
		led_state = (led_state == 1) ? 0 : 1;
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <led_state>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	09 f4       	brne	.+2      	; 0x388 <LEDM_Manage+0x44>
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <GPIO_Write>
		time_counter = 0; // Reset the time counter for the next 500ms period
 392:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <time_counter>
 396:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <time_counter+0x1>
 39a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <time_counter+0x2>
 39e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <time_counter+0x3>
    }
  WDGM_AlivenessIndication(); // to count the number of function calls
 3a2:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <WDGM_AlivenessIndication>

000003a6 <GPIO_Init>:
    gpioReg->DDR |= (1 << 2); // ledmange
    gpioReg->DDR |= (1 << 3); // WDG_main
    // gpioReg->DDR |= (1 << 4);  //led_toggle
    gpioReg->DDR |= (1 << 5); // timer
    gpioReg->DDR |= (1 << 6); // evey100ms
    gpioReg->DDR |= (1 << 7); // evey100ms
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	84 b9       	out	0x04, r24	; 4
}
 3aa:	08 95       	ret

000003ac <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 3ac:	45 b1       	in	r20, 0x05	; 5
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	f9 01       	movw	r30, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <GPIO_Write+0xe>
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	8a 95       	dec	r24
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <GPIO_Write+0xa>
 3be:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 3c0:	66 23       	and	r22, r22
 3c2:	19 f0       	breq	.+6      	; 0x3ca <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 3c4:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 3c6:	85 b9       	out	0x05, r24	; 5
    }
}
 3c8:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 3ca:	80 95       	com	r24
 3cc:	84 23       	and	r24, r20
 3ce:	fb cf       	rjmp	.-10     	; 0x3c6 <GPIO_Write+0x1a>

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
