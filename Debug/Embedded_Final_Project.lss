
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000003de  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800112  00800112  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecd  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000acd  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd2  00000000  00000000  00001f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007dc1  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000226  00000000  00000000  0000abd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000adff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e62  00000000  00000000  0000aea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  9e:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SysInit>:


uint32 call_count = 0;

int SysInit(void) {
    DDRB |= (1 << 0);
  a6:	b8 9a       	sbi	0x17, 0	; 23
    PORTB &= ~(1 << 0);
  a8:	c0 98       	cbi	0x18, 0	; 24
    GPIO_Init();
  aa:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <GPIO_Init>
    LEDM_Init();
  ae:	0e 94 9a 01 	call	0x334	; 0x334 <LEDM_Init>
    WDGM_Init();
  b2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <WDGM_Init>
    WDGDrv_Init();
  b6:	0e 94 89 00 	call	0x112	; 0x112 <WDGDrv_Init>
}
  ba:	08 95       	ret

000000bc <main>:

int main(void) {
    SysInit();
  bc:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
    static uint8 WDGCounter = 0;

    // Call WDGM_MainFunction for the first time
    WDGM_MainFunction();
  c0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <WDGM_MainFunction>
    // Main loop
    while (1) {
        LEDM_Manage();
  c4:	0e 94 a7 01 	call	0x34e	; 0x34e <LEDM_Manage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	83 ec       	ldi	r24, 0xC3	; 195
  ca:	99 e0       	ldi	r25, 0x09	; 9
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x10>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x16>
  d2:	00 00       	nop
        _delay_ms(10); // wait for 10ms to call LEDM_Manage again 

        // wait until 20ms timing for WDGM_MainFunction (even iterations) 
        WDGCounter += 10; // Increment by the delay amount (10ms)
  d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
  d8:	86 5f       	subi	r24, 0xF6	; 246
  da:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
        if (WDGCounter >= 20) {
  de:	84 31       	cpi	r24, 0x14	; 20
  e0:	88 f3       	brcs	.-30     	; 0xc4 <main+0x8>
            WDGM_MainFunction();  // Call watchdog management every 20ms
  e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <WDGM_MainFunction>
            call_count ++;
  e6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count>
  ea:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count+0x1>
  ee:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <call_count+0x2>
  f2:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <call_count+0x3>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	a1 1d       	adc	r26, r1
  fa:	b1 1d       	adc	r27, r1
  fc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <call_count>
 100:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <call_count+0x1>
 104:	a0 93 15 01 	sts	0x0115, r26	; 0x800115 <call_count+0x2>
 108:	b0 93 16 01 	sts	0x0116, r27	; 0x800116 <call_count+0x3>
            WDGCounter = 0; // Reset count after calling WDGM_MainFunction()
 10c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 110:	d9 cf       	rjmp	.-78     	; 0xc4 <main+0x8>

00000112 <WDGDrv_Init>:
}

void WDGDrv_Init(void) {

    //configure the timer
    TCCR1B |= (1 << WGM12);
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 60       	ori	r24, 0x08	; 8
 11a:	80 83       	st	Z, r24
    OCR1A = 779;
 11c:	8b e0       	ldi	r24, 0x0B	; 11
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 124:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
 128:	80 81       	ld	r24, Z
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	80 83       	st	Z, r24
    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 12e:	ef e6       	ldi	r30, 0x6F	; 111
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24

    WDTCSR = (1 << WDCE) | (1 << WDE);// Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 138:	e0 e6       	ldi	r30, 0x60	; 96
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	80 83       	st	Z, r24
    WDTCSR =  (1 << WDE) | (1 << WDP1);    // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 140:	8a e0       	ldi	r24, 0x0A	; 10
 142:	80 83       	st	Z, r24
    sei(); // Enable global interrupts
 144:	78 94       	sei
    // SREG |= (1 << I);
}
 146:	08 95       	ret

00000148 <WDGDrv_IsrNotification>:


void WDGDrv_IsrNotification(void){
    if(WDGM_PovideSuppervisionStatus()== OK  && (!stuck)){
 148:	0e 94 33 01 	call	0x266	; 0x266 <WDGM_PovideSuppervisionStatus>
 14c:	81 11       	cpse	r24, r1
 14e:	07 c0       	rjmp	.+14     	; 0x15e <WDGDrv_IsrNotification+0x16>
 150:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <stuck>
 154:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <stuck+0x1>
 158:	89 2b       	or	r24, r25
 15a:	09 f4       	brne	.+2      	; 0x15e <WDGDrv_IsrNotification+0x16>
        wdt_reset();
 15c:	a8 95       	wdr
    }else{
        return;
    }
 15e:	08 95       	ret

00000160 <__vector_11>:
#include <avr/wdt.h>
#include <avr/interrupt.h>

extern stuck;

ISR(TIMER1_COMPA_vect) {
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
    PORTB ^= (1 << 0); // Set PB0 high
 182:	85 b1       	in	r24, 0x05	; 5
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	89 27       	eor	r24, r25
 188:	85 b9       	out	0x05, r24	; 5
    WDGDrv_IsrNotification();
 18a:	0e 94 a4 00 	call	0x148	; 0x148 <WDGDrv_IsrNotification>
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <WDGM_Init>:
static volatile uint32 led_no_calls;
uint32 stuck;

void WDGM_Init(void)
{
    status = OK ;
 1b0:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <status>
    led_no_calls = 0;
 1b4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 1b8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 1bc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 1c0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
    stuck = 0;
 1c4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <stuck>
 1c8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stuck+0x1>
 1cc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <stuck+0x2>
 1d0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <stuck+0x3>
}
 1d4:	08 95       	ret

000001d6 <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    stuck = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	a0 e0       	ldi	r26, 0x00	; 0
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <stuck>
 1e2:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <stuck+0x1>
 1e6:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <stuck+0x2>
 1ea:	b0 93 20 01 	sts	0x0120, r27	; 0x800120 <stuck+0x3>
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms 
    if (call_count <= 5) {
 1ee:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <call_count>
 1f2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <call_count+0x1>
 1f6:	06 97       	sbiw	r24, 0x06	; 6
 1f8:	3c f5       	brge	.+78     	; 0x248 <WDGM_MainFunction+0x72>
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 1fa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 1fe:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 202:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 206:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 20a:	08 97       	sbiw	r24, 0x08	; 8
 20c:	a1 05       	cpc	r26, r1
 20e:	b1 05       	cpc	r27, r1
 210:	b8 f0       	brcs	.+46     	; 0x240 <WDGM_MainFunction+0x6a>
 212:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 216:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 21a:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 21e:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 222:	0d 97       	sbiw	r24, 0x0d	; 13
 224:	a1 05       	cpc	r26, r1
 226:	b1 05       	cpc	r27, r1
 228:	58 f4       	brcc	.+22     	; 0x240 <WDGM_MainFunction+0x6a>
        { 
            status = OK;
 22a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <status>
        }
    }else{
        led_no_calls = 0; // Reset the call counter for the next 100ms period
        call_count = 1; //return the call count for the next 100ms period
    }
    stuck = 0;
 22e:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <stuck>
 232:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <stuck+0x1>
 236:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <stuck+0x2>
 23a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <stuck+0x3>
}
 23e:	08 95       	ret
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
        { 
            status = OK;
        } else {
            status = NOK;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <status>
 246:	f3 cf       	rjmp	.-26     	; 0x22e <WDGM_MainFunction+0x58>
        }
    }else{
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 248:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_no_calls>
 24c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_no_calls+0x1>
 250:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <led_no_calls+0x2>
 254:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <led_no_calls+0x3>
        call_count = 1; //return the call count for the next 100ms period
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <call_count+0x1>
 260:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <call_count>
 264:	e4 cf       	rjmp	.-56     	; 0x22e <WDGM_MainFunction+0x58>

00000266 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 266:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <status>
 26a:	08 95       	ret

0000026c <WDGM_AlivenessIndication>:



void WDGM_AlivenessIndication(void)
{
	led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 26c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <led_no_calls>
 270:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <led_no_calls+0x1>
 274:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <led_no_calls+0x2>
 278:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <led_no_calls+0x3>
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	a1 1d       	adc	r26, r1
 280:	b1 1d       	adc	r27, r1
 282:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <led_no_calls>
 286:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <led_no_calls+0x1>
 28a:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <led_no_calls+0x2>
 28e:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <led_no_calls+0x3>
}
 292:	08 95       	ret

00000294 <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 294:	80 36       	cpi	r24, 0x60	; 96
 296:	28 f5       	brcc	.+74     	; 0x2e2 <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 298:	e8 2f       	mov	r30, r24
 29a:	e2 95       	swap	r30
 29c:	e6 95       	lsr	r30
 29e:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ea 5f       	subi	r30, 0xFA	; 250
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	01 90       	ld	r0, Z+
 2ac:	f0 81       	ld	r31, Z
 2ae:	e0 2d       	mov	r30, r0
 2b0:	40 81       	ld	r20, Z
 2b2:	51 81       	ldd	r21, Z+1	; 0x01
 2b4:	62 81       	ldd	r22, Z+2	; 0x02
 2b6:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 2b8:	98 2f       	mov	r25, r24
 2ba:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <Nvic_EnableInterrupt+0x32>
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	9a 95       	dec	r25
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <Nvic_EnableInterrupt+0x2e>
 2ca:	c9 01       	movw	r24, r18
 2cc:	33 0f       	add	r19, r19
 2ce:	aa 0b       	sbc	r26, r26
 2d0:	bb 0b       	sbc	r27, r27
 2d2:	84 2b       	or	r24, r20
 2d4:	95 2b       	or	r25, r21
 2d6:	a6 2b       	or	r26, r22
 2d8:	b7 2b       	or	r27, r23
 2da:	80 83       	st	Z, r24
 2dc:	91 83       	std	Z+1, r25	; 0x01
 2de:	a2 83       	std	Z+2, r26	; 0x02
 2e0:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 2e2:	08 95       	ret

000002e4 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 2e4:	80 36       	cpi	r24, 0x60	; 96
 2e6:	28 f5       	brcc	.+74     	; 0x332 <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 2e8:	e8 2f       	mov	r30, r24
 2ea:	e2 95       	swap	r30
 2ec:	e6 95       	lsr	r30
 2ee:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	e0 50       	subi	r30, 0x00	; 0
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
 2fa:	01 90       	ld	r0, Z+
 2fc:	f0 81       	ld	r31, Z
 2fe:	e0 2d       	mov	r30, r0
 300:	40 81       	ld	r20, Z
 302:	51 81       	ldd	r21, Z+1	; 0x01
 304:	62 81       	ldd	r22, Z+2	; 0x02
 306:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 308:	98 2f       	mov	r25, r24
 30a:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	02 c0       	rjmp	.+4      	; 0x316 <Nvic_DisableInterrupt+0x32>
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	9a 95       	dec	r25
 318:	e2 f7       	brpl	.-8      	; 0x312 <Nvic_DisableInterrupt+0x2e>
 31a:	c9 01       	movw	r24, r18
 31c:	33 0f       	add	r19, r19
 31e:	aa 0b       	sbc	r26, r26
 320:	bb 0b       	sbc	r27, r27
 322:	84 2b       	or	r24, r20
 324:	95 2b       	or	r25, r21
 326:	a6 2b       	or	r26, r22
 328:	b7 2b       	or	r27, r23
 32a:	80 83       	st	Z, r24
 32c:	91 83       	std	Z+1, r25	; 0x01
 32e:	a2 83       	std	Z+2, r26	; 0x02
 330:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 332:	08 95       	ret

00000334 <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 334:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <GPIO_Init>
    led_state = 0;
 338:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <led_state>
    time_counter = 0;
 33c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter>
 340:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x1>
 344:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x2>
 348:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <time_counter+0x3>
}
 34c:	08 95       	ret

0000034e <LEDM_Manage>:

void LEDM_Manage(void)
{
	if (time_counter == 500)
 34e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <time_counter>
 352:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <time_counter+0x1>
 356:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <time_counter+0x2>
 35a:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <time_counter+0x3>
 35e:	84 3f       	cpi	r24, 0xF4	; 244
 360:	91 40       	sbci	r25, 0x01	; 1
 362:	a1 05       	cpc	r26, r1
 364:	b1 05       	cpc	r27, r1
 366:	81 f4       	brne	.+32     	; 0x388 <LEDM_Manage+0x3a>
    {
		led_state = ~led_state;
 368:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <led_state>
 36c:	60 95       	com	r22
 36e:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 db 01 	call	0x3b6	; 0x3b6 <GPIO_Write>
		time_counter = 0;
 378:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_counter>
 37c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_counter+0x1>
 380:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_counter+0x2>
 384:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <time_counter+0x3>
    }
	time_counter += 10;
 388:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <time_counter>
 38c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <time_counter+0x1>
 390:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <time_counter+0x2>
 394:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <time_counter+0x3>
 398:	0a 96       	adiw	r24, 0x0a	; 10
 39a:	a1 1d       	adc	r26, r1
 39c:	b1 1d       	adc	r27, r1
 39e:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <time_counter>
 3a2:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <time_counter+0x1>
 3a6:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <time_counter+0x2>
 3aa:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 3ae:	0c 94 36 01 	jmp	0x26c	; 0x26c <WDGM_AlivenessIndication>

000003b2 <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 3b2:	21 9a       	sbi	0x04, 1	; 4

}
 3b4:	08 95       	ret

000003b6 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 3b6:	45 b1       	in	r20, 0x05	; 5
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	f9 01       	movw	r30, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <GPIO_Write+0xe>
 3c0:	ee 0f       	add	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <GPIO_Write+0xa>
 3c8:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 3ca:	66 23       	and	r22, r22
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 3ce:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 3d0:	85 b9       	out	0x05, r24	; 5
    }
}
 3d2:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 3d4:	80 95       	com	r24
 3d6:	84 23       	and	r24, r20
 3d8:	fb cf       	rjmp	.-10     	; 0x3d0 <GPIO_Write+0x1a>

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
