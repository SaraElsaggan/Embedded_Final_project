
Embedded_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000003be  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800112  00800112  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4a  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a64  00000000  00000000  00001426  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e45  00000000  00000000  00001e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d60  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000178  00000000  00000000  0000abb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000ad30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003059  00000000  00000000  0000add8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  9e:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SysInit>:

uint32 call_count_100_ms = 0;
uint32 call_count_50_ms = 0;

int SysInit(void) {
    DDRB |= (1 << 0);
  a6:	20 9a       	sbi	0x04, 0	; 4
    // DDRB |= (1 << 0);
    DDRB |= (1 << 2);
  a8:	22 9a       	sbi	0x04, 2	; 4
    PORTB &= ~(1 << 0);
  aa:	28 98       	cbi	0x05, 0	; 5
    GPIO_Init();
  ac:	0e 94 c9 01 	call	0x392	; 0x392 <GPIO_Init>
    LEDM_Init();
  b0:	0e 94 8a 01 	call	0x314	; 0x314 <LEDM_Init>
    WDGM_Init();
  b4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <WDGM_Init>
    WDGDrv_Init();
  b8:	0e 94 8d 00 	call	0x11a	; 0x11a <WDGDrv_Init>
    
}
  bc:	08 95       	ret

000000be <main>:

int main(void) {
     DDRB |= (1 << 3);
  be:	23 9a       	sbi	0x04, 3	; 4
     PORTB |= (1 << 3);
  c0:	2b 9a       	sbi	0x05, 3	; 5
    
    SysInit();
  c2:	0e 94 53 00 	call	0xa6	; 0xa6 <SysInit>
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x8>

000000c8 <__vector_11>:
extern stuck;
extern call_count_50_ms;
uint32 isr_counter = 0;

ISR(TIMER1_COMPA_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
    isr_counter++;
  da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <isr_counter>
  de:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <isr_counter+0x1>
  e2:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <isr_counter+0x2>
  e6:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <isr_counter+0x3>
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	a1 1d       	adc	r26, r1
  ee:	b1 1d       	adc	r27, r1
  f0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <isr_counter>
  f4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <isr_counter+0x1>
  f8:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <isr_counter+0x2>
  fc:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <isr_counter+0x3>
    PORTB ^= (1 << 0); // Set PB0 high
 100:	85 b1       	in	r24, 0x05	; 5
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	89 27       	eor	r24, r25
 106:	85 b9       	out	0x05, r24	; 5
    // WDGDrv_IsrNotification();
}
 108:	bf 91       	pop	r27
 10a:	af 91       	pop	r26
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <WDGDrv_Init>:

void WDGDrv_Init(void)
{
    cli();                             // Enable global interrupts
 11a:	f8 94       	cli

    // configure the timer
    TCCR1B |= (1 << WGM12);
 11c:	e1 e8       	ldi	r30, 0x81	; 129
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	80 83       	st	Z, r24
    OCR1A = 779;
 126:	8b e0       	ldi	r24, 0x0B	; 11
 128:	93 e0       	ldi	r25, 0x03	; 3
 12a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 12e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    // Set the prescaler to 64
    TCCR1B |= (1 << CS11) | (1 << CS10);
 132:	80 81       	ld	r24, Z
 134:	83 60       	ori	r24, 0x03	; 3
 136:	80 83       	st	Z, r24
    // Enable Timer Compare Interrupt
    TIMSK1 |= (1 << OCIE1A);
 138:	ef e6       	ldi	r30, 0x6F	; 111
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24


    // wdt_reset();
    MCUSR &= ~(1<<3);
 142:	84 b7       	in	r24, 0x34	; 52
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	84 bf       	out	0x34, r24	; 52
    // WDTCSR = 0x00;
    WDTCSR = (1 << WDCE) | (1 << WDE); // Set the Watchdog change enable bit and Watchdog system reset enable bit in one operation
 148:	e0 e6       	ldi	r30, 0x60	; 96
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	88 e1       	ldi	r24, 0x18	; 24
 14e:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP1)  ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	80 83       	st	Z, r24
    // WDTCSR = (1 << WDIE) ; // Set the prescaler to 64 seconds and enable the Watchdog interrupt
    sei();                             // Enable global interrupts
 154:	78 94       	sei
        // WDTCSR = (1 << WDE) | (1 << WDP2) | (1 << WDP1); // Set the watchdog to approximately 0.5 seconds

    // SREG |= (1 << I);
}
 156:	08 95       	ret

00000158 <WDGDrv_IsrNotification>:

void WDGDrv_IsrNotification(void)
{
    if ((isr_counter % 2) != 0) // when time is 50 , 150 , 250 and so on
 158:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <isr_counter>
 15c:	80 ff       	sbrs	r24, 0
 15e:	1b c0       	rjmp	.+54     	; 0x196 <WDGDrv_IsrNotification+0x3e>
    {
        // check call_count(times WDGM_MainFunction is called) is 2 or more
        if (call_count_50_ms >= 2)
 160:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 164:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 168:	02 97       	sbiw	r24, 0x02	; 2
 16a:	74 f0       	brlt	.+28     	; 0x188 <WDGDrv_IsrNotification+0x30>
        {
            stuck = 0;            // The function is not stuck
 16c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck+0x1>
 170:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stuck>
            wdt_reset(); //  should i do the reset here when not stuck?
 174:	a8 95       	wdr
            PORTB ^= (1 << 0); // to indicate the perodicity refreshment of the wdt
 176:	85 b1       	in	r24, 0x05	; 5
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	89 27       	eor	r24, r25
 17c:	85 b9       	out	0x05, r24	; 5
            call_count_50_ms = 0; // Reset for the next 50ms period
 17e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 182:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 186:	08 95       	ret
        }
        else
        {
            stuck = 1; // The function might be stuck
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <stuck+0x1>
 190:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <stuck>
 194:	08 95       	ret
        }
    }
    else  // if in 100 , 200 , 300 and so on
    {
        if (WDGM_PovideSuppervisionStatus() == OK && (!stuck))
 196:	0e 94 23 01 	call	0x246	; 0x246 <WDGM_PovideSuppervisionStatus>
 19a:	81 11       	cpse	r24, r1
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <WDGDrv_IsrNotification+0x5c>
 19e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <stuck>
 1a2:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <stuck+0x1>
 1a6:	89 2b       	or	r24, r25
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <WDGDrv_IsrNotification+0x5c>
        {
            wdt_reset();
 1aa:	a8 95       	wdr
            PORTB ^= (1 << 0); // to indicate the perodicity refreshment of the wdt
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	89 27       	eor	r24, r25
 1b2:	85 b9       	out	0x05, r24	; 5
        {
            // leave the wdt to reset 
            return;
        }
    }
}
 1b4:	08 95       	ret

000001b6 <WDGM_Init>:
static volatile uint32 led_no_calls;
uint32 stuck;

void WDGM_Init(void)
{
    status = NOK;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <status>
    led_no_calls = 0;
 1bc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <led_no_calls>
 1c0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls+0x1>
 1c4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x2>
 1c8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x3>
    stuck = 0;
 1cc:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <stuck>
 1d0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <stuck+0x1>
 1d4:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <stuck+0x2>
 1d8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <stuck+0x3>
}
 1dc:	08 95       	ret

000001de <WDGM_MainFunction>:

void WDGM_MainFunction(void)
{
    // PORTB ^= (1 << 3); // to indicate the perodicity of the function
    // Check LEDM calls periodicity every 100ms (5 * 20ms = 100ms) first call-> time = 0ms
    if (call_count_100_ms <= 5)
 1de:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <call_count_100_ms>
 1e2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <call_count_100_ms+0x1>
 1e6:	06 97       	sbiw	r24, 0x06	; 6
 1e8:	fc f4       	brge	.+62     	; 0x228 <WDGM_MainFunction+0x4a>
    {
        // Check number of LEDM calls within 100ms
        if (led_no_calls >= 8 && led_no_calls <= 12) // check no. of calls is between 8 and 12 or not
 1ea:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <led_no_calls>
 1ee:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <led_no_calls+0x1>
 1f2:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <led_no_calls+0x2>
 1f6:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <led_no_calls+0x3>
 1fa:	08 97       	sbiw	r24, 0x08	; 8
 1fc:	a1 05       	cpc	r26, r1
 1fe:	b1 05       	cpc	r27, r1
 200:	78 f0       	brcs	.+30     	; 0x220 <WDGM_MainFunction+0x42>
 202:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <led_no_calls>
 206:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <led_no_calls+0x1>
 20a:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <led_no_calls+0x2>
 20e:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <led_no_calls+0x3>
 212:	0d 97       	sbiw	r24, 0x0d	; 13
 214:	a1 05       	cpc	r26, r1
 216:	b1 05       	cpc	r27, r1
 218:	18 f4       	brcc	.+6      	; 0x220 <WDGM_MainFunction+0x42>
        {
            status = OK;
 21a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <status>
 21e:	08 95       	ret
        }
        else
        {
            status = NOK;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <status>
 226:	08 95       	ret
        }
    }
    else
    {
        led_no_calls = 0; // Reset the call counter for the next 100ms period
 228:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <led_no_calls>
 22c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <led_no_calls+0x1>
 230:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <led_no_calls+0x2>
 234:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <led_no_calls+0x3>
        call_count_100_ms = 1;   // return the call count for the next 100ms period
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <call_count_100_ms+0x1>
 240:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <call_count_100_ms>
    }
}
 244:	08 95       	ret

00000246 <WDGM_PovideSuppervisionStatus>:


WDGM_StatusType WDGM_PovideSuppervisionStatus(void)
{
    return status; // The WDGM state
}
 246:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <status>
 24a:	08 95       	ret

0000024c <WDGM_AlivenessIndication>:


void WDGM_AlivenessIndication(void)
{
    led_no_calls++; // increment correct calls counter each time LEDM_Manage is called this
 24c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <led_no_calls>
 250:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <led_no_calls+0x1>
 254:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <led_no_calls+0x2>
 258:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <led_no_calls+0x3>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	a1 1d       	adc	r26, r1
 260:	b1 1d       	adc	r27, r1
 262:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <led_no_calls>
 266:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <led_no_calls+0x1>
 26a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <led_no_calls+0x2>
 26e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <led_no_calls+0x3>
 272:	08 95       	ret

00000274 <Nvic_EnableInterrupt>:
volatile uint32 *NVIC_ISER[3] = {&NVIC_ISER_OFFSET(0), &NVIC_ISER_OFFSET(1), &NVIC_ISER_OFFSET(2)};
volatile uint32 *NVIC_ICER[3] = {&NVIC_ICER_OFFSET(0), &NVIC_ICER_OFFSET(1), &NVIC_ICER_OFFSET(2)};

void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 274:	80 36       	cpi	r24, 0x60	; 96
 276:	28 f5       	brcc	.+74     	; 0x2c2 <Nvic_EnableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 278:	e8 2f       	mov	r30, r24
 27a:	e2 95       	swap	r30
 27c:	e6 95       	lsr	r30
 27e:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ISER[index], bit);
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	ea 5f       	subi	r30, 0xFA	; 250
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	01 90       	ld	r0, Z+
 28c:	f0 81       	ld	r31, Z
 28e:	e0 2d       	mov	r30, r0
 290:	40 81       	ld	r20, Z
 292:	51 81       	ldd	r21, Z+1	; 0x01
 294:	62 81       	ldd	r22, Z+2	; 0x02
 296:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_EnableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 298:	98 2f       	mov	r25, r24
 29a:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ISER[index], bit);
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <Nvic_EnableInterrupt+0x32>
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	9a 95       	dec	r25
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <Nvic_EnableInterrupt+0x2e>
 2aa:	c9 01       	movw	r24, r18
 2ac:	33 0f       	add	r19, r19
 2ae:	aa 0b       	sbc	r26, r26
 2b0:	bb 0b       	sbc	r27, r27
 2b2:	84 2b       	or	r24, r20
 2b4:	95 2b       	or	r25, r21
 2b6:	a6 2b       	or	r26, r22
 2b8:	b7 2b       	or	r27, r23
 2ba:	80 83       	st	Z, r24
 2bc:	91 83       	std	Z+1, r25	; 0x01
 2be:	a2 83       	std	Z+2, r26	; 0x02
 2c0:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 2c2:	08 95       	ret

000002c4 <Nvic_DisableInterrupt>:

void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
 2c4:	80 36       	cpi	r24, 0x60	; 96
 2c6:	28 f5       	brcc	.+74     	; 0x312 <Nvic_DisableInterrupt+0x4e>
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
 2c8:	e8 2f       	mov	r30, r24
 2ca:	e2 95       	swap	r30
 2cc:	e6 95       	lsr	r30
 2ce:	e7 70       	andi	r30, 0x07	; 7
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
    SET_BIT(*NVIC_ICER[index], bit);
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	e0 50       	subi	r30, 0x00	; 0
 2d8:	ff 4f       	sbci	r31, 0xFF	; 255
 2da:	01 90       	ld	r0, Z+
 2dc:	f0 81       	ld	r31, Z
 2de:	e0 2d       	mov	r30, r0
 2e0:	40 81       	ld	r20, Z
 2e2:	51 81       	ldd	r21, Z+1	; 0x01
 2e4:	62 81       	ldd	r22, Z+2	; 0x02
 2e6:	73 81       	ldd	r23, Z+3	; 0x03
void Nvic_DisableInterrupt(uint8 IRQn)
{
  if (IRQn < 96)
  {
    uint8 index = IRQn / NUM_OF_BITS_PER_REGISTER;
    uint8 bit = IRQn % NUM_OF_BITS_PER_REGISTER;
 2e8:	98 2f       	mov	r25, r24
 2ea:	9f 71       	andi	r25, 0x1F	; 31
    SET_BIT(*NVIC_ICER[index], bit);
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <Nvic_DisableInterrupt+0x32>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	9a 95       	dec	r25
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <Nvic_DisableInterrupt+0x2e>
 2fa:	c9 01       	movw	r24, r18
 2fc:	33 0f       	add	r19, r19
 2fe:	aa 0b       	sbc	r26, r26
 300:	bb 0b       	sbc	r27, r27
 302:	84 2b       	or	r24, r20
 304:	95 2b       	or	r25, r21
 306:	a6 2b       	or	r26, r22
 308:	b7 2b       	or	r27, r23
 30a:	80 83       	st	Z, r24
 30c:	91 83       	std	Z+1, r25	; 0x01
 30e:	a2 83       	std	Z+2, r26	; 0x02
 310:	b3 83       	std	Z+3, r27	; 0x03
  }
}
 312:	08 95       	ret

00000314 <LEDM_Init>:
static uint8 led_state;


void LEDM_Init(void)
{
    GPIO_Init();
 314:	0e 94 c9 01 	call	0x392	; 0x392 <GPIO_Init>
    led_state = 0;
 318:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <led_state>
    time_counter = 0;
 31c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <time_counter>
 320:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter+0x1>
 324:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x2>
 328:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x3>
}
 32c:	08 95       	ret

0000032e <LEDM_Manage>:

void LEDM_Manage(void)
{   
    // PORTB ^= (1 << 2); // to indicate the perodicity of the function
    
	if (time_counter == 500)
 32e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <time_counter>
 332:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <time_counter+0x1>
 336:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <time_counter+0x2>
 33a:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <time_counter+0x3>
 33e:	84 3f       	cpi	r24, 0xF4	; 244
 340:	91 40       	sbci	r25, 0x01	; 1
 342:	a1 05       	cpc	r26, r1
 344:	b1 05       	cpc	r27, r1
 346:	81 f4       	brne	.+32     	; 0x368 <LEDM_Manage+0x3a>
    {
		led_state = ~led_state;
 348:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <led_state>
 34c:	60 95       	com	r22
 34e:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <led_state>
		GPIO_Write(LED_PIN_ID, led_state);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 cb 01 	call	0x396	; 0x396 <GPIO_Write>
		time_counter = 0;
 358:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <time_counter>
 35c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <time_counter+0x1>
 360:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <time_counter+0x2>
 364:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <time_counter+0x3>
    }
	time_counter += 10;
 368:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <time_counter>
 36c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <time_counter+0x1>
 370:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <time_counter+0x2>
 374:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <time_counter+0x3>
 378:	0a 96       	adiw	r24, 0x0a	; 10
 37a:	a1 1d       	adc	r26, r1
 37c:	b1 1d       	adc	r27, r1
 37e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <time_counter>
 382:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <time_counter+0x1>
 386:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <time_counter+0x2>
 38a:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <time_counter+0x3>
    WDGM_AlivenessIndication(); // to count the number of function calls
 38e:	0c 94 26 01 	jmp	0x24c	; 0x24c <WDGM_AlivenessIndication>

00000392 <GPIO_Init>:
GpioType* const GPIO_Addresses[3] = { (GpioType*)GPIOB_BASE_ADDR, (GpioType*)GPIOC_BASE_ADDR, (GpioType*)GPIOD_BASE_ADDR };

void GPIO_Init(void)
{
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
	gpioReg->DDR |= (1 << LED_PIN_ID);
 392:	21 9a       	sbi	0x04, 1	; 4

}
 394:	08 95       	ret

00000396 <GPIO_Write>:

void GPIO_Write(unsigned char PinId, unsigned char PinData) {
 396:	45 b1       	in	r20, 0x05	; 5
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	f9 01       	movw	r30, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <GPIO_Write+0xe>
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	8a 95       	dec	r24
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <GPIO_Write+0xa>
 3a8:	cf 01       	movw	r24, r30
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
 3aa:	66 23       	and	r22, r22
 3ac:	19 f0       	breq	.+6      	; 0x3b4 <GPIO_Write+0x1e>
        gpioReg->PORT |= (1 << PinId); // Set the pin
 3ae:	84 2b       	or	r24, r20
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 3b0:	85 b9       	out	0x05, r24	; 5
    }
}
 3b2:	08 95       	ret
void GPIO_Write(unsigned char PinId, unsigned char PinData) {
    GpioType* gpioReg = GPIO_Addresses[LED_PORT_ID];
    if (PinData) {
        gpioReg->PORT |= (1 << PinId); // Set the pin
    } else {
        gpioReg->PORT &= ~(1 << PinId); // Clear the pin
 3b4:	80 95       	com	r24
 3b6:	84 23       	and	r24, r20
 3b8:	fb cf       	rjmp	.-10     	; 0x3b0 <GPIO_Write+0x1a>

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
